
// Generated from MavkaLexer.g4 by ANTLR 4.13.0


#include "MavkaLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct MavkaLexerStaticData final {
  MavkaLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  MavkaLexerStaticData(const MavkaLexerStaticData&) = delete;
  MavkaLexerStaticData(MavkaLexerStaticData&&) = delete;
  MavkaLexerStaticData& operator=(const MavkaLexerStaticData&) = delete;
  MavkaLexerStaticData& operator=(MavkaLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag mavkalexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
MavkaLexerStaticData *mavkalexerLexerStaticData = nullptr;

void mavkalexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (mavkalexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(mavkalexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<MavkaLexerStaticData>(
    std::vector<std::string>{
      "KW_END", "KW_DIIA", "KW_STRUCTURE", "KW_FOR", "KW_CYCLE", "KW_IF", 
      "KW_WAIT", "KW_TAKE", "KW_GIVE", "KW_AS", "KW_TA", "KW_IS", "KW_SPEC", 
      "KW_RETURN", "KW_ASYNC", "KW_SUBJECT", "KW_AND", "KW_OR", "KW_TRY", 
      "KW_CATCH", "KW_ELSE", "KW_THROW", "KW_WHILE", "KW_MODULE", "KW_EQ_WORD", 
      "KW_GR_WORD", "KW_SM_WORD", "KW_HAS_WORD", "KW_MOCKUP", "KW_NOT", 
      "KW_PARENT", "KW_TSE", "KW_PERELIK", "KW_COMPOSITION", "KW_PUBLIC", 
      "KW_PRIVATE", "KW_PROTECTED", "KW_PROPERTY", "EQUAL", "GREATER", "LESSER", 
      "DOT", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MOD", "POWER", "AND", 
      "OR", "PAREN_OPEN", "PAREN_CLOSE", "BRACKET_OPEN", "BRACKET_CLOSE", 
      "QUESTION", "COLON", "TILDA", "QUOTE", "DOUBLE_QUOTE", "EXCLAMATION", 
      "COMA", "NUMBER", "INTEGER", "INTEGER_START", "INTEGER_CONTINUE", 
      "FLOAT", "FLOAT_START", "FLOAT_CONTINUE", "HEX", "HEX_START", "HEX_CONTINUE", 
      "BIN", "BIN_START", "BIN_CONTINUE", "DIGIT", "ID", "ID_START", "ID_CONTINUE", 
      "STRING_MULTILINE", "STRING", "CHARACTER", "COMMENT", "LINE_COMMENT", 
      "NL", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'\\u043A\\u0456\\u043D\\u0435\\u0446\\u044C'", "'\\u0434\\u0456\\u044F'", 
      "'\\u0441\\u0442\\u0440\\u0443\\u043A\\u0442\\u0443\\u0440\\u0430'", 
      "'\\u043F\\u0435\\u0440\\u0435\\u0431\\u0440\\u0430\\u0442\\u0438'", 
      "'\\u0446\\u0438\\u043A\\u043B'", "'\\u044F\\u043A\\u0449\\u043E'", 
      "'\\u0447\\u0435\\u043A\\u0430\\u0442\\u0438'", "'\\u0432\\u0437\\u044F\\u0442\\u0438'", 
      "'\\u0434\\u0430\\u0442\\u0438'", "'\\u044F\\u043A'", "'\\u0442\\u0430'", 
      "'\\u0454'", "'\\u0441\\u043F\\u0435\\u0446'", "'\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u0438'", 
      "'\\u0442\\u0440\\u0438\\u0432\\u0430\\u043B\\u0430'", "'\\u0441\\u0443\\u0431\\u02BC\\u0454\\u043A\\u0442'", 
      "'\\u0456'", "'\\u0430\\u0431\\u043E'", "'\\u0441\\u043F\\u0440\\u043E\\u0431\\u0443\\u0432\\u0430\\u0442\\u0438'", 
      "'\\u0437\\u043B\\u043E\\u0432\\u0438\\u0442\\u0438'", "'\\u0456\\u043D\\u0430\\u043A\\u0448\\u0435'", 
      "'\\u0432\\u043F\\u0430\\u0441\\u0442\\u0438'", "'\\u043F\\u043E\\u043A\\u0438'", 
      "'\\u043C\\u043E\\u0434\\u0443\\u043B\\u044C'", "'\\u0440\\u0456\\u0432\\u043D\\u043E'", 
      "'\\u0431\\u0456\\u043B\\u044C\\u0448\\u0435'", "'\\u043C\\u0435\\u043D\\u0448\\u0435'", 
      "'\\u043C\\u0456\\u0441\\u0442\\u0438\\u0442\\u044C'", "'\\u043C\\u0430\\u043A\\u0435\\u0442'", 
      "'\\u043D\\u0435'", "'\\u043F\\u0440\\u0435\\u0434\\u043E\\u043A'", 
      "'\\u0446\\u0435'", "'\\u043F\\u0435\\u0440\\u0435\\u043B\\u0456\\u043A'", 
      "'\\u043A\\u043E\\u043C\\u043F\\u043E\\u0437\\u0438\\u0446\\u0456\\u044F'", 
      "'\\u0437\\u043E\\u0432\\u043D\\u0456\\u0448\\u043D\\u044F'", "'\\u0432\\u043D\\u0443\\u0442\\u0440\\u0456\\u0448\\u043D\\u044F'", 
      "'\\u043C\\u0456\\u0441\\u0446\\u0435\\u0432\\u0430'", "'\\u0432\\u043B\\u0430\\u0441\\u0442\\u0438\\u0432\\u0456\\u0441\\u0442\\u044C'", 
      "'='", "'>'", "'<'", "'.'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", 
      "'&'", "'|'", "'('", "')'", "'['", "']'", "'\\u003F'", "':'", "'~'", 
      "'''", "'\"'", "'!'", "','"
    },
    std::vector<std::string>{
      "", "KW_END", "KW_DIIA", "KW_STRUCTURE", "KW_FOR", "KW_CYCLE", "KW_IF", 
      "KW_WAIT", "KW_TAKE", "KW_GIVE", "KW_AS", "KW_TA", "KW_IS", "KW_SPEC", 
      "KW_RETURN", "KW_ASYNC", "KW_SUBJECT", "KW_AND", "KW_OR", "KW_TRY", 
      "KW_CATCH", "KW_ELSE", "KW_THROW", "KW_WHILE", "KW_MODULE", "KW_EQ_WORD", 
      "KW_GR_WORD", "KW_SM_WORD", "KW_HAS_WORD", "KW_MOCKUP", "KW_NOT", 
      "KW_PARENT", "KW_TSE", "KW_PERELIK", "KW_COMPOSITION", "KW_PUBLIC", 
      "KW_PRIVATE", "KW_PROTECTED", "KW_PROPERTY", "EQUAL", "GREATER", "LESSER", 
      "DOT", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MOD", "POWER", "AND", 
      "OR", "PAREN_OPEN", "PAREN_CLOSE", "BRACKET_OPEN", "BRACKET_CLOSE", 
      "QUESTION", "COLON", "TILDA", "QUOTE", "DOUBLE_QUOTE", "EXCLAMATION", 
      "COMA", "NUMBER", "INTEGER", "FLOAT", "HEX", "BIN", "ID", "STRING_MULTILINE", 
      "STRING", "CHARACTER", "COMMENT", "LINE_COMMENT", "NL", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,74,635,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,
  	1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,
  	4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
  	1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,
  	1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
  	1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
  	1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,
  	1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,
  	1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,
  	1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,
  	1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
  	1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,
  	1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,
  	1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,
  	1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,
  	1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,61,1,61,3,61,473,8,61,1,62,
  	1,62,5,62,477,8,62,10,62,12,62,480,9,62,1,63,1,63,1,64,3,64,485,8,64,
  	1,64,1,64,1,65,1,65,5,65,491,8,65,10,65,12,65,494,9,65,1,65,1,65,1,65,
  	5,65,499,8,65,10,65,12,65,502,9,65,1,66,1,66,1,67,3,67,507,8,67,1,67,
  	1,67,1,68,1,68,1,68,1,68,5,68,515,8,68,10,68,12,68,518,9,68,1,69,1,69,
  	3,69,522,8,69,1,70,3,70,525,8,70,1,70,1,70,3,70,529,8,70,1,71,1,71,1,
  	71,1,71,5,71,535,8,71,10,71,12,71,538,9,71,1,72,1,72,1,73,3,73,543,8,
  	73,1,73,1,73,1,74,1,74,1,75,1,75,5,75,551,8,75,10,75,12,75,554,9,75,1,
  	76,1,76,1,77,1,77,1,77,3,77,561,8,77,1,78,1,78,1,78,1,78,1,78,1,78,5,
  	78,569,8,78,10,78,12,78,572,9,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,
  	79,5,79,582,8,79,10,79,12,79,585,9,79,1,79,1,79,1,80,1,80,1,80,1,80,5,
  	80,593,8,80,10,80,12,80,596,9,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,5,
  	81,605,8,81,10,81,12,81,608,9,81,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,
  	82,1,82,1,82,5,82,620,8,82,10,82,12,82,623,9,82,1,82,1,82,1,83,3,83,628,
  	8,83,1,83,1,83,1,84,1,84,1,84,1,84,1,606,0,85,1,1,3,2,5,3,7,4,9,5,11,
  	6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
  	37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
  	30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
  	83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,
  	53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,
  	63,127,0,129,0,131,64,133,0,135,0,137,65,139,0,141,0,143,66,145,0,147,
  	0,149,0,151,67,153,0,155,0,157,68,159,69,161,70,163,71,165,72,167,73,
  	169,74,1,0,10,2,0,1064,1064,1096,1096,3,0,1040,1044,1072,1076,1168,1169,
  	2,0,1044,1044,1076,1076,9,0,65,90,95,95,97,122,1028,1028,1030,1031,1040,
  	1103,1108,1108,1110,1111,1168,1169,2,0,48,57,700,700,1,0,34,34,3,0,10,
  	10,13,13,34,34,3,0,10,10,13,13,39,39,2,0,10,10,13,13,2,0,9,9,32,32,651,
  	0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
  	0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
  	0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
  	1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
  	0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
  	0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
  	1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
  	0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
  	0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
  	1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,
  	1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,
  	1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,131,
  	1,0,0,0,0,137,1,0,0,0,0,143,1,0,0,0,0,151,1,0,0,0,0,157,1,0,0,0,0,159,
  	1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,
  	1,0,0,0,1,171,1,0,0,0,3,178,1,0,0,0,5,182,1,0,0,0,7,192,1,0,0,0,9,202,
  	1,0,0,0,11,207,1,0,0,0,13,212,1,0,0,0,15,219,1,0,0,0,17,225,1,0,0,0,19,
  	230,1,0,0,0,21,233,1,0,0,0,23,236,1,0,0,0,25,238,1,0,0,0,27,243,1,0,0,
  	0,29,251,1,0,0,0,31,259,1,0,0,0,33,267,1,0,0,0,35,269,1,0,0,0,37,273,
  	1,0,0,0,39,284,1,0,0,0,41,292,1,0,0,0,43,299,1,0,0,0,45,306,1,0,0,0,47,
  	311,1,0,0,0,49,318,1,0,0,0,51,324,1,0,0,0,53,331,1,0,0,0,55,337,1,0,0,
  	0,57,345,1,0,0,0,59,351,1,0,0,0,61,354,1,0,0,0,63,361,1,0,0,0,65,364,
  	1,0,0,0,67,372,1,0,0,0,69,383,1,0,0,0,71,392,1,0,0,0,73,402,1,0,0,0,75,
  	410,1,0,0,0,77,422,1,0,0,0,79,424,1,0,0,0,81,426,1,0,0,0,83,428,1,0,0,
  	0,85,430,1,0,0,0,87,432,1,0,0,0,89,434,1,0,0,0,91,436,1,0,0,0,93,438,
  	1,0,0,0,95,440,1,0,0,0,97,442,1,0,0,0,99,444,1,0,0,0,101,446,1,0,0,0,
  	103,448,1,0,0,0,105,450,1,0,0,0,107,452,1,0,0,0,109,454,1,0,0,0,111,456,
  	1,0,0,0,113,458,1,0,0,0,115,460,1,0,0,0,117,462,1,0,0,0,119,464,1,0,0,
  	0,121,466,1,0,0,0,123,472,1,0,0,0,125,474,1,0,0,0,127,481,1,0,0,0,129,
  	484,1,0,0,0,131,488,1,0,0,0,133,503,1,0,0,0,135,506,1,0,0,0,137,510,1,
  	0,0,0,139,521,1,0,0,0,141,524,1,0,0,0,143,530,1,0,0,0,145,539,1,0,0,0,
  	147,542,1,0,0,0,149,546,1,0,0,0,151,548,1,0,0,0,153,555,1,0,0,0,155,560,
  	1,0,0,0,157,562,1,0,0,0,159,577,1,0,0,0,161,588,1,0,0,0,163,599,1,0,0,
  	0,165,614,1,0,0,0,167,627,1,0,0,0,169,631,1,0,0,0,171,172,5,1082,0,0,
  	172,173,5,1110,0,0,173,174,5,1085,0,0,174,175,5,1077,0,0,175,176,5,1094,
  	0,0,176,177,5,1100,0,0,177,2,1,0,0,0,178,179,5,1076,0,0,179,180,5,1110,
  	0,0,180,181,5,1103,0,0,181,4,1,0,0,0,182,183,5,1089,0,0,183,184,5,1090,
  	0,0,184,185,5,1088,0,0,185,186,5,1091,0,0,186,187,5,1082,0,0,187,188,
  	5,1090,0,0,188,189,5,1091,0,0,189,190,5,1088,0,0,190,191,5,1072,0,0,191,
  	6,1,0,0,0,192,193,5,1087,0,0,193,194,5,1077,0,0,194,195,5,1088,0,0,195,
  	196,5,1077,0,0,196,197,5,1073,0,0,197,198,5,1088,0,0,198,199,5,1072,0,
  	0,199,200,5,1090,0,0,200,201,5,1080,0,0,201,8,1,0,0,0,202,203,5,1094,
  	0,0,203,204,5,1080,0,0,204,205,5,1082,0,0,205,206,5,1083,0,0,206,10,1,
  	0,0,0,207,208,5,1103,0,0,208,209,5,1082,0,0,209,210,5,1097,0,0,210,211,
  	5,1086,0,0,211,12,1,0,0,0,212,213,5,1095,0,0,213,214,5,1077,0,0,214,215,
  	5,1082,0,0,215,216,5,1072,0,0,216,217,5,1090,0,0,217,218,5,1080,0,0,218,
  	14,1,0,0,0,219,220,5,1074,0,0,220,221,5,1079,0,0,221,222,5,1103,0,0,222,
  	223,5,1090,0,0,223,224,5,1080,0,0,224,16,1,0,0,0,225,226,5,1076,0,0,226,
  	227,5,1072,0,0,227,228,5,1090,0,0,228,229,5,1080,0,0,229,18,1,0,0,0,230,
  	231,5,1103,0,0,231,232,5,1082,0,0,232,20,1,0,0,0,233,234,5,1090,0,0,234,
  	235,5,1072,0,0,235,22,1,0,0,0,236,237,5,1108,0,0,237,24,1,0,0,0,238,239,
  	5,1089,0,0,239,240,5,1087,0,0,240,241,5,1077,0,0,241,242,5,1094,0,0,242,
  	26,1,0,0,0,243,244,5,1074,0,0,244,245,5,1077,0,0,245,246,5,1088,0,0,246,
  	247,5,1085,0,0,247,248,5,1091,0,0,248,249,5,1090,0,0,249,250,5,1080,0,
  	0,250,28,1,0,0,0,251,252,5,1090,0,0,252,253,5,1088,0,0,253,254,5,1080,
  	0,0,254,255,5,1074,0,0,255,256,5,1072,0,0,256,257,5,1083,0,0,257,258,
  	5,1072,0,0,258,30,1,0,0,0,259,260,5,1089,0,0,260,261,5,1091,0,0,261,262,
  	5,1073,0,0,262,263,5,700,0,0,263,264,5,1108,0,0,264,265,5,1082,0,0,265,
  	266,5,1090,0,0,266,32,1,0,0,0,267,268,5,1110,0,0,268,34,1,0,0,0,269,270,
  	5,1072,0,0,270,271,5,1073,0,0,271,272,5,1086,0,0,272,36,1,0,0,0,273,274,
  	5,1089,0,0,274,275,5,1087,0,0,275,276,5,1088,0,0,276,277,5,1086,0,0,277,
  	278,5,1073,0,0,278,279,5,1091,0,0,279,280,5,1074,0,0,280,281,5,1072,0,
  	0,281,282,5,1090,0,0,282,283,5,1080,0,0,283,38,1,0,0,0,284,285,5,1079,
  	0,0,285,286,5,1083,0,0,286,287,5,1086,0,0,287,288,5,1074,0,0,288,289,
  	5,1080,0,0,289,290,5,1090,0,0,290,291,5,1080,0,0,291,40,1,0,0,0,292,293,
  	5,1110,0,0,293,294,5,1085,0,0,294,295,5,1072,0,0,295,296,5,1082,0,0,296,
  	297,5,1096,0,0,297,298,5,1077,0,0,298,42,1,0,0,0,299,300,5,1074,0,0,300,
  	301,5,1087,0,0,301,302,5,1072,0,0,302,303,5,1089,0,0,303,304,5,1090,0,
  	0,304,305,5,1080,0,0,305,44,1,0,0,0,306,307,5,1087,0,0,307,308,5,1086,
  	0,0,308,309,5,1082,0,0,309,310,5,1080,0,0,310,46,1,0,0,0,311,312,5,1084,
  	0,0,312,313,5,1086,0,0,313,314,5,1076,0,0,314,315,5,1091,0,0,315,316,
  	5,1083,0,0,316,317,5,1100,0,0,317,48,1,0,0,0,318,319,5,1088,0,0,319,320,
  	5,1110,0,0,320,321,5,1074,0,0,321,322,5,1085,0,0,322,323,5,1086,0,0,323,
  	50,1,0,0,0,324,325,5,1073,0,0,325,326,5,1110,0,0,326,327,5,1083,0,0,327,
  	328,5,1100,0,0,328,329,5,1096,0,0,329,330,5,1077,0,0,330,52,1,0,0,0,331,
  	332,5,1084,0,0,332,333,5,1077,0,0,333,334,5,1085,0,0,334,335,5,1096,0,
  	0,335,336,5,1077,0,0,336,54,1,0,0,0,337,338,5,1084,0,0,338,339,5,1110,
  	0,0,339,340,5,1089,0,0,340,341,5,1090,0,0,341,342,5,1080,0,0,342,343,
  	5,1090,0,0,343,344,5,1100,0,0,344,56,1,0,0,0,345,346,5,1084,0,0,346,347,
  	5,1072,0,0,347,348,5,1082,0,0,348,349,5,1077,0,0,349,350,5,1090,0,0,350,
  	58,1,0,0,0,351,352,5,1085,0,0,352,353,5,1077,0,0,353,60,1,0,0,0,354,355,
  	5,1087,0,0,355,356,5,1088,0,0,356,357,5,1077,0,0,357,358,5,1076,0,0,358,
  	359,5,1086,0,0,359,360,5,1082,0,0,360,62,1,0,0,0,361,362,5,1094,0,0,362,
  	363,5,1077,0,0,363,64,1,0,0,0,364,365,5,1087,0,0,365,366,5,1077,0,0,366,
  	367,5,1088,0,0,367,368,5,1077,0,0,368,369,5,1083,0,0,369,370,5,1110,0,
  	0,370,371,5,1082,0,0,371,66,1,0,0,0,372,373,5,1082,0,0,373,374,5,1086,
  	0,0,374,375,5,1084,0,0,375,376,5,1087,0,0,376,377,5,1086,0,0,377,378,
  	5,1079,0,0,378,379,5,1080,0,0,379,380,5,1094,0,0,380,381,5,1110,0,0,381,
  	382,5,1103,0,0,382,68,1,0,0,0,383,384,5,1079,0,0,384,385,5,1086,0,0,385,
  	386,5,1074,0,0,386,387,5,1085,0,0,387,388,5,1110,0,0,388,389,5,1096,0,
  	0,389,390,5,1085,0,0,390,391,5,1103,0,0,391,70,1,0,0,0,392,393,5,1074,
  	0,0,393,394,5,1085,0,0,394,395,5,1091,0,0,395,396,5,1090,0,0,396,397,
  	5,1088,0,0,397,398,5,1110,0,0,398,399,5,1096,0,0,399,400,5,1085,0,0,400,
  	401,5,1103,0,0,401,72,1,0,0,0,402,403,5,1084,0,0,403,404,5,1110,0,0,404,
  	405,5,1089,0,0,405,406,5,1094,0,0,406,407,5,1077,0,0,407,408,5,1074,0,
  	0,408,409,5,1072,0,0,409,74,1,0,0,0,410,411,5,1074,0,0,411,412,5,1083,
  	0,0,412,413,5,1072,0,0,413,414,5,1089,0,0,414,415,5,1090,0,0,415,416,
  	5,1080,0,0,416,417,5,1074,0,0,417,418,5,1110,0,0,418,419,5,1089,0,0,419,
  	420,5,1090,0,0,420,421,5,1100,0,0,421,76,1,0,0,0,422,423,5,61,0,0,423,
  	78,1,0,0,0,424,425,5,62,0,0,425,80,1,0,0,0,426,427,5,60,0,0,427,82,1,
  	0,0,0,428,429,5,46,0,0,429,84,1,0,0,0,430,431,5,43,0,0,431,86,1,0,0,0,
  	432,433,5,45,0,0,433,88,1,0,0,0,434,435,5,42,0,0,435,90,1,0,0,0,436,437,
  	5,47,0,0,437,92,1,0,0,0,438,439,5,37,0,0,439,94,1,0,0,0,440,441,5,94,
  	0,0,441,96,1,0,0,0,442,443,5,38,0,0,443,98,1,0,0,0,444,445,5,124,0,0,
  	445,100,1,0,0,0,446,447,5,40,0,0,447,102,1,0,0,0,448,449,5,41,0,0,449,
  	104,1,0,0,0,450,451,5,91,0,0,451,106,1,0,0,0,452,453,5,93,0,0,453,108,
  	1,0,0,0,454,455,5,63,0,0,455,110,1,0,0,0,456,457,5,58,0,0,457,112,1,0,
  	0,0,458,459,5,126,0,0,459,114,1,0,0,0,460,461,5,39,0,0,461,116,1,0,0,
  	0,462,463,5,34,0,0,463,118,1,0,0,0,464,465,5,33,0,0,465,120,1,0,0,0,466,
  	467,5,44,0,0,467,122,1,0,0,0,468,473,3,125,62,0,469,473,3,131,65,0,470,
  	473,3,137,68,0,471,473,3,143,71,0,472,468,1,0,0,0,472,469,1,0,0,0,472,
  	470,1,0,0,0,472,471,1,0,0,0,473,124,1,0,0,0,474,478,3,127,63,0,475,477,
  	3,129,64,0,476,475,1,0,0,0,477,480,1,0,0,0,478,476,1,0,0,0,478,479,1,
  	0,0,0,479,126,1,0,0,0,480,478,1,0,0,0,481,482,3,149,74,0,482,128,1,0,
  	0,0,483,485,5,95,0,0,484,483,1,0,0,0,484,485,1,0,0,0,485,486,1,0,0,0,
  	486,487,3,149,74,0,487,130,1,0,0,0,488,492,3,133,66,0,489,491,3,135,67,
  	0,490,489,1,0,0,0,491,494,1,0,0,0,492,490,1,0,0,0,492,493,1,0,0,0,493,
  	495,1,0,0,0,494,492,1,0,0,0,495,496,5,46,0,0,496,500,3,133,66,0,497,499,
  	3,135,67,0,498,497,1,0,0,0,499,502,1,0,0,0,500,498,1,0,0,0,500,501,1,
  	0,0,0,501,132,1,0,0,0,502,500,1,0,0,0,503,504,3,149,74,0,504,134,1,0,
  	0,0,505,507,5,95,0,0,506,505,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,
  	508,509,3,149,74,0,509,136,1,0,0,0,510,511,5,48,0,0,511,512,7,0,0,0,512,
  	516,3,139,69,0,513,515,3,141,70,0,514,513,1,0,0,0,515,518,1,0,0,0,516,
  	514,1,0,0,0,516,517,1,0,0,0,517,138,1,0,0,0,518,516,1,0,0,0,519,522,7,
  	1,0,0,520,522,3,149,74,0,521,519,1,0,0,0,521,520,1,0,0,0,522,140,1,0,
  	0,0,523,525,5,95,0,0,524,523,1,0,0,0,524,525,1,0,0,0,525,528,1,0,0,0,
  	526,529,7,1,0,0,527,529,3,149,74,0,528,526,1,0,0,0,528,527,1,0,0,0,529,
  	142,1,0,0,0,530,531,5,48,0,0,531,532,7,2,0,0,532,536,3,145,72,0,533,535,
  	3,147,73,0,534,533,1,0,0,0,535,538,1,0,0,0,536,534,1,0,0,0,536,537,1,
  	0,0,0,537,144,1,0,0,0,538,536,1,0,0,0,539,540,2,48,49,0,540,146,1,0,0,
  	0,541,543,5,95,0,0,542,541,1,0,0,0,542,543,1,0,0,0,543,544,1,0,0,0,544,
  	545,2,48,49,0,545,148,1,0,0,0,546,547,2,48,57,0,547,150,1,0,0,0,548,552,
  	3,153,76,0,549,551,3,155,77,0,550,549,1,0,0,0,551,554,1,0,0,0,552,550,
  	1,0,0,0,552,553,1,0,0,0,553,152,1,0,0,0,554,552,1,0,0,0,555,556,7,3,0,
  	0,556,154,1,0,0,0,557,561,3,153,76,0,558,561,7,4,0,0,559,561,3,153,76,
  	0,560,557,1,0,0,0,560,558,1,0,0,0,560,559,1,0,0,0,561,156,1,0,0,0,562,
  	563,5,34,0,0,563,564,5,34,0,0,564,570,5,34,0,0,565,569,8,5,0,0,566,567,
  	5,92,0,0,567,569,5,34,0,0,568,565,1,0,0,0,568,566,1,0,0,0,569,572,1,0,
  	0,0,570,568,1,0,0,0,570,571,1,0,0,0,571,573,1,0,0,0,572,570,1,0,0,0,573,
  	574,5,34,0,0,574,575,5,34,0,0,575,576,5,34,0,0,576,158,1,0,0,0,577,583,
  	5,34,0,0,578,582,8,6,0,0,579,580,5,92,0,0,580,582,5,34,0,0,581,578,1,
  	0,0,0,581,579,1,0,0,0,582,585,1,0,0,0,583,581,1,0,0,0,583,584,1,0,0,0,
  	584,586,1,0,0,0,585,583,1,0,0,0,586,587,5,34,0,0,587,160,1,0,0,0,588,
  	594,5,39,0,0,589,593,8,7,0,0,590,591,5,92,0,0,591,593,5,39,0,0,592,589,
  	1,0,0,0,592,590,1,0,0,0,593,596,1,0,0,0,594,592,1,0,0,0,594,595,1,0,0,
  	0,595,597,1,0,0,0,596,594,1,0,0,0,597,598,5,39,0,0,598,162,1,0,0,0,599,
  	600,5,59,0,0,600,601,5,42,0,0,601,606,1,0,0,0,602,605,3,163,81,0,603,
  	605,9,0,0,0,604,602,1,0,0,0,604,603,1,0,0,0,605,608,1,0,0,0,606,607,1,
  	0,0,0,606,604,1,0,0,0,607,609,1,0,0,0,608,606,1,0,0,0,609,610,5,42,0,
  	0,610,611,5,59,0,0,611,612,1,0,0,0,612,613,6,81,0,0,613,164,1,0,0,0,614,
  	615,5,59,0,0,615,616,5,59,0,0,616,621,1,0,0,0,617,620,3,165,82,0,618,
  	620,8,8,0,0,619,617,1,0,0,0,619,618,1,0,0,0,620,623,1,0,0,0,621,619,1,
  	0,0,0,621,622,1,0,0,0,622,624,1,0,0,0,623,621,1,0,0,0,624,625,6,82,0,
  	0,625,166,1,0,0,0,626,628,5,13,0,0,627,626,1,0,0,0,627,628,1,0,0,0,628,
  	629,1,0,0,0,629,630,5,10,0,0,630,168,1,0,0,0,631,632,7,9,0,0,632,633,
  	1,0,0,0,633,634,6,84,0,0,634,170,1,0,0,0,26,0,472,478,484,492,500,506,
  	516,521,524,528,536,542,552,560,568,570,581,583,592,594,604,606,619,621,
  	627,1,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  mavkalexerLexerStaticData = staticData.release();
}

}

MavkaLexer::MavkaLexer(CharStream *input) : Lexer(input) {
  MavkaLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *mavkalexerLexerStaticData->atn, mavkalexerLexerStaticData->decisionToDFA, mavkalexerLexerStaticData->sharedContextCache);
}

MavkaLexer::~MavkaLexer() {
  delete _interpreter;
}

std::string MavkaLexer::getGrammarFileName() const {
  return "MavkaLexer.g4";
}

const std::vector<std::string>& MavkaLexer::getRuleNames() const {
  return mavkalexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& MavkaLexer::getChannelNames() const {
  return mavkalexerLexerStaticData->channelNames;
}

const std::vector<std::string>& MavkaLexer::getModeNames() const {
  return mavkalexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& MavkaLexer::getVocabulary() const {
  return mavkalexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView MavkaLexer::getSerializedATN() const {
  return mavkalexerLexerStaticData->serializedATN;
}

const atn::ATN& MavkaLexer::getATN() const {
  return *mavkalexerLexerStaticData->atn;
}




void MavkaLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  mavkalexerLexerInitialize();
#else
  ::antlr4::internal::call_once(mavkalexerLexerOnceFlag, mavkalexerLexerInitialize);
#endif
}
