#include "../parser.h"

namespace mavka::parser {
  std::any MavkaASTVisitor::visitComparison(
      MavkaParser::ComparisonContext* context) {
    const auto операція_асд_дані = new ОпераціяАСДДані();
    операція_асд_дані->ліво = AAV(visitContext(context->c_left));
    операція_асд_дані->право = AAV(visitContext(context->c_right));
    const auto op = context->c_operation->getText();
    if (op == "рівно" || op == "==") {
      операція_асд_дані->операція = ОпераціяПорівнятиЧиРівно;
    } else if (op == "не рівно" || op == "нерівно" || op == "!=") {
      операція_асд_дані->операція = ОпераціяПорівнятиЧиНеРівно;
    } else if (op == "більше" || op == ">") {
      операція_асд_дані->операція = ОпераціяПорівнятиЧиБільше;
    } else if (op == "менше" || op == "<") {
      операція_асд_дані->операція = ОпераціяПорівнятиЧиМенше;
    } else if (op == "не більше" || op == "небільше" || op == "<=") {
      операція_асд_дані->операція = ОпераціяПорівнятиЧиНеБільше;
    } else if (op == "не менше" || op == "неменше" || op == ">=") {
      операція_асд_дані->операція = ОпераціяПорівнятиЧиНеМенше;
    } else if (op == "є") {
      операція_асд_дані->операція = ОпераціяПорівнятиЧиЄ;
    } else if (op == "не є" || op == "неє") {
      операція_асд_дані->операція = ОпераціяПорівнятиЧиНеЄ;
    } else if (op == "містить") {
      операція_асд_дані->операція = ОпераціяПорівнятиЧиМістить;
    } else if (op == "не містить" || op == "немістить") {
      операція_асд_дані->операція = ОпераціяПорівнятиЧиНеМістить;
    } else {
      throw std::runtime_error("Unknown operation: " + op);
    }
    return AV(this, context, АСДВидОперація, операція_асд_дані);
  }
} // namespace mavka::parser