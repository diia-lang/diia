#include "../parser.h"

namespace mavka::parser {
  std::any MavkaASTVisitor::visitSet(MavkaParser::SetContext* context) {
    const auto op = context->assign_op()->getText();
    const auto змінити_властивість_асд_дані = new ЗмінитиВластивістьАСДДані();
    змінити_властивість_асд_дані->субʼєкт = AAV(visitContext(context->s_left));
    змінити_властивість_асд_дані->ідентифікатор =
        AAV(visitIdentifier(context->s_id));
    if (op == "=" || op == "це") {
      змінити_властивість_асд_дані->значення =
          AAV(visitContext(context->s_value));
    } else if (op == "+=" || op == "-=" || op == "*=" || op == "/=" ||
               op == "%=" || op == "//=" || op == "**=" || op == "^=" ||
               op == "|=" || op == "&=" || op == "<<=" || op == ">>=" ||
               op == ">>>=") {
      const auto отримати_властивість_асд_дані =
          new ОтриматиВластивістьАСДДані();
      отримати_властивість_асд_дані->субʼєкт =
          AAV(visitContext(context->s_left));
      отримати_властивість_асд_дані->ідентифікатор =
          AAV(visitIdentifier(context->s_id));
      const auto операція_асд_дані = new ОпераціяАСДДані();
      операція_асд_дані->ліво = AV(this, context, АСДВидОтриматиВластивість,
                                   отримати_властивість_асд_дані);
      операція_асд_дані->право = AAV(visitContext(context->s_value));
      if (op == "+=") {
        операція_асд_дані->операція = ОпераціяДодати;
      } else if (op == "-=") {
        операція_асд_дані->операція = ОпераціяВідняти;
      } else if (op == "*=") {
        операція_асд_дані->операція = ОпераціяПомножити;
      } else if (op == "/=") {
        операція_асд_дані->операція = ОпераціяПоділити;
      } else if (op == "%=") {
        операція_асд_дані->операція = ОпераціяПоділитиЗаМодулем;
      } else if (op == "//=") {
        операція_асд_дані->операція = ОпераціяПоділитиНаціло;
      } else if (op == "**=") {
        операція_асд_дані->операція = ОпераціяПіднестиДоСтепеня;
      } else if (op == "^=") {
        операція_асд_дані->операція = ОпераціяДвійковеВиключнеАбо;
      } else if (op == "|=") {
        операція_асд_дані->операція = ОпераціяДвійковеАбо;
      } else if (op == "&=") {
        операція_асд_дані->операція = ОпераціяДвійковеІ;
      } else if (op == "<<=") {
        операція_асд_дані->операція = ОпераціяДвійковийЗсувВліво;
      } else if (op == ">>=") {
        операція_асд_дані->операція = ОпераціяДвійковийЗсувВправо;
      } else if (op == ">>>=") {
        операція_асд_дані->операція = ОпераціяДвійковийЗсувВправоЗЗаповненням;
      } else {
        throw std::runtime_error("Unknown operation: " + op);
      }
      змінити_властивість_асд_дані->значення =
          AV(this, context, АСДВидОперація, операція_асд_дані);
    }
    return AV(this, context, АСДВидЗмінитиВластивість,
              змінити_властивість_асд_дані);
  }

  std::any MavkaASTVisitor::visitSet_by_access(
      MavkaParser::Set_by_accessContext* context) {
    const auto op = context->assign_op()->getText();
    const auto покласти_елемент_асд_дані = new ПокластиЕлементАСДДані();
    покласти_елемент_асд_дані->субʼєкт = AAV(visitContext(context->s_left));
    покласти_елемент_асд_дані->ключ = AAV(visitContext(context->s_id));
    if (op == "=" || op == "це") {
      покласти_елемент_асд_дані->значення = AAV(visitContext(context->s_value));
    } else if (op == "+=" || op == "-=" || op == "*=" || op == "/=" ||
               op == "%=" || op == "//=" || op == "**=" || op == "^=" ||
               op == "|=" || op == "&=" || op == "<<=" || op == ">>=" ||
               op == ">>>=") {
      const auto отримати_елемент_асд_дані = new ОтриматиЕлементАСДДані();
      отримати_елемент_асд_дані->субʼєкт = AAV(visitContext(context->s_left));
      отримати_елемент_асд_дані->ключ = AAV(visitContext(context->s_id));
      const auto операція_асд_дані = new ОпераціяАСДДані();
      операція_асд_дані->ліво =
          AV(this, context, АСДВидОтриматиЕлемент, отримати_елемент_асд_дані);
      операція_асд_дані->право = AAV(visitContext(context->s_value));
      if (op == "+=") {
        операція_асд_дані->операція = ОпераціяДодати;
      } else if (op == "-=") {
        операція_асд_дані->операція = ОпераціяВідняти;
      } else if (op == "*=") {
        операція_асд_дані->операція = ОпераціяПомножити;
      } else if (op == "/=") {
        операція_асд_дані->операція = ОпераціяПоділити;
      } else if (op == "%=") {
        операція_асд_дані->операція = ОпераціяПоділитиЗаМодулем;
      } else if (op == "//=") {
        операція_асд_дані->операція = ОпераціяПоділитиНаціло;
      } else if (op == "**=") {
        операція_асд_дані->операція = ОпераціяПіднестиДоСтепеня;
      } else if (op == "^=") {
        операція_асд_дані->операція = ОпераціяДвійковеВиключнеАбо;
      } else if (op == "|=") {
        операція_асд_дані->операція = ОпераціяДвійковеАбо;
      } else if (op == "&=") {
        операція_асд_дані->операція = ОпераціяДвійковеІ;
      } else if (op == "<<=") {
        операція_асд_дані->операція = ОпераціяДвійковийЗсувВліво;
      } else if (op == ">>=") {
        операція_асд_дані->операція = ОпераціяДвійковийЗсувВправо;
      } else if (op == ">>>=") {
        операція_асд_дані->операція = ОпераціяДвійковийЗсувВправоЗЗаповненням;
      } else {
        throw std::runtime_error("Unknown operation: " + op);
      }
      покласти_елемент_асд_дані->значення =
          AV(this, context, АСДВидОперація, операція_асд_дані);
    }
    return AV(this, context, АСДВидПокластиЕлемент, покласти_елемент_асд_дані);
  }
} // namespace mavka::parser