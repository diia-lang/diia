взяти визначення ./компілятор;

зовнішня дія mavka_get_path_directory(path: адреса<unsigned_char>, output: адреса<адреса<unsigned_char>>): size_t;

секція мавка {
  дія отримати_батьківську_директорію(шлях: памʼять<п8>, вихід: адреса<памʼять<п8>>): позитивне {
    вернути mavka_get_path_directory(шлях як адреса<unsigned_char>, вихід як адреса<адреса<unsigned_char>>);
  }

  місцева дія виділити_помилку_компіляції(В: адреса<Виконувач>, місцезнаходження: адреса<Місцезнаходження>, повідомлення: памʼять<п8>): адреса<ПомилкаКомпіляції> {
    ціль помилка_компіляції = виділити<ПомилкаКомпіляції>(В);
    помилка_компіляції.місцезнаходження = місцезнаходження;
    помилка_компіляції.повідомлення = пусто;
    МаМа::виділити_копію_Ю8(В.М, повідомлення, МаМа::порахувати_розмір_Ю8(повідомлення), помилка_компіляції.повідомлення::адреса);
    якщо помилка_компіляції.повідомлення == пусто {
      МаМа::ПОМЕРТИ(В.М, ю8"Не вдалося виділити копію Ю8");
    }
    вернути помилка_компіляції;
  }

  місцева дія виділити_контекст_компіляції(В: адреса<Виконувач>): адреса<КонтекстКомпіляції> {
    ціль контекст_компіляції = виділити<КонтекстКомпіляції>(В);
    контекст_компіляції.код_дії = пусто;
    вернути контекст_компіляції;
  }

  місцева дія скомпілювати_елемент_значення(В: адреса<Виконувач>, контекст: адреса<КонтекстКомпіляції>, код: адреса<МаМа::Код>, елемент: адреса<АСДЗначення>): адреса<ПомилкаКомпіляції> {
    ціль М = В.М;
    якщо елемент.вид == АСДВидЗвернутись {
      ціль дані = елемент.дані як адреса<АСДДаніЗвернутись>;
      якщо МаМа::порівняти_Ю8(дані.ідентифікатор.значення, ю8"я") == 0 {
        МаМа::покласти_вказівку_ПокластиЯ(М, код, елемент.місцезнаходження.рядок);
      } інакше якщо МаМа::порівняти_Ю8(дані.ідентифікатор.значення, ю8"так") == 0 {
        МаМа::покласти_вказівку_ПокластиТак(М, код, елемент.місцезнаходження.рядок);
      } інакше якщо МаМа::порівняти_Ю8(дані.ідентифікатор.значення, ю8"ні") == 0 {
        МаМа::покласти_вказівку_ПокластиНі(М, код, елемент.місцезнаходження.рядок);
      } інакше якщо МаМа::порівняти_Ю8(дані.ідентифікатор.значення, ю8"пусто") == 0 {
        МаМа::покласти_вказівку_ПокластиПусто(М, код, елемент.місцезнаходження.рядок);
      } інакше якщо МаМа::порівняти_Ю8(дані.ідентифікатор.значення, ю8"__ФАЙЛ_ЮНІКОД__") == 0 {
        ціль обʼєкт_юнікоду = МаМа::виділити_обʼєкт_юнікоду_з_ю8(М, код.шлях_до_файлу);
        ціль позиція_константи = МаМа::покласти_константу(М, обʼєкт_юнікоду як адреса<МаМа::Обʼєкт>);
        МаМа::покласти_вказівку_ПокластиКонстанту(М, код, елемент.місцезнаходження.рядок, позиція_константи);
      } інакше якщо МаМа::порівняти_Ю8(дані.ідентифікатор.значення, ю8"__ПАПКА_ЮНІКОД__") == 0 {
        ціль шлях_до_папки: памʼять<п8> = пусто;
        якщо отримати_батьківську_директорію(код.шлях_до_файлу, шлях_до_папки::адреса) == 0 {
          МаМа::ПОМЕРТИ(М, ю8"Не вдалося отримати батьківську директорію");
        }
        ціль обʼєкт_юнікоду = МаМа::виділити_обʼєкт_юнікоду_з_ю8(М, шлях_до_папки);
        звільнити(В, шлях_до_папки як адреса);
        ціль позиція_константи = МаМа::покласти_константу(М, обʼєкт_юнікоду як адреса<МаМа::Обʼєкт>);
        МаМа::покласти_вказівку_ПокластиКонстанту(М, код, елемент.місцезнаходження.рядок, позиція_константи);
      } інакше якщо МаМа::порівняти_Ю8(дані.ідентифікатор.значення, ю8"__РЯДОК__") == 0 {
        ціль обʼєкт_числа = МаМа::виділити_обʼєкт_числа(М, д64(елемент.місцезнаходження.рядок));
        ціль позиція_константи = МаМа::покласти_константу(М, обʼєкт_числа як адреса<МаМа::Обʼєкт>);
        МаМа::покласти_вказівку_ПокластиКонстанту(М, код, елемент.місцезнаходження.рядок, позиція_константи);
      } інакше якщо МаМа::порівняти_Ю8(дані.ідентифікатор.значення, ю8"__СТОВПЕЦЬ__") == 0 {
        ціль обʼєкт_числа = МаМа::виділити_обʼєкт_числа(М, д64(елемент.місцезнаходження.стовпець));
        ціль позиція_константи = МаМа::покласти_константу(М, обʼєкт_числа як адреса<МаМа::Обʼєкт>);
        МаМа::покласти_вказівку_ПокластиКонстанту(М, код, елемент.місцезнаходження.рядок, позиція_константи);
      } інакше {
        ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, дані.ідентифікатор.значення);
        МаМа::покласти_вказівку_Звернутись(М, код, елемент.місцезнаходження.рядок, позиція_назви);
      }
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидОтримати {
      ціль дані = елемент.дані як адреса<АСДДаніОтримати>;
      ціль помилка_компіляції_обʼєкта = скомпілювати_елемент_значення(В, контекст, код, дані.обʼєкт);
      якщо помилка_компіляції_обʼєкта != пусто {
        вернути помилка_компіляції_обʼєкта;
      }
      ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, дані.ідентифікатор.значення);
      МаМа::покласти_вказівку_ОтриматиВластивість(М, код, елемент.місцезнаходження.рядок, позиція_назви);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидОтриматиЗаПозицією {
      ціль дані = елемент.дані як адреса<АСДДаніОтриматиЗаПозицією>;
      ціль результат_компіляції_обʼєкта = скомпілювати_елемент_значення(В, контекст, код, дані.обʼєкт);
      якщо результат_компіляції_обʼєкта != пусто {
        вернути результат_компіляції_обʼєкта;
      }
      ціль результат_компіляції_ключа = скомпілювати_елемент_значення(В, контекст, код, дані.позиція);
      якщо результат_компіляції_ключа != пусто {
        вернути результат_компіляції_ключа;
      }
      МаМа::покласти_вказівку_ОтриматиЕлемент(М, код, елемент.місцезнаходження.рядок);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидВиконати {
      ціль дані = елемент.дані як адреса<АСДДаніВиконати>;
      змінна ціль назва_прохання: адреса<МаМа::Назва> = пусто;
      змінна ціль позиція_назви_прохання: позитивне = 0;
      якщо дані.обʼєкт.вид == АСДВидОтримати {
        ціль дані_отримання = дані.обʼєкт.дані як адреса<АСДДаніОтримати>;
        ціль помилка_компіляції_обʼєкта = скомпілювати_елемент_значення(В, контекст, код, дані_отримання.обʼєкт);
        якщо помилка_компіляції_обʼєкта != пусто {
          вернути помилка_компіляції_обʼєкта;
        }
        назва_прохання = МаМа::назва_з_Ю8(М, дані_отримання.ідентифікатор.значення);
        позиція_назви_прохання = МаМа::позиція_назви_з_ю8(М, дані_отримання.ідентифікатор.значення);
      } інакше {
        ціль помилка_компіляції_обʼєкта = скомпілювати_елемент_значення(В, контекст, код, дані.обʼєкт);
        якщо помилка_компіляції_обʼєкта != пусто {
          вернути помилка_компіляції_обʼєкта;
        }
      }
      змінна ціль па: позитивне = 0;
      змінна ціль кількість_аргументів_без_назви: позитивне = 0;
      змінна ціль вже_був_аргумент_з_назвою = ні;
      поки па < дані.кількість_аргументів {
        ціль аргумент = дані.аргументи[па];
        якщо аргумент.ідентифікатор == пусто {
          якщо вже_був_аргумент_з_назвою {
            вернути виділити_помилку_компіляції(В, елемент.місцезнаходження, ю8"Позиційні аргументи не можна ставити після іменованих");
          }
          кількість_аргументів_без_назви = кількість_аргументів_без_назви + 1;
        } інакше {
          вже_був_аргумент_з_назвою = так;
        }
        па = па + 1;
      }
      змінна ціль має_аргументи_з_назвами = вже_був_аргумент_з_назвою;
      якщо має_аргументи_з_назвами {
        МаМа::покласти_вказівку_ПокластиРеєстрАргументівЗНазвами(М, код, елемент.місцезнаходження.рядок);
      }
      па = 0;
      поки па < дані.кількість_аргументів {
        ціль аргумент = дані.аргументи[па];
        ціль помилка_компіляції_аргумента = скомпілювати_елемент_значення(В, контекст, код, аргумент.значення);
        якщо помилка_компіляції_аргумента != пусто {
          вернути помилка_компіляції_аргумента;
        }
        якщо аргумент.ідентифікатор != пусто {
          ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, аргумент.ідентифікатор.значення);
          МаМа::покласти_вказівку_ЗареєструватиАргументЗНазвою(М, код, елемент.місцезнаходження.рядок, позиція_назви);
        }
        па = па + 1;
      }
      якщо має_аргументи_з_назвами {
        якщо назва_прохання == пусто {
          МаМа::покласти_вказівку_ВиконатиЗНазвами(М, код, елемент.місцезнаходження.рядок, кількість_аргументів_без_назви);
        } інакше {
          МаМа::покласти_вказівку_ВиконатиВластивістьЗНазвами(М, код, елемент.місцезнаходження.рядок, позиція_назви_прохання, кількість_аргументів_без_назви);
        }
      } інакше {
        якщо назва_прохання == пусто {
         МаМа::покласти_вказівку_Виконати(М, код, елемент.місцезнаходження.рядок, кількість_аргументів_без_назви);
        } інакше {
          МаМа::покласти_вказівку_ВиконатиВластивість(М, код, елемент.місцезнаходження.рядок, позиція_назви_прохання, кількість_аргументів_без_назви);
        }
      }
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидДія {
      ціль дані = елемент.дані як адреса<АСДДаніДія>;
      МаМа::покласти_вказівку_ПокластиРеєстрПараметрів(М, код, елемент.місцезнаходження.рядок);
      змінна ціль па: позитивне = 0;
      поки па < дані.кількість_параметрів {
        ціль параметр = дані.параметри[па];
        ціль позиція_назви_параметра = МаМа::позиція_назви_з_ю8(М, параметр.ідентифікатор.значення);
        змінна ціль птп: позитивне = 0;
        поки птп < параметр.кількість_типів {
          ціль тип = параметр.типи[птп];
          ціль помилка_компіляції_типу = скомпілювати_елемент_значення(В, контекст, код, тип);
          якщо помилка_компіляції_типу != пусто {
            вернути помилка_компіляції_типу;
          }
          птп = птп + 1;
        }
        якщо параметр.значення != пусто {
          ціль код_значення_параметра = МаМа::виділити_код(М, код.шлях_до_файлу);
          ціль контекст_значення_параметра = виділити_контекст_компіляції(В);
          ціль помилка_компіляції_значення_параметра = скомпілювати_елемент_значення(В, контекст_значення_параметра, код_значення_параметра, параметр.значення);
          якщо помилка_компіляції_значення_параметра != пусто {
            вернути помилка_компіляції_значення_параметра;
          }
          МаМа::покласти_вказівку_Вернути(М, код_значення_параметра, елемент.місцезнаходження.рядок);
          ціль позиція_підкоду = М.сховище_кодів.розмір;
          МаМа::покласти_в_накопичувач<адреса<МаМа::Код>>(М, М.сховище_кодів::адреса, код_значення_параметра);
          МаМа::покласти_вказівку_ТриматиКод(М, код, елемент.місцезнаходження.рядок, позиція_підкоду);
        }
        МаМа::покласти_вказівку_ЗареєструватиПараметр(М, код, елемент.місцезнаходження.рядок, позиція_назви_параметра, параметр.кількість_типів);
        па = па + 1;
      }
      ціль код_дії = МаМа::виділити_код(М, код.шлях_до_файлу);
      ціль контекст_дії = виділити_контекст_компіляції(В);
      ціль помилка_компіляції_тіла_дії = скомпілювати_тіло(В, контекст_дії, код_дії, дані.тіло, так);
      якщо помилка_компіляції_тіла_дії != пусто {
        вернути помилка_компіляції_тіла_дії;
      }
      ціль позиція_підкоду = М.сховище_кодів.розмір;
      МаМа::покласти_в_накопичувач<адреса<МаМа::Код>>(М, М.сховище_кодів::адреса, код_дії);
      якщо дані.ідентифікатор != пусто {
        ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, дані.ідентифікатор.значення);
        МаМа::покласти_вказівку_ТриматиНазву(М, код, елемент.місцезнаходження.рядок, позиція_назви);
      }
      МаМа::покласти_вказівку_СтворитиДію(М, код, елемент.місцезнаходження.рядок, позиція_підкоду);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидСтруктура {
      ціль дані = елемент.дані як адреса<АСДДаніСтруктура>;
      якщо дані.предок == пусто {
        ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, ю8"обʼєкт");
        МаМа::покласти_вказівку_Звернутись(М, код, елемент.місцезнаходження.рядок, позиція_назви);
      } інакше {
        ціль помилка_компіляції_предка = скомпілювати_елемент_значення(В, контекст, код, дані.предок);
        якщо помилка_компіляції_предка != пусто {
          вернути помилка_компіляції_предка;
        }
      }
      МаМа::покласти_вказівку_ПокластиРеєстрПараметрів(М, код, елемент.місцезнаходження.рядок);
      змінна ціль па: позитивне = 0;
      поки па < дані.кількість_параметрів {
        ціль параметр = дані.параметри[па];
        ціль позиція_назви_параметра = МаМа::позиція_назви_з_ю8(М, параметр.ідентифікатор.значення);
        змінна ціль птп: позитивне = 0;
        поки птп < параметр.кількість_типів {
          ціль тип = параметр.типи[птп];
          ціль помилка_компіляції_типу = скомпілювати_елемент_значення(В, контекст, код, тип);
          якщо помилка_компіляції_типу != пусто {
            вернути помилка_компіляції_типу;
          }
          птп = птп + 1;
        }
        якщо параметр.значення != пусто {
          ціль код_значення_параметра = МаМа::виділити_код(М, код.шлях_до_файлу);
          ціль контекст_значення_параметра = виділити_контекст_компіляції(В);
          ціль помилка_компіляції_значення_параметра = скомпілювати_елемент_значення(В, контекст_значення_параметра, код_значення_параметра, параметр.значення);
          якщо помилка_компіляції_значення_параметра != пусто {
            вернути помилка_компіляції_значення_параметра;
          }
          МаМа::покласти_вказівку_Вернути(М, код_значення_параметра, елемент.місцезнаходження.рядок);
          ціль позиція_підкоду = М.сховище_кодів.розмір;
          МаМа::покласти_в_накопичувач<адреса<МаМа::Код>>(М, М.сховище_кодів::адреса, код_значення_параметра);
          МаМа::покласти_вказівку_ТриматиКод(М, код, елемент.місцезнаходження.рядок, позиція_підкоду);
        }
        МаМа::покласти_вказівку_ЗареєструватиПараметр(М, код, елемент.місцезнаходження.рядок, позиція_назви_параметра, параметр.кількість_типів);
        па = па + 1;
      }
      якщо дані.ідентифікатор != пусто {
        ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, дані.ідентифікатор.значення);
        МаМа::покласти_вказівку_ТриматиНазву(М, код, елемент.місцезнаходження.рядок, позиція_назви);
      }
      МаМа::покласти_вказівку_СтворитиСтруктуру(М, код, елемент.місцезнаходження.рядок);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидЧисло {
      ціль дані = елемент.дані як адреса<АСДДаніЧисло>;
      ціль результат_розбору_числа = МаМа::різне::числа::розібрати_десяткове_з_ю8сі<д64>(дані.значення);
      якщо результат_розбору_числа.помилка != пусто {
        МаМа::надрукувати_Ю8(М, результат_розбору_числа.помилка);
      }
      ціль обʼєкт_числа = МаМа::виділити_обʼєкт_числа(М, результат_розбору_числа.значення);
      ціль позиція_константи = МаМа::покласти_константу(М, обʼєкт_числа як адреса<МаМа::Обʼєкт>);
      МаМа::покласти_вказівку_ПокластиКонстанту(М, код, елемент.місцезнаходження.рядок, позиція_константи);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидТекст {
      ціль дані = елемент.дані як адреса<АСДДаніТекст>;
      якщо дані.інтерпольовано == позитивне(ні) {
        ціль результат_розбору_тексту = розібрати_текст_мавки(
          елемент.місцезнаходження.текст_коду,
          дані.ідентифікатор,
          дані.значення,
          елемент.місцезнаходження.рядок,
          елемент.місцезнаходження.стовпець
        );
        якщо результат_розбору_тексту.успіх == позитивне(ні) {
          МаМа::ПОМЕРТИ(М, ю8"Не вдалось розібрати текст");
        }
        вернути скомпілювати_елемент_значення(В, контекст, код, результат_розбору_тексту.значення);
      }
      змінна ціль позиція_константи: позитивне = 0;
      якщо дані.ідентифікатор == пусто {
        ціль довжина_Ю8 = МаМа::порахувати_розмір_Ю8(дані.значення);
        якщо довжина_Ю8 == 0 {
          ціль обʼєкт_тексту = МаМа::виділити_обʼєкт_тексту(М, ю8"");
          позиція_константи = МаМа::покласти_константу(М, обʼєкт_тексту як адреса<МаМа::Обʼєкт>);
        } інакше {
          ціль вихід_КД = виділити<п8>(В, довжина_Ю8 + 1);
          ціль розмір_перекодованого_виходу_КД = КД::перекодувати_з_Ю8(
            дані.значення,
            довжина_Ю8,
            вихід_КД
          );
          вихід_КД[розмір_перекодованого_виходу_КД] = 0;
          якщо розмір_перекодованого_виходу_КД == 0 {
            ціль помилка_компіляції = виділити_помилку_компіляції(В, елемент.місцезнаходження, ю8"Невідомий символ КД");
            вернути помилка_компіляції;
          }
          ціль обʼєкт_тексту = МаМа::виділити_обʼєкт_тексту(М, вихід_КД);
          звільнити(В, вихід_КД як адреса);
          позиція_константи = МаМа::покласти_константу(М, обʼєкт_тексту як адреса<МаМа::Обʼєкт>);
        }
      } інакше якщо МаМа::порівняти_Ю8(дані.ідентифікатор.значення, ю8"ю") == 0 {
        ціль ю32: памʼять<п32> = пусто;
        ціль розмір_Ю32 = МаМа::перекодувати_Ю8_в_Ю32(М, дані.значення, МаМа::порахувати_розмір_Ю8(дані.значення), ю32::адреса);
        якщо ю32 == пусто {
          МаМа::ПОМЕРТИ(М, ю8"Невідомий символ Ю32");
        }
        ціль обʼєкт_юнікоду = МаМа::виділити_обʼєкт_юнікоду(М, ю32);
        звільнити(В, ю32 як адреса);
        позиція_константи = МаМа::покласти_константу(М, обʼєкт_юнікоду як адреса<МаМа::Обʼєкт>);
      } інакше {
        ціль помилка_компіляції = виділити_помилку_компіляції(В, елемент.місцезнаходження, ю8"Невідомий тип тексту");
        вернути помилка_компіляції;
      }
      МаМа::покласти_вказівку_ПокластиКонстанту(М, код, елемент.місцезнаходження.рядок, позиція_константи);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидСимвол {
      ціль дані = елемент.дані як адреса<АСДДаніТекст>;
      змінна ціль позиція_константи: позитивне = 0;
      якщо дані.ідентифікатор == пусто {
        ціль довжина_Ю8 = МаМа::порахувати_розмір_Ю8(дані.значення);
        якщо довжина_Ю8 == 0 {
          ціль помилка_компіляції = виділити_помилку_компіляції(В, елемент.місцезнаходження, ю8"Пустий символ");
          вернути помилка_компіляції;
        } інакше {
          ціль вихід_КД = виділити<п8>(В, довжина_Ю8 + 1);
          ціль розмір_перекодованого_виходу_КД = КД::перекодувати_з_Ю8(
            дані.значення,
            довжина_Ю8,
            вихід_КД
          );
          якщо розмір_перекодованого_виходу_КД == 0 {
            ціль помилка_компіляції = виділити_помилку_компіляції(В, елемент.місцезнаходження, ю8"Невідомий символ КД");
            вернути помилка_компіляції;
          }
          вихід_КД[розмір_перекодованого_виходу_КД] = 0;
          якщо розмір_перекодованого_виходу_КД > 1 {
            ціль помилка_компіляції = виділити_помилку_компіляції(В, елемент.місцезнаходження, ю8"Більше одного символу");
            вернути помилка_компіляції;
          }
          ціль обʼєкт_числа = МаМа::виділити_обʼєкт_числа(М, д64(вихід_КД[0]));
          звільнити(В, вихід_КД як адреса);
          позиція_константи = МаМа::покласти_константу(М, обʼєкт_числа як адреса<МаМа::Обʼєкт>);
        }
      } інакше якщо МаМа::порівняти_Ю8(дані.ідентифікатор.значення, ю8"ю") == 0 {
        ціль ю32: памʼять<п32> = пусто;
        ціль розмір_Ю32 = МаМа::перекодувати_Ю8_в_Ю32(М, дані.значення, МаМа::порахувати_розмір_Ю8(дані.значення), ю32::адреса);
        якщо ю32 == пусто {
          МаМа::ПОМЕРТИ(М, ю8"Невідомий символ Ю32");
        }
        якщо ю32[0] == 0 {
          ціль помилка_компіляції = виділити_помилку_компіляції(В, елемент.місцезнаходження, ю8"Пустий символ");
          вернути помилка_компіляції;
        }
        якщо ю32[1] != 0 {
          ціль помилка_компіляції = виділити_помилку_компіляції(В, елемент.місцезнаходження, ю8"Більше одного символу");
          вернути помилка_компіляції;
        }
        ціль обʼєкт_числа = МаМа::виділити_обʼєкт_числа(М, д64(ю32[0]));
        звільнити(В, ю32 як адреса);
        позиція_константи = МаМа::покласти_константу(М, обʼєкт_числа як адреса<МаМа::Обʼєкт>);
      } інакше {
        ціль помилка_компіляції = виділити_помилку_компіляції(В, елемент.місцезнаходження, ю8"Невідомий тип символу");
        вернути помилка_компіляції;
      }
      МаМа::покласти_вказівку_ПокластиКонстанту(М, код, елемент.місцезнаходження.рядок, позиція_константи);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидОперація {
      ціль дані = елемент.дані як адреса<АСДДаніОперація>;
      ціль помилка_компіляції_ліво = скомпілювати_елемент_значення(В, контекст, код, дані.ліво);
      якщо помилка_компіляції_ліво != пусто {
        вернути помилка_компіляції_ліво;
      }
      якщо дані.операція == АСДОпераціяІ {
        ціль позиція_вказівки_стрибнути_якщо_ні = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_СтрибнутиЯкщоНіЗалишивши(М, код, елемент.місцезнаходження.рядок, 0);
        МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        ціль помилка_компіляції_право = скомпілювати_елемент_значення(В, контекст, код, дані.право);
        якщо помилка_компіляції_право != пусто {
          вернути помилка_компіляції_право;
        }
        код.накопичувач_вказівок.дані[позиція_вказівки_стрибнути_якщо_ні + 1] = код.накопичувач_вказівок.розмір;
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяАБО {
        ціль позиція_вказівки_стрибнути_якщо_так = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_СтрибнутиЯкщоТакЗалишивши(М, код, елемент.місцезнаходження.рядок, 0);
        МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        ціль помилка_компіляції_право = скомпілювати_елемент_значення(В, контекст, код, дані.право);
        якщо помилка_компіляції_право != пусто {
          вернути помилка_компіляції_право;
        }
        код.накопичувач_вказівок.дані[позиція_вказівки_стрибнути_якщо_так + 1] = код.накопичувач_вказівок.розмір;
        вернути пусто;
      }
      ціль помилка_компіляції_право = скомпілювати_елемент_значення(В, контекст, код, дані.право);
      якщо помилка_компіляції_право != пусто {
        вернути помилка_компіляції_право;
      }
      якщо дані.операція == АСДОпераціяДодавання {
        МаМа::покласти_вказівку_Додати(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяВіднімання {
        МаМа::покласти_вказівку_Відняти(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяМноження {
        МаМа::покласти_вказівку_Помножити(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяДілення {
        МаМа::покласти_вказівку_Поділити(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяМодуль {
        МаМа::покласти_вказівку_ОтриматиОстачуДілення(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяДіленняНаціло {
        МаМа::покласти_вказівку_ОтриматиНеповнуЧасткуДілення(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяПіднесенняДоСтепеня {
        МаМа::покласти_вказівку_ПіднестиДоСтепеня(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяЗсувВліво {
        МаМа::покласти_вказівку_ЗсунутиВліво(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяЗсувВправо {
        МаМа::покласти_вказівку_ЗсунутиВправо(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяЗсувВправоЗнаковий {
        МаМа::покласти_вказівку_ЗсунутиВправоЗіЗаповненням(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяДІ {
        МаМа::покласти_вказівку_ДвійковеІ(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяДАБО {
        МаМа::покласти_вказівку_ДвійковеАБО(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяВАБО {
        МаМа::покласти_вказівку_ДвійковеВиключнеАБО(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяМенше {
        МаМа::покласти_вказівку_Менше(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяБільше {
        МаМа::покласти_вказівку_Більше(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяМеншеРівне {
        МаМа::покласти_вказівку_НеБільше(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяБільшеРівне {
        МаМа::покласти_вказівку_НеМенше(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяРівне {
        МаМа::покласти_вказівку_Рівно(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяНерівне {
        МаМа::покласти_вказівку_НеРівно(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяМістить {
        МаМа::покласти_вказівку_Містить(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяНеМістить {
        МаМа::покласти_вказівку_НеМістить(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяЄ {
        МаМа::покласти_вказівку_Є(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше якщо дані.операція == АСДОпераціяНеЄ {
        МаМа::покласти_вказівку_НеЄ(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      } інакше {
        МаМа::надрукувати_п64(М, п64(дані.операція));
        вернути виділити_помилку_компіляції(В, елемент.місцезнаходження, ю8"Невідома операція!");
      }
    } інакше якщо елемент.вид == АСДВидЗначенняЯкщо {
      ціль дані = елемент.дані як адреса<АСДДаніЗначенняЯкщо>;
      ціль помилка_компіляції_умови = скомпілювати_елемент_значення(В, контекст, код, дані.умова);
      якщо помилка_компіляції_умови != пусто {
        вернути помилка_компіляції_умови;
      }
      ціль позиція_вказівки_стрибнути_якщо_ні = код.накопичувач_вказівок.розмір;
      МаМа::покласти_вказівку_СтрибнутиЯкщоНі(М, код, елемент.місцезнаходження.рядок, 0);
      ціль помилка_компіляції_так = скомпілювати_елемент_значення(В, контекст, код, дані.значення_так);
      якщо помилка_компіляції_так != пусто {
        вернути помилка_компіляції_так;
      }
      ціль позиція_вказівки_виходу_з_так = код.накопичувач_вказівок.розмір;
      МаМа::покласти_вказівку_Стрибнути(М, код, елемент.місцезнаходження.рядок, 0);
      код.накопичувач_вказівок.дані[позиція_вказівки_стрибнути_якщо_ні + 1] = код.накопичувач_вказівок.розмір;
      ціль помилка_компіляції_ні = скомпілювати_елемент_значення(В, контекст, код, дані.значення_ні);
      якщо помилка_компіляції_ні != пусто {
        вернути помилка_компіляції_ні;
      }
      код.накопичувач_вказівок.дані[позиція_вказівки_виходу_з_так + 1] = код.накопичувач_вказівок.розмір;
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидСамоОперація {
      ціль дані = елемент.дані як адреса<АСДДаніСамоОперація>;
      ціль помилка_компіляції_обʼєкта = скомпілювати_елемент_значення(В, контекст, код, дані.обʼєкт);
      якщо помилка_компіляції_обʼєкта != пусто {
        вернути помилка_компіляції_обʼєкта;
      }
      якщо дані.операція == АСДСамоОпераціяЛогічнеНі {
        МаМа::покласти_вказівку_Заперечити(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      }
      якщо дані.операція == АСДСамоОпераціяДвійковеНі {
        МаМа::покласти_вказівку_ДвійковеНЕ(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      }
      якщо дані.операція == АСДСамоОпераціяПлюс {
        МаМа::покласти_вказівку_Числове(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      }
      якщо дані.операція == АСДСамоОпераціяМінус {
        МаМа::покласти_вказівку_Відʼємне(М, код, елемент.місцезнаходження.рядок);
        вернути пусто;
      }
      ціль помилка_компіляції = виділити_помилку_компіляції(В, елемент.місцезнаходження, ю8"Самооперація не підтримується");
      вернути помилка_компіляції;
    } інакше якщо елемент.вид == АСДВидМодуль {
      ціль дані = елемент.дані як адреса<АСДДаніМодуль>;
      ціль код_модуля = МаМа::виділити_код(М, код.шлях_до_файлу);
      ціль контекст_модуля = виділити_контекст_компіляції(В);
      ціль помилка_компіляції_тіла_модуля = скомпілювати_тіло(В, контекст_модуля, код_модуля, дані.тіло, ні);
      якщо помилка_компіляції_тіла_модуля != пусто {
        вернути помилка_компіляції_тіла_модуля;
      }
      ціль позиція_підкоду = М.сховище_кодів.розмір;
      МаМа::покласти_в_накопичувач<адреса<МаМа::Код>>(М, М.сховище_кодів::адреса, код_модуля);
      якщо дані.ідентифікатор != пусто {
        ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, дані.ідентифікатор.значення);
        МаМа::покласти_вказівку_ТриматиНазву(М, код, елемент.місцезнаходження.рядок, позиція_назви);
      }
      МаМа::покласти_вказівку_СтворитиМодуль(М, код, елемент.місцезнаходження.рядок, позиція_підкоду);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидСписок {
      ціль дані = елемент.дані як адреса<АСДДаніСписок>;
      МаМа::покласти_вказівку_СтворитиСписок(М, код, елемент.місцезнаходження.рядок, 0);
      змінна ціль пе: позитивне = 0;
      поки пе < дані.кількість_елементів {
        ціль елемент_списку = дані.елементи[пе];
        ціль помилка_компіляції_елементу_списку = скомпілювати_елемент_значення(В, контекст, код, елемент_списку);
        якщо помилка_компіляції_елементу_списку != пусто {
          вернути помилка_компіляції_елементу_списку;
        }
        МаМа::покласти_вказівку_ПокластиВСписок(М, код, елемент.місцезнаходження.рядок);
        пе += 1;
      }
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидСловник {
      ціль дані = елемент.дані як адреса<АСДДаніСловник>;
      МаМа::покласти_вказівку_СтворитиСловник(М, код, елемент.місцезнаходження.рядок, 0);
      змінна ціль пе: позитивне = 0;
      поки пе < дані.кількість_елементів {
        ціль елемент_словника = дані.елементи[пе];
        ціль помилка_компіляції_ключа_словника_списку = скомпілювати_елемент_значення(В, контекст, код, елемент_словника.ключ);
        якщо помилка_компіляції_ключа_словника_списку != пусто {
          вернути помилка_компіляції_ключа_словника_списку;
        }
        ціль помилка_компіляції_значення_словника_списку = скомпілювати_елемент_значення(В, контекст, код, елемент_словника.значення);
        якщо помилка_компіляції_значення_словника_списку != пусто {
          вернути помилка_компіляції_значення_словника_списку;
        }
        МаМа::покласти_вказівку_ПокластиВСловник(М, код, елемент.місцезнаходження.рядок);
        пе += 1;
      }
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидВидалити {
      ціль дані = елемент.дані як адреса<АСДДаніВидалити>;
      ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, дані.ідентифікатор.значення);
      МаМа::покласти_вказівку_Видалити(М, код, елемент.місцезнаходження.рядок, позиція_назви);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидВидалитиВластивість {
      ціль дані = елемент.дані як адреса<АСДДаніВидалитиВластивість>;
      ціль помилка_компіляції_обʼєкта = скомпілювати_елемент_значення(В, контекст, код, дані.обʼєкт);
      якщо помилка_компіляції_обʼєкта != пусто {
        вернути помилка_компіляції_обʼєкта;
      }
      ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, дані.ідентифікатор.значення);
      МаМа::покласти_вказівку_ВидалитиВластивість(М, код, елемент.місцезнаходження.рядок, позиція_назви);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидВидалитиЕлемент {
      ціль дані = елемент.дані як адреса<АСДДаніВидалитиЕлемент>;
      ціль помилка_компіляції_обʼєкта = скомпілювати_елемент_значення(В, контекст, код, дані.обʼєкт);
      якщо помилка_компіляції_обʼєкта != пусто {
        вернути помилка_компіляції_обʼєкта;
      }
      ціль помилка_компіляції_ключа = скомпілювати_елемент_значення(В, контекст, код, дані.позиція);
      якщо помилка_компіляції_ключа != пусто {
        вернути помилка_компіляції_ключа;
      }
      МаМа::покласти_вказівку_ВидалитиЕлемент(М, код, елемент.місцезнаходження.рядок);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидЧекати {
      ціль дані = елемент.дані як адреса<АСДДаніЧекати>;
      вернути виділити_помилку_компіляції(В, елемент.місцезнаходження, ю8"Інструкція \"чекати\" наразі не підтримується");
    }
    МаМа::надрукувати_п64(М, п64(елемент.вид));
    вернути виділити_помилку_компіляції(В, елемент.місцезнаходження, ю8"Невідомий вид АСДЗначення!");
  }

  місцева дія скомпілювати_тіло(В: адреса<Виконувач>, контекст: адреса<КонтекстКомпіляції>, код: адреса<МаМа::Код>, тіло: адреса<СписокАСДЗначень>, вернути_в_кінці: логічне): адреса<ПомилкаКомпіляції> {
    ціль М = В.М;
    // потім: обробляти вернути_в_кінці в кожному елементі
    змінна ціль пе: позитивне = 0;
    поки пе < тіло.довжина {
      ціль елемент = тіло.елементи[пе];
      якщо елемент.вид == АСДВидНіщо {
        вернути виділити_помилку_компіляції(В, елемент.місцезнаходження, ю8"Виявлено АСДВидНіщо!");
      } інакше якщо елемент.вид == АСДВидВизначити {
        ціль дані = елемент.дані як адреса<АСДДаніВизначити>;
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, дані.значення);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, дані.ідентифікатор.значення);
        МаМа::покласти_вказівку_Визначити(М, код, елемент.місцезнаходження.рядок, позиція_назви);
      } інакше якщо елемент.вид == АСДВидВизначитиЗзовні {
        ціль дані = елемент.дані як адреса<АСДДаніВизначитиЗзовні>;
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, дані.значення);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, дані.ідентифікатор.значення);
        МаМа::покласти_вказівку_ВизначитиЗзовні(М, код, елемент.місцезнаходження.рядок, позиція_назви);
      } інакше якщо елемент.вид == АСДВидЗвернутись {
        ціль дані = елемент.дані як адреса<АСДДаніЗвернутись>;
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.довжина - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, елемент.місцезнаходження.рядок);
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        }
      } інакше якщо елемент.вид == АСДВидОтримати {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.довжина - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, елемент.місцезнаходження.рядок);
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        }
      } інакше якщо елемент.вид == АСДВидОтриматиЗаПозицією {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.довжина - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, елемент.місцезнаходження.рядок);
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        }
      } інакше якщо елемент.вид == АСДВидЗмінити {
        ціль дані = елемент.дані як адреса<АСДДаніЗмінити>;
        ціль помилка_компіляції_обʼєкта = скомпілювати_елемент_значення(В, контекст, код, дані.обʼєкт);
        якщо помилка_компіляції_обʼєкта != пусто {
          вернути помилка_компіляції_обʼєкта;
        }
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, дані.значення);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, дані.ідентифікатор.значення);
        МаМа::покласти_вказівку_ЗмінитиВластивість(М, код, елемент.місцезнаходження.рядок, позиція_назви);
      } інакше якщо елемент.вид == АСДВидЗмінитиЗаПозицією {
        ціль дані = елемент.дані як адреса<АСДДаніЗмінитиЗаПозицією>;
        ціль помилка_компіляції_обʼєкта = скомпілювати_елемент_значення(В, контекст, код, дані.обʼєкт);
        якщо помилка_компіляції_обʼєкта != пусто {
          вернути помилка_компіляції_обʼєкта;
        }
        ціль помилка_компіляції_позиції = скомпілювати_елемент_значення(В, контекст, код, дані.позиція);
        якщо помилка_компіляції_позиції != пусто {
          вернути помилка_компіляції_позиції;
        }
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, дані.значення);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        МаМа::покласти_вказівку_ЗмінитиЕлемент(М, код, елемент.місцезнаходження.рядок);
      } інакше якщо елемент.вид == АСДВидВиконати {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.довжина - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, елемент.місцезнаходження.рядок);
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        }
      } інакше якщо елемент.вид == АСДВидДія {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        ціль дані = елемент.дані як адреса<АСДДаніДія>;
        якщо дані.ідентифікатор == пусто {
          МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        } інакше {
          якщо дані.структура_ == пусто {
            ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, дані.ідентифікатор.значення);
            МаМа::покласти_вказівку_Визначити(М, код, елемент.місцезнаходження.рядок, позиція_назви);
          } інакше {
            ціль помилка_компіляції_структури = скомпілювати_елемент_значення(В, контекст, код, дані.структура_);
            якщо помилка_компіляції_структури != пусто {
              вернути помилка_компіляції_структури;
            }
            ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, дані.ідентифікатор.значення);
            МаМа::покласти_вказівку_ЗаписатиМетод(М, код, елемент.місцезнаходження.рядок, позиція_назви);
            МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
          }
        }
      } інакше якщо елемент.вид == АСДВидСтруктура {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        ціль дані = елемент.дані як адреса<АСДДаніСтруктура>;
        якщо дані.ідентифікатор == пусто {
          МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        } інакше {
          ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, дані.ідентифікатор.значення);
          МаМа::покласти_вказівку_Визначити(М, код, елемент.місцезнаходження.рядок, позиція_назви);
        }
      } інакше якщо елемент.вид == АСДВидЧисло {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.довжина - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, елемент.місцезнаходження.рядок);
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        }
      } інакше якщо елемент.вид == АСДВидТекст {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
      } інакше якщо елемент.вид == АСДВидСимвол {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.довжина - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, елемент.місцезнаходження.рядок);
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        }
      } інакше якщо елемент.вид == АСДВидОперація {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.довжина - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, елемент.місцезнаходження.рядок);
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        }
      } інакше якщо елемент.вид == АСДВидЯкщо {
        ціль дані = елемент.дані як адреса<АСДДаніЯкщо>;
        ціль помилка_компіляції_умови = скомпілювати_елемент_значення(В, контекст, код, дані.умова);
        якщо помилка_компіляції_умови != пусто {
          вернути помилка_компіляції_умови;
        }
        ціль позиція_вказівки_якщо_ні = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_СтрибнутиЯкщоНі(М, код, елемент.місцезнаходження.рядок, 0);
        ціль контекст_циклу = виділити_контекст_компіляції(В);
        якщо дані.тіло != пусто {
          ціль помилка_компіляції_тіла = скомпілювати_тіло(В, контекст_циклу, код, дані.тіло, ні);
          якщо помилка_компіляції_тіла != пусто {
            вернути помилка_компіляції_тіла;
          }
        }
        ціль позиція_вказівки_якщо_так = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_Стрибнути(М, код, елемент.місцезнаходження.рядок, 0);
        код.накопичувач_вказівок.дані[позиція_вказівки_якщо_ні + 1] = код.накопичувач_вказівок.розмір;
        якщо дані.тіло_інакше != пусто {
          ціль помилка_компіляції_тіла_інакше = скомпілювати_тіло(В, контекст_циклу, код, дані.тіло_інакше, ні);
          якщо помилка_компіляції_тіла_інакше != пусто {
            вернути помилка_компіляції_тіла_інакше;
          }
        }
        код.накопичувач_вказівок.дані[позиція_вказівки_якщо_так + 1] = код.накопичувач_вказівок.розмір;
      } інакше якщо елемент.вид == АСДВидПоки {
        ціль дані = елемент.дані як адреса<АСДДаніПоки>;
        ціль позиція_вказівки_початку_поки = код.накопичувач_вказівок.розмір;
        змінна ціль позиція_вказівки_якщо_ні = 0п64;
        якщо дані.умова != пусто {
          ціль помилка_компіляції_умови = скомпілювати_елемент_значення(В, контекст, код, дані.умова);
          якщо помилка_компіляції_умови != пусто {
            вернути помилка_компіляції_умови;
          }
          позиція_вказівки_якщо_ні = код.накопичувач_вказівок.розмір;
          МаМа::покласти_вказівку_СтрибнутиЯкщоНі(М, код, елемент.місцезнаходження.рядок, 0);
        }
        ціль контекст_циклу = виділити_контекст_компіляції(В);
        ціль помилка_компіляції_тіла = скомпілювати_тіло(В, контекст_циклу, код, дані.тіло, ні);
        якщо помилка_компіляції_тіла != пусто {
          вернути помилка_компіляції_тіла;
        }
        МаМа::покласти_вказівку_Стрибнути(М, код, елемент.місцезнаходження.рядок, позиція_вказівки_початку_поки);
        якщо дані.умова != пусто {
          код.накопичувач_вказівок.дані[позиція_вказівки_якщо_ні + 1] = код.накопичувач_вказівок.розмір;
        }
      } інакше якщо елемент.вид == АСДВидВернути {
        ціль дані = елемент.дані як адреса<АСДДаніВернути>;
        якщо дані.значення == пусто {
          МаМа::покласти_вказівку_ПокластиПусто(М, код, елемент.місцезнаходження.рядок);
        } інакше {
          ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, дані.значення);
          якщо помилка_компіляції_значення != пусто {
            вернути помилка_компіляції_значення;
          }
        }
        МаМа::покласти_вказівку_Вернути(М, код, елемент.місцезнаходження.рядок);
      } інакше якщо елемент.вид == АСДВидЗначенняЯкщо {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.довжина - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, елемент.місцезнаходження.рядок);
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        }
      } інакше якщо елемент.вид == АСДВидСамоОперація {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.довжина - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, елемент.місцезнаходження.рядок);
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        }
      } інакше якщо елемент.вид == АСДВидМодуль {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        ціль дані = елемент.дані як адреса<АСДДаніМодуль>;
        якщо дані.ідентифікатор == пусто {
          МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        } інакше {
          ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, дані.ідентифікатор.значення);
          МаМа::покласти_вказівку_Визначити(М, код, елемент.місцезнаходження.рядок, позиція_назви);
        }
      } інакше якщо елемент.вид == АСДВидСписок {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.довжина - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, елемент.місцезнаходження.рядок);
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        }
      } інакше якщо елемент.вид == АСДВидСловник {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.довжина - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, елемент.місцезнаходження.рядок);
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        }
      } інакше якщо елемент.вид == АСДВидВзяти {
        ціль дані = елемент.дані як адреса<АСДДаніВзяти>;
        змінна ціль позиція_назви_типу = МаМа::позиція_назви_з_ю8(М, ю8"модуль");
        якщо дані.тип != пусто {
          позиція_назви_типу = МаМа::позиція_назви_з_ю8(М, дані.тип.значення);
        }
        змінна ціль позиція_останьої_назви: позитивне = 0;
        змінна ціль пш: позитивне = 0;
        поки пш < дані.довжина_шляху {
          ціль елемент_шляху = дані.шлях[пш];
          ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, елемент_шляху.значення);
          МаМа::покласти_вказівку_НакопичитиНазву(М, код, елемент.місцезнаходження.рядок, позиція_назви);
          якщо пш == дані.довжина_шляху - 1 {
            позиція_останьої_назви = позиція_назви;
          }
          пш += 1;
        }
        МаМа::покласти_вказівку_Взяти(М, код, елемент.місцезнаходження.рядок, позиція_назви_типу);
        якщо дані.ідентифікатор_як == пусто {
          якщо дані.кількість_елементів == 0 {
            МаМа::покласти_вказівку_Визначити(М, код, елемент.місцезнаходження.рядок, позиція_останьої_назви);
          } інакше {
            змінна ціль пе: позитивне = 0;
            поки пе < дані.кількість_елементів {
              ціль елемент = дані.елементи[пе];
              МаМа::покласти_вказівку_Дублювати(М, код, елемент.місцезнаходження.рядок);
              МаМа::покласти_вказівку_ОтриматиВластивість(М, код, елемент.місцезнаходження.рядок, МаМа::позиція_назви_з_ю8(М, елемент.ідентифікатор.значення));
              якщо елемент.ідентифікатор_як == пусто {
                МаМа::покласти_вказівку_Визначити(М, код, елемент.місцезнаходження.рядок, МаМа::позиція_назви_з_ю8(М, елемент.ідентифікатор.значення));
              } інакше {
                МаМа::покласти_вказівку_Визначити(М, код, елемент.місцезнаходження.рядок, МаМа::позиція_назви_з_ю8(М, елемент.ідентифікатор_як.значення));
              }
              пе += 1;
            }
          }
        } інакше {
          МаМа::покласти_вказівку_Визначити(М, код, елемент.місцезнаходження.рядок, МаМа::позиція_назви_з_ю8(М, дані.ідентифікатор_як.значення));
        }
      } інакше якщо елемент.вид == АСДВидСпробувати {
        ціль дані = елемент.дані як адреса<АСДДаніСпробувати>;
        ціль позиція_вказівки_почати_спробу = код.накопичувач_вказівок.розмір;
        якщо дані.ідентифікатор_зловити == пусто {
          МаМа::покласти_вказівку_ПочатиСпробу(М, код, елемент.місцезнаходження.рядок, 0);
        } інакше {
          ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, дані.ідентифікатор_зловити.значення);
          МаМа::покласти_вказівку_ПочатиСпробуЗНазвою(М, код, елемент.місцезнаходження.рядок, 0, позиція_назви);
        }
        ціль помилка_компіляції_тіла = скомпілювати_тіло(В, контекст, код, дані.тіло, ні);
        якщо помилка_компіляції_тіла != пусто {
          вернути помилка_компіляції_тіла;
        }
        ціль позиція_вказівки_закінчити_спробу = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_ЗакінчитиСпробу(М, код, елемент.місцезнаходження.рядок, 0);
        код.накопичувач_вказівок.дані[позиція_вказівки_почати_спробу + 1] = код.накопичувач_вказівок.розмір;
        ціль помилка_компіляції_тіла_зловити = скомпілювати_тіло(В, контекст, код, дані.тіло_зловити, ні);
        якщо помилка_компіляції_тіла_зловити != пусто {
          вернути помилка_компіляції_тіла_зловити;
        }
        код.накопичувач_вказівок.дані[позиція_вказівки_закінчити_спробу + 1] = код.накопичувач_вказівок.розмір;
      } інакше якщо елемент.вид == АСДВидВпасти {
        ціль дані = елемент.дані як адреса<АСДДаніВпасти>;
        якщо дані.значення == пусто {
          МаМа::покласти_вказівку_ПокластиПусто(М, код, елемент.місцезнаходження.рядок);
        } інакше {
          ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, дані.значення);
          якщо помилка_компіляції_значення != пусто {
            вернути помилка_компіляції_значення;
          }
        }
        МаМа::покласти_вказівку_Впасти(М, код, елемент.місцезнаходження.рядок);
      } інакше якщо елемент.вид == АСДВидДати {
        ціль дані = елемент.дані як адреса<АСДДаніДати>;
        змінна ціль пед: позитивне = 0;
        поки пед < дані.кількість_елементів {
          ціль елемент = дані.елементи[пед];
          ціль позиція_назви = МаМа::позиція_назви_з_ю8(М, елемент.ідентифікатор.значення);
          змінна ціль позиція_назви_як = позиція_назви;
          якщо елемент.ідентифікатор_як != пусто {
            позиція_назви_як = МаМа::позиція_назви_з_ю8(М, елемент.ідентифікатор_як.значення);
          }
          МаМа::покласти_вказівку_Звернутись(М, код, елемент.місцезнаходження.рядок, позиція_назви);
          МаМа::покласти_вказівку_Дати(М, код, елемент.місцезнаходження.рядок, позиція_назви_як);
          пед += 1;
        }
      } інакше якщо елемент.вид == АСДВидПеребрати {
        ціль дані = елемент.дані як адреса<АСДДаніПеребрати>;
        ціль помилка_компіляції_обʼєкта = скомпілювати_елемент_значення(В, контекст, код, дані.обʼєкт);
        якщо помилка_компіляції_обʼєкта != пусто {
          вернути помилка_компіляції_обʼєкта;
        }
        МаМа::покласти_вказівку_ОтриматиПеребір(М, код, елемент.місцезнаходження.рядок);
        ціль позиція_вказівки_початку_перебору = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_ПеребратиДалі(М, код, елемент.місцезнаходження.рядок);
        ціль позиція_вказівки_якщо_ні = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_СтрибнутиЯкщоНі(М, код, елемент.місцезнаходження.рядок, 0);
        МаМа::покласти_вказівку_Дублювати(М, код, елемент.місцезнаходження.рядок);
        МаМа::покласти_вказівку_ОтриматиВластивість(М, код, елемент.місцезнаходження.рядок, МаМа::позиція_назви_з_ю8(М, ю8"значення"));
        МаМа::покласти_вказівку_Визначити(М, код, елемент.місцезнаходження.рядок, МаМа::позиція_назви_з_ю8(М, дані.ідентифікатор.значення));
        ціль помилка_компіляції_тіла = скомпілювати_тіло(В, контекст, код, дані.тіло, ні);
        якщо помилка_компіляції_тіла != пусто {
          вернути помилка_компіляції_тіла;
        }
        МаМа::покласти_вказівку_Стрибнути(М, код, елемент.місцезнаходження.рядок, позиція_вказівки_початку_перебору);
        код.накопичувач_вказівок.дані[позиція_вказівки_якщо_ні + 1] = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_ПокластиПусто(М, код, елемент.місцезнаходження.рядок);
        МаМа::покласти_вказівку_Визначити(М, код, елемент.місцезнаходження.рядок, МаМа::позиція_назви_з_ю8(М, дані.ідентифікатор.значення));
      } інакше якщо елемент.вид == АСДВидПеребратиДіапазон {
        ціль дані = елемент.дані як адреса<АСДДаніПеребратиДіапазон>;
        ціль помилка_компіляції_від = скомпілювати_елемент_значення(В, контекст, код, дані.від);
        якщо помилка_компіляції_від != пусто {
          вернути помилка_компіляції_від;
        }
        ціль помилка_компіляції_до = скомпілювати_елемент_значення(В, контекст, код, дані.до);
        якщо помилка_компіляції_до != пусто {
          вернути помилка_компіляції_до;
        }
        ціль позиція_вказівки_початку_циклу = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_ДублюватиПопереднє(М, код, елемент.місцезнаходження.рядок);
        МаМа::покласти_вказівку_ДублюватиПопереднє(М, код, елемент.місцезнаходження.рядок);
        якщо дані.включно != 0 {
          МаМа::покласти_вказівку_НеБільше(М, код, елемент.місцезнаходження.рядок);
        } інакше {
          МаМа::покласти_вказівку_Менше(М, код, елемент.місцезнаходження.рядок);
        }
        ціль позиція_вказівки_якщо_ні = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_СтрибнутиЯкщоНі(М, код, елемент.місцезнаходження.рядок, 0);
        МаМа::покласти_вказівку_ДублюватиПопереднє(М, код, елемент.місцезнаходження.рядок);
        МаМа::покласти_вказівку_Визначити(М, код, елемент.місцезнаходження.рядок, МаМа::позиція_назви_з_ю8(М, дані.ідентифікатор.значення));
        ціль контекст_циклу = виділити_контекст_компіляції(В);
        ціль помилка_компіляції_тіла = скомпілювати_тіло(В, контекст_циклу, код, дані.тіло, ні);
        якщо помилка_компіляції_тіла != пусто {
          вернути помилка_компіляції_тіла;
        }
        МаМа::покласти_вказівку_ЗбільшитиПопереднє(М, код, елемент.місцезнаходження.рядок);
        МаМа::покласти_вказівку_Стрибнути(М, код, елемент.місцезнаходження.рядок, позиція_вказівки_початку_циклу);
        код.накопичувач_вказівок.дані[позиція_вказівки_якщо_ні + 1] = код.накопичувач_вказівок.розмір;
        МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
      } інакше якщо елемент.вид == АСДВидЦикл {
        ціль дані = елемент.дані як адреса<АСДДаніЦикл>;
        ціль помилка_компіляції_старту = скомпілювати_тіло(В, контекст, код, дані.старт, ні);
        якщо помилка_компіляції_старту != пусто {
          вернути помилка_компіляції_старту;
        }
        ціль позиція_вказівки_початку_циклу = код.накопичувач_вказівок.розмір;
        змінна ціль позиція_вказівки_якщо_ні = 0п64;
        якщо дані.умова != пусто {
          ціль помилка_компіляції_умови = скомпілювати_елемент_значення(В, контекст, код, дані.умова);
          якщо помилка_компіляції_умови != пусто {
            вернути помилка_компіляції_умови;
          }
          позиція_вказівки_якщо_ні = код.накопичувач_вказівок.розмір;
          МаМа::покласти_вказівку_СтрибнутиЯкщоНі(М, код, елемент.місцезнаходження.рядок, 0);
        }
        ціль контекст_циклу = виділити_контекст_компіляції(В);
        ціль помилка_компіляції_тіла = скомпілювати_тіло(В, контекст_циклу, код, дані.тіло, ні);
        якщо помилка_компіляції_тіла != пусто {
          вернути помилка_компіляції_тіла;
        }
        ціль помилка_компіляції_ітерації = скомпілювати_тіло(В, контекст_циклу, код, дані.ітерація, ні);
        якщо помилка_компіляції_ітерації != пусто {
          вернути помилка_компіляції_ітерації;
        }
        МаМа::покласти_вказівку_Стрибнути(М, код, елемент.місцезнаходження.рядок, позиція_вказівки_початку_циклу);
        якщо дані.умова != пусто {
          код.накопичувач_вказівок.дані[позиція_вказівки_якщо_ні + 1] = код.накопичувач_вказівок.розмір;
        }
      } інакше якщо елемент.вид == АСДВидВічнийЦикл {
        ціль дані = елемент.дані як адреса<АСДДаніВічнийЦикл>;
        ціль позиція_вказівки_початку_циклу = код.накопичувач_вказівок.розмір;
        ціль контекст_циклу = виділити_контекст_компіляції(В);
        ціль помилка_компіляції_тіла = скомпілювати_тіло(В, контекст_циклу, код, дані.тіло, ні);
        якщо помилка_компіляції_тіла != пусто {
          вернути помилка_компіляції_тіла;
        }
        МаМа::покласти_вказівку_Стрибнути(М, код, елемент.місцезнаходження.рядок, позиція_вказівки_початку_циклу);
      } інакше якщо елемент.вид == АСДВидВидалити {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.довжина - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, елемент.місцезнаходження.рядок);
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        }
      } інакше якщо елемент.вид == АСДВидВидалитиВластивість {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.довжина - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, елемент.місцезнаходження.рядок);
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        }
      } інакше якщо елемент.вид == АСДВидВидалитиЕлемент {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.довжина - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, елемент.місцезнаходження.рядок);
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        }
      } інакше якщо елемент.вид == АСДВидЧекати {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(В, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        якщо вернути_в_кінці {
          якщо пе == тіло.довжина - 1 {
            МаМа::покласти_вказівку_Вернути(М, код, елемент.місцезнаходження.рядок);
          } інакше {
            МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
          }
        } інакше {
          МаМа::покласти_вказівку_Забрати(М, код, елемент.місцезнаходження.рядок);
        }
      } інакше {
        МаМа::надрукувати_п64(М, п64(елемент.вид));
        вернути виділити_помилку_компіляції(В, елемент.місцезнаходження, ю8"Невідомий вид АСДЗначення!");
      }
      пе = пе + 1;
    }
    вернути пусто;
  }

  місцева дія звільнити_контекст_компіляції(В: адреса<Виконувач>, контекст: адреса<КонтекстКомпіляції>) {
    звільнити(В, контекст);
  }
}