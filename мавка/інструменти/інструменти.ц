взяти визначення інструменти;
взяти визначення різне;
взяти визначення біб;

місцева дія витнути_рядок_для_помилки(значення: памʼять<п8>, рядок: позитивне, стовпець: позитивне): ВитнутийРядокДляПомилки {
  ціль рядки = створити_вектор<памʼять<п8>>();
  ціль буфер_рядка = створити_буфер_ю8();
  змінна х = 0ц32;
  поки значення[х] != 0 {
    ціль с = значення[х];
    якщо с == 10 {
      додати_до_вектору<памʼять<п8>>(рядки, створити_ю8_сі_з_буфера(буфер_рядка));
      звільнити_буфер_ю8(буфер_рядка);
      буфер_рядка = створити_буфер_ю8();
    } інакше {
      додати_символ_до_буфера_ю8(буфер_рядка, с);
    }
    х = х + 1;
  }
  додати_до_вектору<памʼять<п8>>(рядки, створити_ю8_сі_з_буфера(буфер_рядка));
  звільнити_буфер_ю8(буфер_рядка);
  ціль рядок_ю8 = ю8_клонувати(рядки.дані[рядок - 1]);
  х = 0;
  поки х < рядки.довжина як ц32 {
    звільнити(рядки.дані[х]);
    х = х + 1;
  }
  звільнити_вектор<памʼять<п8>>(рядки);
  вернути ВитнутийРядокДляПомилки { стовпець, рядок_ю8 };
}





////
// Захищено Правом Автора
// Богданович Давид Когут Прихожденко, 2024
//
// Цей файл є частиною Бібліотеки Цілі і відповідає за роботу зі стандартним виводом ОС.
////

взяти визначення біб;

зовнішня дія ___біб__друк_ю8___(значення: памʼять<п8>);
зовнішня дія ___біб__друк_ю16___(значення: памʼять<п16>);
зовнішня дія ___біб__друк_ю32___(значення: памʼять<п32>);

зовнішня дія ___біб__друк_п8___(значення: п8);
зовнішня дія ___біб__друк_п16___(значення: п16);
зовнішня дія ___біб__друк_п32___(значення: п32);
зовнішня дія ___біб__друк_п64___(значення: п64);
зовнішня дія ___біб__друк_позитивне___(значення: позитивне);

зовнішня дія ___біб__друк_ц8___(значення: ц8);
зовнішня дія ___біб__друк_ц32___(значення: ц32);
зовнішня дія ___біб__друк_ц64___(значення: ц64);
зовнішня дія ___біб__друк_ціле___(значення: ціле);

зовнішня дія ___біб__друк_д32___(значення: д32);
зовнішня дія ___біб__друк_д64___(значення: д64);
зовнішня дія ___біб__друк_дійсне___(значення: дійсне);

зовнішня дія ___біб__друк_комірку___(значення: невідома_комірка);

зовнішня дія ___біб__вивести_ю8___(значення: памʼять<п8>);
зовнішня дія ___біб__вивести_ю16___(значення: памʼять<п16>);

зовнішня дія ___біб__вивести_п8___(значення: п8);
зовнішня дія ___біб__вивести_п32___(значення: п32);
зовнішня дія ___біб__вивести_п64___(значення: п64);
зовнішня дія ___біб__вивести_позитивне___(значення: позитивне);

зовнішня дія ___біб__вивести_ц8___(значення: ц8);
зовнішня дія ___біб__вивести_ц32___(значення: ц32);
зовнішня дія ___біб__вивести_ц64___(значення: ц64);
зовнішня дія ___біб__вивести_ціле___(значення: ціле);

зовнішня дія ___біб__вивести_д32___(значення: д32);
зовнішня дія ___біб__вивести_д64___(значення: д64);
зовнішня дія ___біб__вивести_дійсне___(значення: дійсне);

зовнішня дія ___біб__вивести_комірку___(значення: невідома_комірка);

секція біб {
  місцева дія друк_ю8(значення: памʼять<п8>) {
    ___біб__друк_ю8___(значення);
  }

  місцева дія друк_ю16(значення: памʼять<п16>) {
    ___біб__друк_ю16___(значення);
  }

  місцева дія друк_ю32(значення: памʼять<п32>) {
    ___біб__друк_ю32___(значення);
  }

  місцева дія друк_п8(значення: п8) {
    ___біб__друк_п8___(значення);
  }

  місцева дія друк_п16(значення: п16) {
    ___біб__друк_п16___(значення);
  }

  місцева дія друк_п32(значення: п32) {
    ___біб__друк_п32___(значення);
  }

  місцева дія друк_п64(значення: п64) {
    ___біб__друк_п64___(значення);
  }

  місцева дія друк_позитивне(значення: позитивне) {
    ___біб__друк_позитивне___(значення);
  }

  місцева дія друк_ц8(значення: ц8) {
    ___біб__друк_ц8___(значення);
  }

  місцева дія друк_ц32(значення: ц32) {
    ___біб__друк_ц32___(значення);
  }

  місцева дія друк_ц64(значення: ц64) {
    ___біб__друк_ц64___(значення);
  }

  місцева дія друк_ціле(значення: ціле) {
    ___біб__друк_ціле___(значення);
  }

  місцева дія друк_д32(значення: д32) {
    ___біб__друк_д32___(значення);
  }

  місцева дія друк_д64(значення: д64) {
    ___біб__друк_д64___(значення);
  }

  місцева дія друк_дійсне(значення: дійсне) {
    ___біб__друк_дійсне___(значення);
  }

  місцева дія друк_комірку(значення: невідома_комірка) {
    ___біб__друк_комірку___(значення);
  }

  місцева дія вивести_ю8(значення: памʼять<п8>) {
    ___біб__вивести_ю8___(значення);
  }

  місцева дія вивести_ю16(значення: памʼять<п16>) {
    ___біб__вивести_ю16___(значення);
  }

  місцева дія вивести_п8(значення: п8) {
    ___біб__вивести_п8___(значення);
  }

  місцева дія вивести_п32(значення: п32) {
    ___біб__вивести_п32___(значення);
  }

  місцева дія вивести_п64(значення: п64) {
    ___біб__вивести_п64___(значення);
  }

  місцева дія вивести_позитивне(значення: позитивне) {
    ___біб__вивести_позитивне___(значення);
  }

  місцева дія вивести_ц8(значення: ц8) {
    ___біб__вивести_ц8___(значення);
  }

  місцева дія вивести_ц32(значення: ц32) {
    ___біб__вивести_ц32___(значення);
  }

  місцева дія вивести_ц64(значення: ц64) {
    ___біб__вивести_ц64___(значення);
  }

  місцева дія вивести_ціле(значення: ціле) {
    ___біб__вивести_ціле___(значення);
  }

  місцева дія вивести_д32(значення: д32) {
    ___біб__вивести_д32___(значення);
  }

  місцева дія вивести_д64(значення: д64) {
    ___біб__вивести_д64___(значення);
  }

  місцева дія вивести_дійсне(значення: дійсне) {
    ___біб__вивести_дійсне___(значення);
  }

  місцева дія вивести_комірку(значення: невідома_комірка) {
    ___біб__вивести_комірку___(значення);
  }
}

////
// Захищено Правом Автора
// Богданович Давид Когут Прихожденко, 2024
//
// Цей файл є частиною Бібліотеки Цілі і відповідає за роботу з кодуванням Unicode.
////

секція біб {
  секція юнікод {
    місцева дія дізнатись_розмір_символа_юнікоду(перший_байт: п8): п8 {
      якщо (перший_байт & 0ш80) == 0ш00 {
        вернути 1;
      }
      якщо (перший_байт & 0шҐ0) == 0шВ0 {
        вернути 2;
      }
      якщо (перший_байт & 0шД0) == 0шҐ0 {
        вернути 3;
      }
      якщо (перший_байт & 0шД8) == 0шД0 {
        вернути 4;
      }
      вернути 0;
    }

    місцева дія дізнатись_розмір_ю8_сі(значення: памʼять<п8>): позитивне {
      змінна розмір = 0ц32;
      поки значення[розмір] != 0 {
        розмір = розмір + 1;
      }
      вернути розмір;
    }

    місцева дія дізнатись_розмір_ю16_сі(значення: памʼять<п16>): позитивне {
      змінна розмір = 0ц32;
      поки значення[розмір] != 0 {
        розмір = розмір + 1;
      }
      вернути розмір;
    }

    місцева дія дізнатись_розмір_ю32_сі(значення: памʼять<п32>): позитивне {
      змінна розмір = 0ц32;
      поки значення[розмір] != 0 {
        розмір = розмір + 1;
      }
      вернути розмір;
    }

    місцева дія дізнатись_довжину_ю8(значення: памʼять<п8>, розмір: позитивне): позитивне {
      змінна х = 0ц32;
      змінна довжина = 0ц32;
      поки х < розмір як ц32 {
        ціль перший_байт = значення[х];
        ціль розмір_символа = дізнатись_розмір_символа_юнікоду(перший_байт);
        якщо розмір_символа == 0 {
          х = х + 1;
        } інакше {
          довжина = довжина + 1;
          х = х + розмір_символа як ц32;
        }
      }
      вернути довжина;
    }

    місцева дія дізнатись_довжину_ю16(значення: памʼять<п16>, розмір: позитивне): позитивне {
      змінна х = 0ц32;
      змінна довжина = 0ц32;
      поки х < розмір як ц32 {
        ціль перший_байт = значення[х] & 0ш3Д;
        ціль розмір_символа = дізнатись_розмір_символа_юнікоду(перший_байт як п8);
        якщо розмір_символа == 0 {
          х = х + 1;
        } інакше {
          довжина = довжина + 1;
          х = х + розмір_символа як ц32;
        }
      }
      вернути довжина;
    }

    місцева дія дізнатись_довжину_ю8_сі(значення: памʼять<п8>): позитивне {
      ціль розмір = дізнатись_розмір_ю8_сі(значення);
      змінна х = 0ц32;
      змінна довжина = 0ц32;
      поки х < розмір як ц32 {
        ціль перший_байт = значення[х];
        ціль розмір_символа = дізнатись_розмір_символа_юнікоду(перший_байт);
        якщо розмір_символа == 0 {
          х = х + 1;
        } інакше {
          довжина = довжина + 1;
          х = х + розмір_символа як ц32;
        }
      }
      вернути довжина;
    }

    місцева дія дізнатись_довжину_ю16_сі(значення: памʼять<п16>): позитивне {
      ціль розмір = дізнатись_розмір_ю16_сі(значення);
      змінна х = 0ц32;
      змінна довжина = 0ц32;
      поки х < розмір як ц32 {
        ціль перший_байт = значення[х] & 0ш3Д;
        ціль розмір_символа = дізнатись_розмір_символа_юнікоду(перший_байт як п8);
        якщо розмір_символа == 0 {
          х = х + 1;
        } інакше {
          довжина = довжина + 1;
          х = х + розмір_символа як ц32;
        }
      }
      вернути довжина;
    }

    місцева дія ю8_в_ю16(вхід: памʼять<п8>, розмір_входу: позитивне, вихід: памʼять<п16>): позитивне {
      змінна розмір_виходу: позитивне = 0;
      змінна х: позитивне = 0;
      поки х < розмір_входу {
        ціль перший_байт = вхід[х];
        ціль розмір_символа = дізнатись_розмір_символа_юнікоду(перший_байт);
        якщо розмір_символа == 1 {
          вихід[розмір_виходу] = (перший_байт & 0ш7Д) як п16;
          розмір_виходу = розмір_виходу + 1;
        }
        якщо розмір_символа == 2 {
          ціль другий_байт = вхід[х + 1];
          вихід[розмір_виходу] = (((перший_байт & 0ш1Д) як п16) << 6) | ((другий_байт & 0ш3Д) як п16);
          розмір_виходу = розмір_виходу + 1;
          х = х + 1;
        }
        якщо розмір_символа == 3 {
          ціль другий_байт = вхід[х + 1];
          ціль третій_байт = вхід[х + 2];
          вихід[розмір_виходу] = (((перший_байт & 0ш0Д) як п16) << 12) | (((другий_байт & 0ш3Д) як п16) << 6) | ((третій_байт & 0ш3Д) як п16);
          розмір_виходу = розмір_виходу + 1;
          х = х + 2;
        }
        якщо розмір_символа == 4 {
          ціль другий_байт = вхід[х + 1];
          ціль третій_байт = вхід[х + 2];
          ціль четвертий_байт = вхід[х + 3];
          змінна код_першої_частини = (п32(перший_байт & п8(0ш0Д)) << п32(18)) | (п32(другий_байт & п8(0ш3Д)) << п32(12)) | (п32(третій_байт & п8(0ш3Д)) << п32(6)) | п32(четвертий_байт & п8(0ш3Д));
          код_першої_частини = код_першої_частини - 0ш10000;
          вихід[розмір_виходу] = (п32(0шГ800) + ((код_першої_частини >> 10) & 0ш3ДД)) як п16;
          вихід[розмір_виходу + 1] = (п32(0шГВ00) + (код_першої_частини & 0ш3ДД)) як п16;
          розмір_виходу = розмір_виходу + 2;
          х = х + 3;
        }
        х = х + 1;
      }
      вернути розмір_виходу;
    }

    місцева дія ю8_в_ю32(вхід: памʼять<п8>, розмір_входу: позитивне, вихід: памʼять<п32>): позитивне {
      змінна розмір_виходу: позитивне = 0;
      змінна х: позитивне = 0;
      поки х < розмір_входу {
        ціль перший_байт = вхід[х];
        ціль розмір_символа = дізнатись_розмір_символа_юнікоду(перший_байт);
        якщо розмір_символа == 1 {
          вихід[розмір_виходу] = п32(перший_байт & п8(0ш7Д));
          розмір_виходу = розмір_виходу + 1;
        }
        якщо розмір_символа == 2 {
          ціль другий_байт = вхід[х + 1];
          вихід[розмір_виходу] = (п32(перший_байт & п8(0ш1Д)) << п32(6)) | п32(другий_байт & п8(0ш3Д));
          розмір_виходу = розмір_виходу + 1;
          х = х + 1;
        }
        якщо розмір_символа == 3 {
          ціль другий_байт = вхід[х + 1];
          ціль третій_байт = вхід[х + 2];
          вихід[розмір_виходу] = (п32(перший_байт & п8(0ш0Д)) << п32(12)) | (п32(другий_байт & п8(0ш3Д)) << п32(6)) | п32(третій_байт & п8(0ш3Д));
          розмір_виходу = розмір_виходу + 1;
          х = х + 2;
        }
        якщо розмір_символа == 4 {
          ціль другий_байт = вхід[х + 1];
          ціль третій_байт = вхід[х + 2];
          ціль четвертий_байт = вхід[х + 3];
          вихід[розмір_виходу] = (п32(перший_байт & п8(0ш0Д)) << п32(18)) | (п32(другий_байт & п8(0ш3Д)) << п32(12)) | (п32(третій_байт & п8(0ш3Д)) << п32(6)) | п32(четвертий_байт & п8(0ш3Д));
          розмір_виходу = розмір_виходу + 1;
          х = х + 3;
        }
        х = х + 1;
      }
      вернути розмір_виходу;
    }

    // ...
  }
}

зовнішня дія ___біб__юнікод__ю8_в_ю16___(вхід: памʼять<п8>, розмір_входу: позитивне, вихід: памʼять<п16>): позитивне {
  вернути біб::юнікод::ю8_в_ю16(вхід, розмір_входу, вихід);
}

зовнішня дія ___біб__юнікод__ю8_в_ю32___(вхід: памʼять<п8>, розмір_входу: позитивне, вихід: памʼять<п32>): позитивне {
  вернути біб::юнікод::ю8_в_ю32(вхід, розмір_входу, вихід);
}