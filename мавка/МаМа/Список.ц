взяти визначення МаМа;

секція мама {
  дія нативна_дія_перебору_списку_далі(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    ціль обʼєкт_перебору = обʼєкт_нативної_дії.дія_я;
    ціль обʼєкт_списку = обʼєкт_перебору.перебір_списку_список;
    ціль позиція = обʼєкт_перебору.перебір_списку_позиція;
    якщо позиція >= обʼєкт_списку.список_елементи.довжина {
      вернути результат_значення(Значення { ЗНі });
    }
    ціль значення = обʼєкт_списку.список_елементи.дані[позиція];
    змінити_властивість_обʼєкта(обʼєкт_перебору, отримати_або_створити_слово(М, ю8"значення"), значення);
    обʼєкт_перебору.перебір_списку_позиція = позиція + 1;
    вернути результат_значення(Значення { ЗТак });
  }

  дія нативна_дія_вернути_дія_я(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо обʼєкт_нативної_дії.дія_я == пусто {
      вернути результат_значення(Значення { ЗПусто });
    }
    вернути результат_значення(Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії.дія_я });
  }

  дія нативна_дія_методу_структури_список_чародія_перебір(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    ціль обʼєкт_перебору = створити_обʼєкт(М, ОПеребірСписку);
    обʼєкт_перебору.с = М.структура_перебір;
    ціль обʼєкт_нативної_дії_вернути_дія_я = створити_обʼєкт_нативна_дія(М, нативна_дія_вернути_дія_я);
    обʼєкт_нативної_дії_вернути_дія_я.дія_я = обʼєкт_перебору;
    змінити_властивість_обʼєкта(обʼєкт_перебору, отримати_або_створити_слово(М, ю8"чародія_перебір"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_вернути_дія_я });
    обʼєкт_перебору.перебір_списку_список = обʼєкт_нативної_дії.дія_я;
    обʼєкт_перебору.перебір_списку_позиція = 0;
    ціль обʼєкт_нативної_дії_далі = створити_обʼєкт_нативна_дія(М, нативна_дія_перебору_списку_далі);
    обʼєкт_нативної_дії_далі.дія_слово = отримати_або_створити_слово(М, ю8"далі");
    обʼєкт_нативної_дії_далі.дія_я = обʼєкт_перебору;
    змінити_властивість_обʼєкта(обʼєкт_перебору, отримати_або_створити_слово(М, ю8"далі"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_далі });
    вернути результат_значення(Значення { ЗОбʼєкт, дані = обʼєкт_перебору });
  }

  дія нативна_дія_методу_структури_список_чародія_отримати(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина != 1 {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення_першого_аргументу = аргументи.дані[0].значення;
    якщо значення_першого_аргументу.тип != ЗЧисло {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль позиція_дійсне = значення_першого_аргументу.дані як дійсне;
    ціль позиція = позиція_дійсне як позитивне;
    ціль обʼєкт_списку = обʼєкт_нативної_дії.дія_я;
    якщо позиція < 0 {
      вернути результат_значення(Значення { ЗПусто });
    }
    якщо позиція >= обʼєкт_списку.список_елементи.довжина {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення = обʼєкт_списку.список_елементи.дані[позиція];
    вернути результат_значення(значення);
  }

  дія нативна_дія_методу_структури_список_чародія_покласти(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина != 2 {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення_першого_аргументу = аргументи.дані[0].значення;
    якщо значення_першого_аргументу.тип != ЗЧисло {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль позиція_дійсне = значення_першого_аргументу.дані як дійсне;
    ціль позиція = позиція_дійсне як позитивне;
    ціль значення_другого_аргументу = аргументи.дані[1].значення;
    ціль обʼєкт_списку = обʼєкт_нативної_дії.дія_я;
    якщо позиція < 0 {
      вернути результат_значення(Значення { ЗПусто });
    }
    якщо позиція >= обʼєкт_списку.список_елементи.довжина {
      змінна х = позиція;
      поки обʼєкт_списку.список_елементи.довжина <= х {
        додати_до_вектору<Значення>(обʼєкт_списку.список_елементи, Значення { ЗПусто });
      }
    }
    обʼєкт_списку.список_елементи.дані[позиція] = значення_другого_аргументу;
    вернути результат_значення(Значення { ЗПусто });
  }

  дія нативна_дія_методу_структури_список_чародія_містить(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина != 1 {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення_першого_аргументу = аргументи.дані[0].значення;
    ціль обʼєкт_списку = обʼєкт_нативної_дії.дія_я;
    змінна х = 0ц32;
    поки х < обʼєкт_списку.список_елементи.довжина як ц32 {
      ціль результат_чи_рівно = машина_порівняти_чи_рівно(М, місцезнаходження, значення_першого_аргументу, обʼєкт_списку.список_елементи.дані[х]);
      якщо результат_чи_рівно.успіх == 0 {
        вернути результат_чи_рівно;
      }
      якщо результат_чи_рівно.значення.тип == ЗТак {
        вернути результат_значення(Значення { ЗТак });
      }
      х = х + 1;
    }
    вернути результат_значення(Значення { ЗНі });
  }

  дія нативна_дія_методу_структури_список_сортувати(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина != 1 {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення_першого_аргументу = аргументи.дані[0].значення;
    ціль обʼєкт_списку = обʼєкт_нативної_дії.дія_я;
    ціль результат_сортування = сортувати_вектор_значень_мама(М, місцезнаходження, обʼєкт_списку.список_елементи, значення_першого_аргументу);
    якщо результат_сортування.успіх == 0 {
      вернути результат_сортування;
    }
    вернути результат_значення(Значення { ЗОбʼєкт, дані = обʼєкт_списку });
  }

  дія нативна_дія_методу_структури_список_додати(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина != 1 {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення_першого_аргументу = аргументи.дані[0].значення;
    ціль обʼєкт_списку = обʼєкт_нативної_дії.дія_я;
    додати_до_вектору<Значення>(обʼєкт_нативної_дії.дія_я.список_елементи, значення_першого_аргументу);
    вернути результат_значення(Значення { ЗЧисло, дані = обʼєкт_списку.список_елементи.довжина як дійсне });
  }

  дія нативна_дія_методу_структури_список_забрати(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    ціль обʼєкт_списку = обʼєкт_нативної_дії.дія_я;
    ціль позиція = обʼєкт_нативної_дії.дія_я.список_елементи.довжина - 1;
    якщо позиція < 0 {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення = обʼєкт_нативної_дії.дія_я.список_елементи.дані[позиція];
    обʼєкт_нативної_дії.дія_я.список_елементи.довжина = обʼєкт_нативної_дії.дія_я.список_елементи.довжина - 1;
    вернути результат_значення(значення);
  }

  дія нативна_дія_методу_структури_список_фільтр(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина != 1 {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення_першого_аргументу = аргументи.дані[0].значення;
    ціль обʼєкт_списку = обʼєкт_нативної_дії.дія_я;
    ціль обʼєкт_нового_списку = створити_обʼєкт_список(М);
    покласти_на_стопку(М, Значення { ЗОбʼєкт, дані = обʼєкт_нового_списку });
//    відкласти забрати_зі_стопки(М);
    змінна х = 0ц32;
    поки х < обʼєкт_списку.список_елементи.довжина як ц32 {
      ціль значення = обʼєкт_списку.список_елементи.дані[х];
      покласти_на_стопку(М, значення);
      покласти_на_стопку(М, Значення { ЗЧисло, дані = х як дійсне });
      ціль результат_фільтрації = машина_виконати_дію(М, місцезнаходження, значення_першого_аргументу, 2);
      якщо результат_фільтрації.успіх == 0 {
        вернути результат_фільтрації;
      }
      якщо результат_фільтрації.значення.тип == ЗТак {
        додати_до_вектору<Значення>(обʼєкт_нового_списку.список_елементи, значення);
      }
      х = х + 1;
    }
    вернути результат_значення(Значення { ЗОбʼєкт, дані = обʼєкт_нового_списку });
  }

  дія нативна_дія_методу_структури_список_знайти(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина != 1 {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення_першого_аргументу = аргументи.дані[0].значення;
    ціль обʼєкт_списку = обʼєкт_нативної_дії.дія_я;
    змінна х = 0ц32;
    поки х < обʼєкт_списку.список_елементи.довжина як ц32 {
      ціль значення = обʼєкт_списку.список_елементи.дані[х];
      покласти_на_стопку(М, значення);
      покласти_на_стопку(М, Значення { ЗЧисло, дані = х як дійсне });
      ціль результат_знайти = машина_виконати_дію(М, місцезнаходження, значення_першого_аргументу, 2);
      якщо результат_знайти.успіх == 0 {
        вернути результат_знайти;
      }
      якщо результат_знайти.значення.тип == ЗТак {
        вернути результат_значення(значення);
      }
      х = х + 1;
    }
    вернути результат_значення(Значення { ЗПусто });
  }

  дія нативна_дія_методу_структури_список_знайти_позицію(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина != 1 {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення_першого_аргументу = аргументи.дані[0].значення;
    ціль обʼєкт_списку = обʼєкт_нативної_дії.дія_я;
    змінна х = 0ц32;
    поки х < обʼєкт_списку.список_елементи.довжина як ц32 {
      ціль значення = обʼєкт_списку.список_елементи.дані[х];
      покласти_на_стопку(М, значення);
      ціль результат_знайти = машина_виконати_дію(М, місцезнаходження, значення_першого_аргументу, 1);
      якщо результат_знайти.успіх == 0 {
        вернути результат_знайти;
      }
      якщо результат_знайти.значення.тип == ЗТак {
        вернути результат_значення(Значення { ЗЧисло, дані = х як дійсне });
      }
      х = х + 1;
    }
    вернути результат_значення(Значення { ЗЧисло, дані = 0.0д64-1.0д64 як дійсне });
  }

  дія нативна_дія_методу_структури_список_перетворити(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина != 1 {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення_першого_аргументу = аргументи.дані[0].значення;
    ціль обʼєкт_списку = обʼєкт_нативної_дії.дія_я;
    ціль обʼєкт_нового_списку = створити_обʼєкт_список(М);
    покласти_на_стопку(М, Значення { ЗОбʼєкт, дані = обʼєкт_нового_списку });
//    відкласти забрати_зі_стопки(М);
    змінна х = 0ц32;
    поки х < обʼєкт_списку.список_елементи.довжина як ц32 {
      ціль значення = обʼєкт_списку.список_елементи.дані[х];
      покласти_на_стопку(М, значення);
      покласти_на_стопку(М, Значення { ЗЧисло, дані = х як дійсне });
      ціль результат_перетворення = машина_виконати_дію(М, місцезнаходження, значення_першого_аргументу, 2);
      якщо результат_перетворення.успіх == 0 {
        вернути результат_перетворення;
      }
      додати_до_вектору<Значення>(обʼєкт_нового_списку.список_елементи, результат_перетворення.значення);
      х = х + 1;
    }
    вернути результат_значення(Значення { ЗОбʼєкт, дані = обʼєкт_нового_списку });
  }

  дія нативна_дія_методу_структури_список_обернути(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    ціль обʼєкт_списку = обʼєкт_нативної_дії.дія_я;
    обернути_вектор<Значення>(обʼєкт_списку.список_елементи);
    вернути результат_значення(Значення { ЗОбʼєкт, дані = обʼєкт_списку });
  }

  дія нативна_дія_методу_структури_список_зріз(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина != 2 {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення_першого_аргументу = аргументи.дані[0].значення;
    якщо значення_першого_аргументу.тип != ЗЧисло {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення_другого_аргументу = аргументи.дані[1].значення;
    якщо значення_другого_аргументу.тип != ЗЧисло {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль обʼєкт_списку = обʼєкт_нативної_дії.дія_я;
    ціль обʼєкт_нового_списку = створити_обʼєкт_список(М);
    змінна х = (значення_першого_аргументу.дані як дійсне) як позитивне;
    змінна у = (значення_другого_аргументу.дані як дійсне) як позитивне;
    якщо х < 0 {
      вернути результат_значення(Значення { ЗПусто });
    }
    якщо у < 0 {
      вернути результат_значення(Значення { ЗПусто });
    }
    якщо у >= обʼєкт_списку.список_елементи.довжина {
      у = обʼєкт_списку.список_елементи.довжина;
    }
    поки х < у {
      додати_до_вектору<Значення>(обʼєкт_нового_списку.список_елементи, обʼєкт_списку.список_елементи.дані[х]);
      х = х + 1;
    }
    вернути результат_значення(Значення { ЗОбʼєкт, дані = обʼєкт_нового_списку });
  }

  дія обʼєкт_списку_отримати_властивість_дія(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт: комірка<Обʼєкт>, слово_назви: комірка<Слово>): Результат {
    якщо слово_назви == М.база_слів.довжина {
      вернути результат_значення(Значення { ЗЧисло, дані = обʼєкт.список_елементи.довжина як дійсне });
    }
    вернути обʼєкт_отримати_властивість_дія(М, місцезнаходження, обʼєкт, слово_назви);
  }

  дія обʼєкт_списку_змінити_властивість_дія(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт: комірка<Обʼєкт>, слово_назви: комірка<Слово>, значення: Значення): Результат {
    вернути результат_помилка_обʼєкт(створити_помилку_П2_неможливо_змінити_властивість(М, місцезнаходження, слово_назви, Значення { ЗОбʼєкт, дані = обʼєкт }));
  }

  місцева дія створити_обʼєкт_список(М: комірка<Машина>): комірка<Обʼєкт> {
    ціль обʼєкт_списку = створити_обʼєкт(М, ОСписок);
    обʼєкт_списку.с = М.структура_список;
    обʼєкт_списку.отримати_властивість = обʼєкт_списку_отримати_властивість_дія;
    обʼєкт_списку.змінити_властивість = обʼєкт_списку_змінити_властивість_дія;
    обʼєкт_списку.список_елементи = створити_вектор<Значення>();
    вернути обʼєкт_списку;
  }

  дія структура_текст_виконати_дія(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    вернути результат_помилка_обʼєкт(створити_помилку_П21_неможливо_виконати(М, місцезнаходження, Значення { ЗОбʼєкт, дані = обʼєкт }));
  }

  дія структура_список_виконати_дія(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 1 {
      вернути результат_помилка_обʼєкт(створити_помилку_П21_неможливо_виконати(М, місцезнаходження, Значення { ЗОбʼєкт, дані = обʼєкт }));
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
    якщо значення_першого_аргумента.тип == ЗОбʼєкт {
      ціль обʼєкт_значення_першого_аргумента = значення_першого_аргумента.дані як комірка<Обʼєкт>;
      якщо обʼєкт_значення_першого_аргумента.тип == ОСписок {
        вернути результат_значення(значення_першого_аргумента);
      }
      ціль результат_отримання_чародії_список = обʼєкт_значення_першого_аргумента.отримати_властивість(М, місцезнаходження, обʼєкт_значення_першого_аргумента, отримати_або_створити_слово(М, ю8"чародія_список"));
      якщо результат_отримання_чародії_список.успіх == 0 {
        вернути результат_отримання_чародії_список;
      }
      вернути машина_виконати_дію(М, місцезнаходження, результат_отримання_чародії_список.значення, 0);
    }
    вернути результат_помилка_обʼєкт(створити_помилку_П21_неможливо_виконати(М, місцезнаходження, Значення { ЗОбʼєкт, дані = обʼєкт }));
  }

  місцева дія створити_структуру_список(М: комірка<Машина>): комірка<Обʼєкт> {
    ціль слово = отримати_або_створити_слово(М, ю8"список");
    ціль обʼєкт_структури = створити_обʼєкт_структура(М, слово, М.структура_обʼєкт);
    обʼєкт_структури.с = М.структура_структура;
    обʼєкт_структури.виконати_як_дію = структура_список_виконати_дія;
    ціль обʼєкт_нативної_дії_чародія_перебір = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_список_чародія_перебір));
    обʼєкт_нативної_дії_чародія_перебір.дія_слово = отримати_або_створити_слово(М, ю8"чародія_перебір");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"чародія_перебір"), обʼєкт_нативної_дії_чародія_перебір);
    ціль обʼєкт_нативної_дії_чародія_отримати = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_список_чародія_отримати));
    обʼєкт_нативної_дії_чародія_отримати.дія_слово = отримати_або_створити_слово(М, ю8"чародія_отримати");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"чародія_отримати"), обʼєкт_нативної_дії_чародія_отримати);
    ціль обʼєкт_нативної_дії_чародія_покласти = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_список_чародія_покласти));
    обʼєкт_нативної_дії_чародія_покласти.дія_слово = отримати_або_створити_слово(М, ю8"чародія_покласти");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"чародія_покласти"), обʼєкт_нативної_дії_чародія_покласти);
    ціль обʼєкт_нативної_дії_чародія_містить = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_список_чародія_містить));
    обʼєкт_нативної_дії_чародія_містить.дія_слово = отримати_або_створити_слово(М, ю8"чародія_містить");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"чародія_містить"), обʼєкт_нативної_дії_чародія_містить);
    ціль обʼєкт_нативної_дії_сортувати = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_список_сортувати));
    обʼєкт_нативної_дії_сортувати.дія_слово = отримати_або_створити_слово(М, ю8"сортувати");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"сортувати"), обʼєкт_нативної_дії_сортувати);
    ціль обʼєкт_нативної_дії_додати = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_список_додати));
    обʼєкт_нативної_дії_додати.дія_слово = отримати_або_створити_слово(М, ю8"додати");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"додати"), обʼєкт_нативної_дії_додати);
    ціль обʼєкт_нативної_дії_забрати = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_список_забрати));
    обʼєкт_нативної_дії_забрати.дія_слово = отримати_або_створити_слово(М, ю8"забрати");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"забрати"), обʼєкт_нативної_дії_забрати);
    ціль обʼєкт_нативної_дії_фільтр = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_список_фільтр));
    обʼєкт_нативної_дії_фільтр.дія_слово = отримати_або_створити_слово(М, ю8"фільтр");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"фільтр"), обʼєкт_нативної_дії_фільтр);
    ціль обʼєкт_нативної_дії_знайти = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_список_знайти));
    обʼєкт_нативної_дії_знайти.дія_слово = отримати_або_створити_слово(М, ю8"знайти");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"знайти"), обʼєкт_нативної_дії_знайти);
    ціль обʼєкт_нативної_дії_знайти_позицію = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_список_знайти_позицію));
    обʼєкт_нативної_дії_знайти_позицію.дія_слово = отримати_або_створити_слово(М, ю8"знайти_позицію");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"знайти_позицію"), обʼєкт_нативної_дії_знайти_позицію);
    ціль обʼєкт_нативної_дії_перетворити = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_список_перетворити));
    обʼєкт_нативної_дії_перетворити.дія_слово = отримати_або_створити_слово(М, ю8"перетворити");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"перетворити"), обʼєкт_нативної_дії_перетворити);
    ціль обʼєкт_нативної_дії_обернути = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_список_обернути));
    обʼєкт_нативної_дії_обернути.дія_слово = отримати_або_створити_слово(М, ю8"обернути");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"обернути"), обʼєкт_нативної_дії_обернути);
    ціль обʼєкт_нативної_дії_зріз = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_список_зріз));
    обʼєкт_нативної_дії_зріз.дія_слово = отримати_або_створити_слово(М, ю8"зріз");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"зріз"), обʼєкт_нативної_дії_зріз);
    вернути зробити_безсмертним(М, обʼєкт_структури);
  }
}