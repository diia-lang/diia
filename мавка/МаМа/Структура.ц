взяти визначення МаМа;

секція мама {
  дія обʼєкт_структури_отримати_властивість_дія(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт: комірка<Обʼєкт>, слово_назви: комірка<Слово>): Результат {
    якщо слово_назви == М.база_слів.назва {
      змінна обʼєкт_тексту: комірка<Обʼєкт> = пусто;
      якщо обʼєкт.структура_слово == пусто {
        обʼєкт_тексту = створити_обʼєкт_текст(М, ю8"");
      } інакше {
        обʼєкт_тексту = створити_обʼєкт_текст(М, обʼєкт.структура_слово.назва);
      }
      вернути результат_значення(Значення { ЗОбʼєкт, дані = обʼєкт_тексту });
    }
    вернути обʼєкт_отримати_властивість_дія(М, місцезнаходження, обʼєкт, слово_назви);
  }

  дія обʼєкт_структури_змінити_властивість_дія(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт: комірка<Обʼєкт>, слово_назви: комірка<Слово>, значення: Значення): Результат {
    вернути результат_помилка_обʼєкт(створити_помилку_П2_неможливо_змінити_властивість(М, місцезнаходження, слово_назви, Значення { ЗОбʼєкт, дані = обʼєкт }));
  }

  місцева дія створити_обʼєкт_структура(М: комірка<Машина>, слово_назви: комірка<Слово>, обʼєкт_предка: комірка<Обʼєкт>): комірка<Обʼєкт> {
    ціль обʼєкт_структури = створити_обʼєкт(М, ОСтруктура);
    обʼєкт_структури.с = М.структура_структура;
    обʼєкт_структури.отримати_властивість = обʼєкт_структури_отримати_властивість_дія;
    обʼєкт_структури.змінити_властивість = обʼєкт_структури_змінити_властивість_дія;
    обʼєкт_структури.структура_слово = слово_назви;
    якщо обʼєкт_предка != пусто {
      обʼєкт_структури.структура_предок = обʼєкт_предка;
    } інакше {
      обʼєкт_структури.структура_предок = М.структура_обʼєкт;
    }
    якщо обʼєкт_предка != пусто {
      обʼєкт_структури.структура_параметри = клонувати_параметри_структури(обʼєкт_предка.структура_параметри);
      обʼєкт_структури.структура_кількість_параметрів_від_предка = обʼєкт_структури.структура_параметри.довжина як ц64;
    } інакше {
      обʼєкт_структури.структура_параметри = створити_вектор<ПараметрСтруктури>();
    }
    обʼєкт_структури.структура_методи = створити_карту<комірка<Слово>, комірка<Обʼєкт>>(порівняти_слова);
    вернути обʼєкт_структури;
  }

  місцева дія клонувати_параметри_структури(параметри: комірка<вектор<ПараметрСтруктури>>): комірка<вектор<ПараметрСтруктури>> {
    вернути клонувати_вектор<ПараметрСтруктури>(параметри);
  }

  місцева дія отримати_метод_структури_за_словом(обʼєкт: комірка<Обʼєкт>, слово: комірка<Слово>): комірка<Обʼєкт> {
    якщо перевірити_чи_карта_містить_значення<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт.структура_методи, слово) != 0 {
      вернути отримати_значення_з_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт.структура_методи, слово, пусто);
    }
    якщо обʼєкт.структура_предок != пусто {
      вернути отримати_метод_структури_за_словом(обʼєкт.структура_предок, слово);
    }
    вернути пусто;
  }

  місцева дія отримати_параметр_структури_за_словом(обʼєкт_структури: комірка<Обʼєкт>, слово_назви: комірка<Слово>): комірка<ПараметрСтруктури> {
    змінна х = 0ц32;
    поки х < обʼєкт_структури.структура_параметри.довжина як ц32 {
      якщо обʼєкт_структури.структура_параметри.дані[х].слово == слово_назви {
        вернути обʼєкт_структури.структура_параметри.дані[х]::адреса;
      }
      х = х + 1;
    }
    вернути пусто;
  }

  місцева дія отримати_назву_структури(М: комірка<Машина>, значення: Значення): памʼять<п8> {
    якщо значення.тип == ЗПусто {
      вернути ю8"пусто";
    }
    якщо значення.тип == ЗТак {
      вернути ю8"логічне";
    }
    якщо значення.тип == ЗНі {
      вернути ю8"логічне";
    }
    якщо значення.тип == ЗЧисло {
      вернути ю8"число";
    }
    якщо значення.тип == ЗСимвол {
      вернути ю8"символ";
    }
    якщо значення.тип == ЗОбʼєкт {
      якщо (значення.дані як комірка<Обʼєкт>).с != пусто {
        якщо (значення.дані як комірка<Обʼєкт>).с.структура_слово != пусто {
          вернути (значення.дані як комірка<Обʼєкт>).с.структура_слово.назва;
        }
        вернути ю8"";
      }
      вернути ю8"обʼєкт";
    }
    якщо значення.тип == ЗСлово {
      вернути ю8"слово";
    }
    вернути ю8"невідоме_значення";
  }

  дія структура_структури_виконати_дія(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    вернути результат_помилка_обʼєкт(створити_помилку_П21_неможливо_виконати(М, місцезнаходження, Значення { ЗОбʼєкт, дані = обʼєкт }));
  }

  дія нативна_дія_методу_структури_структура_дізнатись(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина != 1 {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення_першого_аргументу = аргументи.дані[0].значення;
    якщо значення_першого_аргументу.тип == ЗПусто {
      вернути результат_значення(Значення { ЗПусто });
    }
    якщо значення_першого_аргументу.тип == ЗТак {
      вернути результат_значення(Значення { ЗОбʼєкт, дані = М.структура_логічне });
    }
    якщо значення_першого_аргументу.тип == ЗНі {
      вернути результат_значення(Значення { ЗОбʼєкт, дані = М.структура_логічне });
    }
    якщо значення_першого_аргументу.тип == ЗЧисло {
      вернути результат_значення(Значення { ЗОбʼєкт, дані = М.структура_число });
    }
    якщо значення_першого_аргументу.тип == ЗСимвол {
      вернути результат_значення(Значення { ЗОбʼєкт, дані = М.структура_символ });
    }
    якщо значення_першого_аргументу.тип == ЗОбʼєкт {
      якщо (значення_першого_аргументу.дані як комірка<Обʼєкт>).с != пусто {
        вернути результат_значення(Значення { ЗОбʼєкт, дані = (значення_першого_аргументу.дані як комірка<Обʼєкт>).с });
      }
    }
    вернути результат_значення(Значення { ЗОбʼєкт, дані = М.структура_обʼєкт });
  }

  місцева дія створити_структуру_структура(М: комірка<Машина>): комірка<Обʼєкт> {
    ціль слово = отримати_або_створити_слово(М, ю8"Структура");
    ціль обʼєкт_структури = створити_обʼєкт_структура(М, слово, М.структура_обʼєкт);
    обʼєкт_структури.виконати_як_дію = структура_структури_виконати_дія;
    ціль обʼєкт_нативної_дії_дізнатись = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_структура_дізнатись));
    обʼєкт_нативної_дії_дізнатись.дія_слово = отримати_або_створити_слово(М, ю8"дізнатись");
    змінити_властивість_обʼєкта(обʼєкт_структури, отримати_або_створити_слово(М, ю8"дізнатись"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_дізнатись });
    вернути зробити_безсмертним(М, обʼєкт_структури);
  }
}