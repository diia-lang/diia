взяти визначення МаМа;

секція мама {
  місцева дія вказівка_створити_пусто(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВСтворитиПусто, місцезнаходження });
  }

  місцева дія вказівка_створити_так(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВСтворитиТак, місцезнаходження });
  }

  місцева дія вказівка_створити_ні(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВСтворитиНі, місцезнаходження });
  }

  місцева дія вказівка_створити_число(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, значення: дійсне) {
    додати_вказівку(М, код, Вказівка { ВСтворитиЧисло, місцезнаходження, дані = значення });
  }

  місцева дія вказівка_створити_символ(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, значення: п32) {
    додати_вказівку(М, код, Вказівка { ВСтворитиСимвол, місцезнаходження, дані = значення });
  }

  місцева дія вказівка_створити_слово(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, слово: комірка<Слово>) {
    додати_вказівку(М, код, Вказівка { ВСтворитиСлово, місцезнаходження, дані = слово });
  }

  місцева дія вказівка_покласти_обʼєкт(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт: комірка<Обʼєкт>) {
    додати_вказівку(М, код, Вказівка { ВПокластиОбʼєкт, місцезнаходження, дані = обʼєкт });
  }

  місцева дія вказівка_покласти_структуру_обʼєкт(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВПокластиСтруктуруОбʼєкт, місцезнаходження });
  }

  місцева дія вказівка_забрати(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВЗабрати, місцезнаходження });
  }

  місцева дія вказівка_визначити_субʼєкт(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, слово_назви: комірка<Слово>) {
    додати_вказівку(М, код, Вказівка { ВВизначитиСубʼєкт, місцезнаходження, дані = слово_назви });
  }

  місцева дія вказівка_звернутись_до_субʼєкта(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, слово_назви: комірка<Слово>) {
    додати_вказівку(М, код, Вказівка { ВЗвернутисьДоСубʼєкта, місцезнаходження, дані = слово_назви });
  }

  місцева дія вказівка_отримати_властивість(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, слово_назви: комірка<Слово>) {
    додати_вказівку(М, код, Вказівка { ВОтриматиВластивість, місцезнаходження, дані = слово_назви });
  }

  місцева дія вказівка_змінити_властивість(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, слово_назви: комірка<Слово>) {
    додати_вказівку(М, код, Вказівка { ВЗмінитиВластивість, місцезнаходження, дані = слово_назви });
  }

  місцева дія вказівка_отримати_елемент(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВОтриматиЕлемент, місцезнаходження });
  }

  місцева дія вказівка_покласти_елемент(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВПокластиЕлемент, місцезнаходження });
  }

  місцева дія вказівка_створити_структуру(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, слово_назви: комірка<Слово>) {
    додати_вказівку(М, код, Вказівка { ВСтворитиСтруктуру, місцезнаходження, дані = слово_назви });
  }

  місцева дія вказівка_зберегти_параметр_структури(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, позиція: позитивне, слово_назви: комірка<Слово>, тип_може_бути_пусто: позитивне, має_значення_за_замовчуванням: позитивне) {
    ціль дані = виділити<ДаніВказівкиЗберегтиПараметрСтруктури>();
    дані.позиція = позиція;
    дані.слово_назви = слово_назви;
    дані.тип_може_бути_пусто = тип_може_бути_пусто;
    дані.має_значення_за_замовчуванням = має_значення_за_замовчуванням;
    додати_вказівку(М, код, Вказівка { ВЗберегтиПараметрСтруктури, місцезнаходження, дані = дані });
  }

  місцева дія вказівка_створити_дію(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, слово_назви: комірка<Слово>, код_тіла: комірка<вектор<Вказівка>>, тип_повернення_може_бути_пусто: позитивне) {
    ціль дані = виділити<ДаніВказівкиСтворитиДію>();
    дані.слово_назви = слово_назви;
    дані.код_тіла = код_тіла;
    дані.тип_повернення_може_бути_пусто = тип_повернення_може_бути_пусто;
    додати_вказівку(М, код, Вказівка { ВСтворитиДію, місцезнаходження, дані = дані });
  }

  місцева дія вказівка_зберегти_параметр_дії(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, позиція: позитивне, слово_назви: комірка<Слово>, тип_може_бути_пусто: позитивне, має_значення_за_замовчуванням: позитивне) {
    ціль дані = виділити<ДаніВказівкиЗберегтиПараметрДії>();
    дані.позиція = позиція;
    дані.слово_назви = слово_назви;
    дані.тип_може_бути_пусто = тип_може_бути_пусто;
    дані.має_значення_за_замовчуванням = має_значення_за_замовчуванням;
    додати_вказівку(М, код, Вказівка { ВЗберегтиПараметрДії, місцезнаходження, дані = дані });
  }

  місцева дія вказівка_вернути(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВВернути, місцезнаходження });
  }

  місцева дія вказівка_створити_дію_для_структури(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВСтворитиДіюДляСтруктури, місцезнаходження });
  }

  місцева дія вказівка_створити_модуль(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, слово_назви: комірка<Слово>, код_тіла: комірка<вектор<Вказівка>>) {
    ціль дані = виділити<ДаніВказівкиСтворитиМодуль>();
    дані.слово_назви = слово_назви;
    дані.код_тіла = код_тіла;
    додати_вказівку(М, код, Вказівка { ВСтворитиМодуль, місцезнаходження, дані = дані });
  }

  місцева дія вказівка_дати(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, слово_назви: комірка<Слово>) {
    додати_вказівку(М, код, Вказівка { ВДати, місцезнаходження, дані = слово_назви });
  }

  місцева дія вказівка_створити_список(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВСтворитиСписок, місцезнаходження });
  }

  місцева дія вказівка_додати_елемент_до_списку(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВДодатиЕлементДоСписку, місцезнаходження });
  }

  місцева дія вказівка_додати_елемент_до_словника(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВДодатиЕлементДоСловника, місцезнаходження });
  }

  місцева дія вказівка_створити_словник(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВСтворитиСловник, місцезнаходження });
  }

  місцева дія вказівка_виконати_дію(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, кількість_аргументів: позитивне) {
    додати_вказівку(М, код, Вказівка { ВВиконатиДію, місцезнаходження, дані = кількість_аргументів });
  }

  місцева дія вказівка_додати(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВДодати, місцезнаходження });
  }

  місцева дія вказівка_відняти(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВВідняти, місцезнаходження });
  }

  місцева дія вказівка_помножити(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВПомножити, місцезнаходження });
  }

  місцева дія вказівка_поділити(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВПоділити, місцезнаходження });
  }

  місцева дія вказівка_поділити_за_модулем(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВПоділитиЗаМодулем, місцезнаходження });
  }

  місцева дія вказівка_поділити_націло(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВПоділитиНаціло, місцезнаходження });
  }

  місцева дія вказівка_піднести_до_степеня(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВПіднестиДоСтепеня, місцезнаходження });
  }

  місцева дія вказівка_двійкове_і(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВДвійковеІ, місцезнаходження });
  }

  місцева дія вказівка_двійкове_або(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВДвійковеАбо, місцезнаходження });
  }

  місцева дія вказівка_двійкове_виключне_або(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВДвійковеВиключнеАбо, місцезнаходження });
  }

  місцева дія вказівка_двійковий_зсув_вліво(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВДвійковийЗсувВліво, місцезнаходження });
  }

  місцева дія вказівка_двійковий_зсув_вправо(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВДвійковийЗсувВправо, місцезнаходження });
  }

  місцева дія вказівка_двійковий_зсув_вправо_з_заповненням(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВДвійковийЗсувВправоЗЗаповненням, місцезнаходження });
  }

  місцева дія вказівка_порівняти_чи_рівно(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВПорівнятиЧиРівно, місцезнаходження });
  }

  місцева дія вказівка_порівняти_чи_більше(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВПорівнятиЧиБільше, місцезнаходження });
  }

  місцева дія вказівка_порівняти_чи_менше(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВПорівнятиЧиМенше, місцезнаходження });
  }

  місцева дія вказівка_порівняти_чи_є(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВПорівнятиЧиЄ, місцезнаходження });
  }

  місцева дія вказівка_порівняти_чи_містить(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВПорівнятиЧиМістить, місцезнаходження });
  }

  місцева дія вказівка_зробити_відʼємним(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВЗробитиВідʼємним, місцезнаходження });
  }

  місцева дія вказівка_двійкове_ні(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВДвійковеНі, місцезнаходження });
  }

  місцева дія вказівка_заперечити(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВЗаперечити, місцезнаходження });
  }

  місцева дія вказівка_взяти(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВВзяти, місцезнаходження });
  }

  місцева дія вказівка_стрибнути(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, позиція: позитивне) {
    додати_вказівку(М, код, Вказівка { ВСтрибнути, місцезнаходження, дані = позиція });
  }

  місцева дія вказівка_стрибнути_якщо_ні(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, позиція: позитивне) {
    додати_вказівку(М, код, Вказівка { ВСтрибнутиЯкщоНі, місцезнаходження, дані = позиція });
  }

  місцева дія вказівка_стрибнути_якщо_ні_х(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, позиція: позитивне) {
    додати_вказівку(М, код, Вказівка { ВСтрибнутиЯкщоНіХ, місцезнаходження, дані = позиція });
  }

  місцева дія вказівка_стрибнути_якщо_так(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, позиція: позитивне) {
    додати_вказівку(М, код, Вказівка { ВСтрибнутиЯкщоТак, місцезнаходження, дані = позиція });
  }

  місцева дія вказівка_стрибнути_якщо_так_х(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, позиція: позитивне) {
    додати_вказівку(М, код, Вказівка { ВСтрибнутиЯкщоТакХ, місцезнаходження, дані = позиція });
  }

  місцева дія вказівка_почати_спробу(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, позиція: позитивне, слово_назви_субʼєкта_зловити: комірка<Слово>) {
    ціль дані = виділити<ДаніВказівкиПочатиСпробу>();
    дані.позиція = позиція;
    дані.слово_назви_субʼєкта_зловити = слово_назви_субʼєкта_зловити;
    додати_вказівку(М, код, Вказівка { ВПочатиСпробу, місцезнаходження, дані = дані });
  }

  місцева дія вказівка_закінчити_спробу(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>, позиція: позитивне) {
    додати_вказівку(М, код, Вказівка { ВЗакінчитиСпробу, місцезнаходження, дані = позиція });
  }

  місцева дія вказівка_впасти(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВВпасти, місцезнаходження });
  }

  // дублювати значення стопки
  місцева дія вказівка_дублювати(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВДублювати, місцезнаходження });
  }

  // дублювати попереднє (с-1) значення зі стопки
  місцева дія вказівка_дублювати__1(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВДублювати_1, місцезнаходження });
  }

  // дублювати с-2 значення зі стопки
  місцева дія вказівка_дублювати__2(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВДублювати_2, місцезнаходження });
  }

  // скопілювати значення зі стопки на місце с-2
  місцева дія вказівка_скопіювати__2(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВСкопіювати_2, місцезнаходження });
  }

  місцева дія вказівка_отримати_перебір(М: комірка<Машина>, код: комірка<вектор<Вказівка>>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_вказівку(М, код, Вказівка { ВОтриматиПеребір, місцезнаходження });
  }

  місцева дія друк_вказівка(вказівка: Вказівка) {
    якщо вказівка.тип == ВПокластиСтруктуруОбʼєкт {
      біб::друк_ю8(ю8"ВПокластиСтруктуруОбʼєкт");
    } інакше якщо вказівка.тип == ВЗабрати {
      біб::друк_ю8(ю8"ВЗабрати");
    } інакше якщо вказівка.тип == ВВизначитиСубʼєкт {
      біб::друк_ю8(ю8"ВВизначитиСубʼєкт");
    } інакше якщо вказівка.тип == ВЗвернутисьДоСубʼєкта {
      біб::друк_ю8(ю8"ВЗвернутисьДоСубʼєкта");
    } інакше якщо вказівка.тип == ВОтриматиВластивість {
      біб::друк_ю8(ю8"ВОтриматиВластивість");
    } інакше якщо вказівка.тип == ВЗмінитиВластивість {
      біб::друк_ю8(ю8"ВЗмінитиВластивість");
    } інакше якщо вказівка.тип == ВОтриматиЕлемент {
      біб::друк_ю8(ю8"ВОтриматиЕлемент");
    } інакше якщо вказівка.тип == ВПокластиЕлемент {
      біб::друк_ю8(ю8"ВПокластиЕлемент");
    } інакше якщо вказівка.тип == ВСтворитиСтруктуру {
      біб::друк_ю8(ю8"ВСтворитиСтруктуру");
    } інакше якщо вказівка.тип == ВЗберегтиПараметрСтруктури {
      біб::друк_ю8(ю8"ВЗберегтиПараметрСтруктури");
    } інакше якщо вказівка.тип == ВСтворитиДію {
      біб::друк_ю8(ю8"ВСтворитиДію");
    } інакше якщо вказівка.тип == ВЗберегтиПараметрДії {
      біб::друк_ю8(ю8"ВЗберегтиПараметрДії");
    } інакше якщо вказівка.тип == ВВернути {
      біб::друк_ю8(ю8"ВВернути");
    } інакше якщо вказівка.тип == ВСтворитиДіюДляСтруктури {
      біб::друк_ю8(ю8"ВСтворитиДіюДляСтруктури");
    } інакше якщо вказівка.тип == ВСтворитиМодуль {
      біб::друк_ю8(ю8"ВСтворитиМодуль");
    } інакше якщо вказівка.тип == ВДати {
      біб::друк_ю8(ю8"ВДати");
    } інакше якщо вказівка.тип == ВСтворитиСписок {
      біб::друк_ю8(ю8"ВСтворитиСписок");
    } інакше якщо вказівка.тип == ВДодатиЕлементДоСписку {
      біб::друк_ю8(ю8"ВДодатиЕлементДоСписку");
    } інакше якщо вказівка.тип == ВСтворитиСловник {
      біб::друк_ю8(ю8"ВСтворитиСловник");
    } інакше якщо вказівка.тип == ВДодатиЕлементДоСловника {
      біб::друк_ю8(ю8"ВДодатиЕлементДоСловника");
    } інакше якщо вказівка.тип == ВВиконатиДію {
      біб::друк_ю8(ю8"ВВиконатиДію");
    } інакше якщо вказівка.тип == ВДодати {
      біб::друк_ю8(ю8"ВДодати");
    } інакше якщо вказівка.тип == ВВідняти {
      біб::друк_ю8(ю8"ВВідняти");
    } інакше якщо вказівка.тип == ВПомножити {
      біб::друк_ю8(ю8"ВПомножити");
    } інакше якщо вказівка.тип == ВПоділити {
      біб::друк_ю8(ю8"ВПоділити");
    } інакше якщо вказівка.тип == ВПоділитиЗаМодулем {
      біб::друк_ю8(ю8"ВПоділитиЗаМодулем");
    } інакше якщо вказівка.тип == ВПоділитиНаціло {
      біб::друк_ю8(ю8"ВПоділитиНаціло");
    } інакше якщо вказівка.тип == ВПіднестиДоСтепеня {
      біб::друк_ю8(ю8"ВПіднестиДоСтепеня");
    } інакше якщо вказівка.тип == ВДвійковеІ {
      біб::друк_ю8(ю8"ВДвійковеІ");
    } інакше якщо вказівка.тип == ВДвійковеАбо {
      біб::друк_ю8(ю8"ВДвійковеАбо");
    } інакше якщо вказівка.тип == ВДвійковеВиключнеАбо {
      біб::друк_ю8(ю8"ВДвійковеВиключнеАбо");
    } інакше якщо вказівка.тип == ВДвійковийЗсувВліво {
      біб::друк_ю8(ю8"ВДвійковийЗсувВліво");
    } інакше якщо вказівка.тип == ВДвійковийЗсувВправо {
      біб::друк_ю8(ю8"ВДвійковийЗсувВправо");
    } інакше якщо вказівка.тип == ВДвійковийЗсувВправоЗЗаповненням {
      біб::друк_ю8(ю8"ВДвійковийЗсувВправоЗЗаповненням");
    } інакше якщо вказівка.тип == ВПорівнятиЧиРівно {
      біб::друк_ю8(ю8"ВПорівнятиЧиРівно");
    } інакше якщо вказівка.тип == ВПорівнятиЧиБільше {
      біб::друк_ю8(ю8"ВПорівнятиЧиБільше");
    } інакше якщо вказівка.тип == ВПорівнятиЧиМенше {
      біб::друк_ю8(ю8"ВПорівнятиЧиМенше");
    } інакше якщо вказівка.тип == ВПорівнятиЧиЄ {
      біб::друк_ю8(ю8"ВПорівнятиЧиЄ");
    } інакше якщо вказівка.тип == ВПорівнятиЧиМістить {
      біб::друк_ю8(ю8"ВПорівнятиЧиМістить");
    } інакше якщо вказівка.тип == ВЗробитиВідʼємним {
      біб::друк_ю8(ю8"ВЗробитиВідʼємним");
    } інакше якщо вказівка.тип == ВДвійковеНі {
      біб::друк_ю8(ю8"ВДвійковеНі");
    } інакше якщо вказівка.тип == ВЗаперечити {
      біб::друк_ю8(ю8"ВЗаперечити");
    } інакше якщо вказівка.тип == ВВзяти {
      біб::друк_ю8(ю8"ВВзяти");
    } інакше якщо вказівка.тип == ВСтрибнути {
      біб::друк_ю8(ю8"ВСтрибнути");
    } інакше якщо вказівка.тип == ВСтрибнутиЯкщоНі {
      біб::друк_ю8(ю8"ВСтрибнутиЯкщоНі");
    } інакше якщо вказівка.тип == ВСтрибнутиЯкщоТак {
      біб::друк_ю8(ю8"ВСтрибнутиЯкщоТак");
    } інакше якщо вказівка.тип == ВПочатиСпробу {
      біб::друк_ю8(ю8"ВПочатиСпробу");
    } інакше якщо вказівка.тип == ВЗакінчитиСпробу {
      біб::друк_ю8(ю8"ВЗакінчитиСпробу");
    } інакше якщо вказівка.тип == ВВпасти {
      біб::друк_ю8(ю8"ВВпасти");
    } інакше якщо вказівка.тип == ВДублювати {
      біб::друк_ю8(ю8"ВДублювати");
    } інакше якщо вказівка.тип == ВДублювати_1 {
      біб::друк_ю8(ю8"ВДублювати_1");
    } інакше якщо вказівка.тип == ВДублювати_2 {
      біб::друк_ю8(ю8"ВДублювати_2");
    } інакше якщо вказівка.тип == ВСкопіювати_2 {
      біб::друк_ю8(ю8"ВСкопіювати_2");
    } інакше якщо вказівка.тип == ВОтриматиПеребір {
      біб::друк_ю8(ю8"ВОтриматиПеребір");
    } інакше якщо вказівка.тип == ВСтворитиЧисло {
      біб::друк_ю8(ю8"ВСтворитиЧисло");
    } інакше якщо вказівка.тип == ВСтворитиСимвол {
      біб::друк_ю8(ю8"ВСтворитиСимвол");
    } інакше якщо вказівка.тип == ВСтворитиПусто {
      біб::друк_ю8(ю8"ВСтворитиПусто");
    } інакше якщо вказівка.тип == ВСтворитиТак {
      біб::друк_ю8(ю8"ВСтворитиТак");
    } інакше якщо вказівка.тип == ВСтворитиНі {
      біб::друк_ю8(ю8"ВСтворитиНі");
    } інакше якщо вказівка.тип == ВСтворитиСлово {
      біб::друк_ю8(ю8"ВСтворитиСлово");
    } інакше якщо вказівка.тип == ВПокластиОбʼєкт {
      біб::друк_ю8(ю8"ВПокластиОбʼєкт");
    } інакше якщо вказівка.тип == ВСтрибнутиЯкщоНіХ {
      біб::друк_ю8(ю8"ВСтрибнутиЯкщоНіХ");
    } інакше якщо вказівка.тип == ВСтрибнутиЯкщоТакХ {
      біб::друк_ю8(ю8"ВСтрибнутиЯкщоТакХ");
    } інакше {
      біб::друк_ю8(ю8"Невідома вказівка");
    }
  }
}