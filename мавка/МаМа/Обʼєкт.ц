взяти визначення МаМа;

секція мама {
  місцева дія обʼєкт_отримати_властивість_дія(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт: комірка<Обʼєкт>, слово_назви: комірка<Слово>): Результат {
    якщо перевірити_чи_карта_містить_значення<комірка<Слово>, Значення>(обʼєкт.властивості, слово_назви) != 0 {
      вернути результат_значення(отримати_властивість_обʼєкта(обʼєкт, слово_назви));
    }
    якщо обʼєкт.с != пусто {
      ціль метод = отримати_метод_структури_за_словом(обʼєкт.с, слово_назви);
      якщо метод != пусто {
        ціль нова_дія = клонувати_дію(М, метод);
        нова_дія.дія_я = обʼєкт;
        змінити_властивість_обʼєкта(обʼєкт, слово_назви, Значення { ЗОбʼєкт, дані = нова_дія });
        вернути результат_значення(Значення { ЗОбʼєкт, дані = нова_дія });
      }
    }
    вернути результат_помилка_обʼєкт(створити_помилку_П20_властивість_не_визначено(М, місцезнаходження, слово_назви.назва, Значення { ЗОбʼєкт, дані = обʼєкт }));
  }

  місцева дія обʼєкт_змінити_властивість_дія(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт: комірка<Обʼєкт>, слово_назви: комірка<Слово>, значення: Значення): Результат {
    якщо обʼєкт.с != пусто {
      ціль параметр = отримати_параметр_структури_за_словом(обʼєкт.с, слово_назви);
      якщо параметр != пусто {
        якщо параметр.тип != пусто {
          якщо значення.тип == ЗПусто {
            якщо параметр.тип_може_бути_пусто == ні {
              вернути результат_помилка_обʼєкт(створити_помилку_П6_недопустима_структура_обʼєкта_аргумента(М, місцезнаходження, слово_назви.назва, значення, параметр.тип));
            }
          }
          якщо перевірити_чи_значення_є(М, значення, параметр.тип) == ні {
            вернути результат_помилка_обʼєкт(створити_помилку_П6_недопустима_структура_обʼєкта_аргумента(М, місцезнаходження, слово_назви.назва, значення, параметр.тип));
          }
        }
        змінити_властивість_обʼєкта(обʼєкт, слово_назви, значення);
        вернути результат_значення(значення);
      }
    }
    вернути результат_помилка_обʼєкт(створити_помилку_П20_властивість_не_визначено(М, місцезнаходження, слово_назви.назва, Значення { ЗОбʼєкт, дані = обʼєкт }));
  }

  дія виконати_нативну_дію(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    додати_слід(М, Слід { місцезнаходження, пусто, обʼєкт_дії = обʼєкт_нативної_дії, обʼєкт_модуля = пусто });
    ціль результат = обʼєкт_нативної_дії.нативна_дія(М, місцезнаходження, обʼєкт_нативної_дії, аргументи);
    якщо результат.успіх == 0 {
      вернути результат;
    }
    видалити_останній_слід(М);
    вернути результат;
  }

  дія виконати_звичайну_дію(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    ціль середовище = створити_середовище(М, обʼєкт_дії.дія_зовнішнє_середовище);
    середовище.обʼєкт_дії = обʼєкт_дії;
    якщо обʼєкт_дії.дія_я != пусто {
      ціль слово = отримати_або_створити_слово(М, ю8"я");
      змінити_субʼєкт_в_середовищі(середовище, слово, Значення { ЗОбʼєкт, дані = обʼєкт_дії.дія_я });
    }
    змінна пх = 0;
    поки пх < обʼєкт_дії.дія_параметри.довжина {
      ціль параметр = обʼєкт_дії.дія_параметри.дані[пх];
      змінна х = 0;
      змінна аргумент: Аргумент;
      змінна знайдено_аргумент_з_назвою = 0;
      поки х < аргументи.довжина {
        аргумент = аргументи.дані[х];
        якщо аргумент.слово == параметр.слово {
          знайдено_аргумент_з_назвою = 1;
          х = аргументи.довжина;
        }
        х = х + 1;
      }
      змінна значення: Значення;
      якщо знайдено_аргумент_з_назвою != 0 {
        значення = аргумент.значення;
      } інакше {
        якщо аргументи.довжина > параметр.позиція {
          аргумент = аргументи.дані[параметр.позиція];
          якщо аргумент.слово == пусто {
            значення = аргумент.значення;
          } інакше {
            якщо параметр.має_значення_за_замовчуванням == 1 {
              значення = параметр.значення_за_замовчуванням;
            } інакше {
              вернути результат_помилка_обʼєкт(створити_помилку_П5_пропущено_аргумент(М, місцезнаходження, параметр.слово.назва));
            }
          }
        } інакше {
          якщо параметр.має_значення_за_замовчуванням == 1 {
            значення = параметр.значення_за_замовчуванням;
          } інакше {
            вернути результат_помилка_обʼєкт(створити_помилку_П5_пропущено_аргумент(М, місцезнаходження, параметр.слово.назва));
          }
        }
      }
      якщо параметр.тип != пусто {
        якщо параметр.тип_може_бути_пусто == 1 {
          якщо значення.тип == ЗПусто {
          } інакше {
            якщо перевірити_чи_значення_є(М, значення, параметр.тип) == 0 {
              вернути результат_помилка_обʼєкт(створити_помилку_П6_недопустима_структура_обʼєкта_аргумента(М, місцезнаходження, параметр.слово.назва, значення, параметр.тип));
            }
          }
        } інакше {
          якщо перевірити_чи_значення_є(М, значення, параметр.тип) == 0 {
            вернути результат_помилка_обʼєкт(створити_помилку_П6_недопустима_структура_обʼєкта_аргумента(М, місцезнаходження, параметр.слово.назва, значення, параметр.тип));
          }
        }
      }
      змінити_субʼєкт_в_середовищі(середовище, параметр.слово, значення);
      пх = пх + 1;
    }
    додати_слід(М, Слід { місцезнаходження, середовище, обʼєкт_дії = обʼєкт_дії, обʼєкт_модуля = пусто });
    ціль результат = запустити(М, обʼєкт_дії.дія_вказівки, середовище);
    якщо результат.успіх == 0 {
      вернути результат;
    }
    видалити_останній_слід(М);
    вернути результат;
  }

  дія виконати_створення_обʼєкта_зі_структури(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_структури: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    ціль обʼєкт = створити_обʼєкт(М, ООбʼєкт);
    обʼєкт.с = обʼєкт_структури;
    змінна пх = 0;
    поки пх < обʼєкт_структури.структура_параметри.довжина {
      ціль параметр = обʼєкт_структури.структура_параметри.дані[пх];
      змінна х = 0;
      змінна аргумент: Аргумент;
      змінна знайдено_аргумент_з_назвою = 0;
      поки х < аргументи.довжина {
        аргумент = аргументи.дані[х];
        якщо аргумент.слово == параметр.слово {
          знайдено_аргумент_з_назвою = 1;
          х = аргументи.довжина;
        }
        х = х + 1;
      }
      змінна значення: Значення;
      якщо знайдено_аргумент_з_назвою != 0 {
        значення = аргумент.значення;
      } інакше {
        якщо аргументи.довжина > параметр.позиція {
          аргумент = аргументи.дані[параметр.позиція];
          якщо аргумент.слово == пусто {
            значення = аргумент.значення;
          } інакше {
            якщо параметр.має_значення_за_замовчуванням == 1 {
              значення = параметр.значення_за_замовчуванням;
            } інакше {
              вернути результат_помилка_обʼєкт(створити_помилку_П5_пропущено_аргумент(М, місцезнаходження, параметр.слово.назва));
            }
          }
        } інакше {
          якщо параметр.має_значення_за_замовчуванням == 1 {
            значення = параметр.значення_за_замовчуванням;
          } інакше {
            вернути результат_помилка_обʼєкт(створити_помилку_П5_пропущено_аргумент(М, місцезнаходження, параметр.слово.назва));
          }
        }
      }
      якщо параметр.тип != пусто {
        якщо параметр.тип_може_бути_пусто == 1 {
          якщо значення.тип == ЗПусто {
          } інакше {
            якщо перевірити_чи_значення_є(М, значення, параметр.тип) == 0 {
              вернути результат_помилка_обʼєкт(створити_помилку_П6_недопустима_структура_обʼєкта_аргумента(М, місцезнаходження, параметр.слово.назва, значення, параметр.тип));
            }
          }
        } інакше {
          якщо перевірити_чи_значення_є(М, значення, параметр.тип) == 0 {
            вернути результат_помилка_обʼєкт(створити_помилку_П6_недопустима_структура_обʼєкта_аргумента(М, місцезнаходження, параметр.слово.назва, значення, параметр.тип));
          }
        }
      }
      змінити_властивість_обʼєкта(обʼєкт, параметр.слово, значення);
      пх = пх + 1;
    }
    вернути результат_значення(Значення { ЗОбʼєкт, дані = обʼєкт });
  }

  місцева дія обʼєкт_виконати_дія(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо обʼєкт.тип == ОНативнаДія {
      вернути виконати_нативну_дію(М, місцезнаходження, обʼєкт, аргументи);
    } інакше якщо обʼєкт.тип == ОДія {
      вернути виконати_звичайну_дію(М, місцезнаходження, обʼєкт, аргументи);
    } інакше якщо обʼєкт.тип == ОСтруктура {
      вернути виконати_створення_обʼєкта_зі_структури(М, місцезнаходження, обʼєкт, аргументи);
    } інакше {
      ціль результат = обʼєкт.отримати_властивість(М, місцезнаходження, обʼєкт, отримати_або_створити_слово(М, ю8"чародія_виконати"));
      якщо результат.успіх == 0 {
        вернути результат;
      }
      вернути машина_виконати_дію_з_аргументами(М, місцезнаходження, результат.значення, аргументи);
    }
  }

  місцева дія створити_обʼєкт(М: комірка<Машина>, тип: ціле): комірка<Обʼєкт> {
    ціль обʼєкт = виділити<Обʼєкт>();
    обʼєкт.наступний_обʼєкт = М.утилізатор.початок_обʼєктів;
    обʼєкт.помарковано = 0;
    обʼєкт.безсмертний = 0;
    обʼєкт.тип = тип;
    обʼєкт.с = пусто;
    обʼєкт.властивості = створити_карту<комірка<Слово>, Значення>(порівняти_слова);
    обʼєкт.отримати_властивість = обʼєкт_отримати_властивість_дія;
    обʼєкт.змінити_властивість = обʼєкт_змінити_властивість_дія;
    обʼєкт.виконати = обʼєкт_виконати_дія;
    обʼєкт.місцезнаходження_помилки = пусто;
    обʼєкт.дія_слово = пусто;
    обʼєкт.дія_параметри = пусто;
    обʼєкт.дія_тип_повернення = пусто;
    обʼєкт.дія_тип_повернення_може_бути_пусто = 0;
    обʼєкт.дія_вказівки = пусто;
    обʼєкт.дія_зовнішнє_середовище = пусто;
    обʼєкт.дія_я = пусто;
    обʼєкт.нативна_дія = пусто;
    обʼєкт.нативна_дія_мавки = пусто;
    обʼєкт.структура_слово = пусто;
    обʼєкт.структура_предок = пусто;
    обʼєкт.структура_параметри = пусто;
    обʼєкт.структура_кількість_параметрів_від_предка = 0;
    обʼєкт.структура_методи = пусто;
    обʼєкт.текст_довжина = 0;
    обʼєкт.текст_значення = пусто;
    обʼєкт.список_елементи = пусто;
    обʼєкт.словник_елементи = пусто;
    обʼєкт.перебір_списку_список = пусто;
    обʼєкт.перебір_словника_словник = пусто;
    обʼєкт.перебір_тексту_текст = пусто;
    М.утилізатор.початок_обʼєктів = обʼєкт;
    М.утилізатор.кількість_обʼєктів = М.утилізатор.кількість_обʼєктів + 1;
    вернути обʼєкт;
  }

  місцева дія звільнити_обʼєкт(обʼєкт: комірка<Обʼєкт>) {
    звільнити_карту<комірка<Слово>, Значення>(обʼєкт.властивості);
    якщо обʼєкт.дія_параметри != пусто {
      звільнити_вектор<ПараметрДії>(обʼєкт.дія_параметри);
    }
    якщо обʼєкт.структура_параметри != пусто {
      звільнити_вектор<ПараметрСтруктури>(обʼєкт.структура_параметри);
    }
    якщо обʼєкт.структура_методи != пусто {
      звільнити_карту<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт.структура_методи);
    }
    якщо обʼєкт.текст_значення != пусто {
      звільнити(обʼєкт.текст_значення);
    }
    якщо обʼєкт.список_елементи != пусто {
      звільнити_вектор<Значення>(обʼєкт.список_елементи);
    }
    якщо обʼєкт.словник_елементи != пусто {
      звільнити_карту<Значення, Значення>(обʼєкт.словник_елементи);
    }
    звільнити(обʼєкт);
  }

  місцева дія отримати_властивість_обʼєкта(обʼєкт: комірка<Обʼєкт>, слово: комірка<Слово>): Значення {
    вернути отримати_значення_з_карти<комірка<Слово>, Значення>(обʼєкт.властивості, слово, Значення { ЗПусто });
  }

  місцева дія змінити_властивість_обʼєкта(обʼєкт: комірка<Обʼєкт>, слово: комірка<Слово>, значення: Значення) {
    змінити_значення_карти<комірка<Слово>, Значення>(
      обʼєкт.властивості,
      слово,
      значення
    );
  }

  місцева дія помаркувати_обʼєкт(обʼєкт: комірка<Обʼєкт>) {
    якщо обʼєкт.помарковано == 0 {
//      біб::вивести_ю8(ю8"[МаМа] Маркування обʼєкта ");
//      біб::вивести_комірку(обʼєкт);
//      біб::вивести_ю8(ю8" ");
//      друк_значення(Значення { ЗОбʼєкт, дані = обʼєкт });
      обʼєкт.помарковано = 1;
      якщо обʼєкт.с != пусто {
        помаркувати_обʼєкт(обʼєкт.с);
      }
      змінна х = 0;
      поки х < обʼєкт.властивості.елементи.довжина {
        ціль вл = обʼєкт.властивості.елементи.дані[х];
        ціль значення = вл.значення;
//        біб::вивести_ю8(ю8"[МаМа] Маркування властивості ");
//        біб::друк_ю8(вл.ключ.назва);
        якщо значення.тип == ЗОбʼєкт {
          помаркувати_обʼєкт(значення.дані як комірка<Обʼєкт>);
        }
        х = х + 1;
      }
      якщо обʼєкт.дія_параметри != пусто {
        змінна х = 0;
        поки х < обʼєкт.дія_параметри.довжина {
          ціль параметр_дії = обʼєкт.дія_параметри.дані[х];
          якщо параметр_дії.тип != пусто {
            помаркувати_обʼєкт(параметр_дії.тип);
          }
          якщо параметр_дії.має_значення_за_замовчуванням != 0 {
            якщо параметр_дії.значення_за_замовчуванням.тип == ЗОбʼєкт {
              помаркувати_обʼєкт(параметр_дії.значення_за_замовчуванням.дані як комірка<Обʼєкт>);
            }
          }
          х = х + 1;
        }
      }
      якщо обʼєкт.дія_тип_повернення != пусто {
        помаркувати_обʼєкт(обʼєкт.дія_тип_повернення);
      }
      якщо обʼєкт.дія_зовнішнє_середовище != пусто {
        помаркувати_середовище(обʼєкт.дія_зовнішнє_середовище);
      }
      якщо обʼєкт.дія_я != пусто {
        помаркувати_обʼєкт(обʼєкт.дія_я);
      }
      якщо обʼєкт.структура_предок != пусто {
        помаркувати_обʼєкт(обʼєкт.структура_предок);
      }
      якщо обʼєкт.структура_параметри != пусто {
        змінна х = 0;
        поки х < обʼєкт.структура_параметри.довжина {
          ціль параметр_структури = обʼєкт.структура_параметри.дані[х];
          якщо параметр_структури.тип != пусто {
            помаркувати_обʼєкт(параметр_структури.тип);
          }
          якщо параметр_структури.має_значення_за_замовчуванням != 0 {
            якщо параметр_структури.значення_за_замовчуванням.тип == ЗОбʼєкт {
              помаркувати_обʼєкт(параметр_структури.значення_за_замовчуванням.дані як комірка<Обʼєкт>);
            }
          }
          х = х + 1;
        }
      }
      якщо обʼєкт.структура_методи != пусто {
        змінна х = 0;
        поки х < обʼєкт.структура_методи.елементи.довжина {
          ціль ел = обʼєкт.структура_методи.елементи.дані[х];
          помаркувати_обʼєкт(ел.значення);
          х = х + 1;
        }
      }
      якщо обʼєкт.список_елементи != пусто {
        змінна х = 0;
        поки х < обʼєкт.список_елементи.довжина {
          ціль ел = обʼєкт.список_елементи.дані[х];
          якщо ел.тип == ЗОбʼєкт {
            помаркувати_обʼєкт(ел.дані як комірка<Обʼєкт>);
          }
          х = х + 1;
        }
      }
      якщо обʼєкт.словник_елементи != пусто {
        змінна х = 0;
        поки х < обʼєкт.словник_елементи.елементи.довжина {
          ціль ел = обʼєкт.словник_елементи.елементи.дані[х];
          якщо ел.ключ.тип == ЗОбʼєкт {
            помаркувати_обʼєкт(ел.ключ.дані як комірка<Обʼєкт>);
          }
          якщо ел.значення.тип == ЗОбʼєкт {
            помаркувати_обʼєкт(ел.значення.дані як комірка<Обʼєкт>);
          }
          х = х + 1;
        }
      }
      якщо обʼєкт.перебір_списку_список != пусто {
        помаркувати_обʼєкт(обʼєкт.перебір_списку_список);
      }
      якщо обʼєкт.перебір_словника_словник != пусто {
        помаркувати_обʼєкт(обʼєкт.перебір_словника_словник);
      }
      якщо обʼєкт.перебір_тексту_текст != пусто {
        помаркувати_обʼєкт(обʼєкт.перебір_тексту_текст);
      }
    }
  }

  місцева дія перевірити_чи_обʼєкт_є(М: комірка<Машина>, о: комірка<Обʼєкт>, с: комірка<Обʼєкт>): ціле {
    змінна ос = о.с;
    поки ос != пусто {
      якщо ос == с {
        вернути 1;
      }
      ос = ос.структура_предок;
    }
    вернути 0;
  }

  місцева дія перевірити_чи_значення_є(М: комірка<Машина>, з: Значення, с: комірка<Обʼєкт>): ціле {
    якщо з.тип == ЗОбʼєкт {
      вернути перевірити_чи_обʼєкт_є(М, з.дані як комірка<Обʼєкт>, с);
    }
    якщо с == М.структура_обʼєкт {
      вернути 1;
    }
    якщо з.тип == ЗТак {
      вернути М.структура_логічне == с;
    }
    якщо з.тип == ЗНі {
      вернути М.структура_логічне == с;
    }
    якщо з.тип == ЗЧисло {
      вернути М.структура_число == с;
    }
    якщо з.тип == ЗСимвол {
      вернути М.структура_символ == с;
    }
    вернути 0;
  }

  місцева дія створити_структуру_обʼєкт(М: комірка<Машина>): комірка<Обʼєкт> {
    ціль слово = отримати_або_створити_слово(М, ю8"обʼєкт");
    ціль обʼєкт_структури = створити_обʼєкт_структура(М, слово, пусто);
    вернути зробити_безсмертним(М, обʼєкт_структури);
  }
}