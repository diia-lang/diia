взяти визначення МаМа;

секція мама {
  дія обʼєкт_як_гарне_ю8(обʼєкт: комірка<Обʼєкт>, глибина: позитивне): памʼять<п8>;
  дія значення_як_гарне_ю8(значення: Значення, глибина: позитивне): памʼять<п8>;

  дія дописати_до_вектору_п8(в: комірка<вектор<п8>>, значення: памʼять<п8>) {
    змінна с = 0;
    поки значення[с] != 0 {
      додати_до_вектору<п8>(в, значення[с]);
      с = с + 1;
    }
  }

  дія обʼєкт_як_гарне_ю8(обʼєкт: комірка<Обʼєкт>, глибина: позитивне): памʼять<п8> {
    змінна рв = створити_вектор<п8>();
    якщо обʼєкт.тип == ООбʼєкт {
      ціль назва_структури: памʼять<п8> = пусто;
      якщо обʼєкт.с != пусто {
        якщо обʼєкт.с.структура_слово != пусто {
          назва_структури = обʼєкт.с.структура_слово.назва;
        }
      }
      якщо назва_структури == пусто {
        назва_структури = ю8"обʼєкт";
      }
      дописати_до_вектору_п8(рв, назва_структури);
      дописати_до_вектору_п8(рв, ю8"(");
      змінна х = 0;
      поки х < обʼєкт.властивості.елементи.довжина {
        ціль елемент = обʼєкт.властивості.елементи.дані[х];
        дописати_до_вектору_п8(рв, елемент.ключ.назва);
        дописати_до_вектору_п8(рв, ю8"=");
        ціль з = значення_як_гарне_ю8(елемент.значення, глибина + 1);
        дописати_до_вектору_п8(рв, з);
        звільнити(з);
        якщо х != обʼєкт.властивості.елементи.довжина - 1 {
          дописати_до_вектору_п8(рв, ю8", ");
        }
        х = х + 1;
      }
      дописати_до_вектору_п8(рв, ю8")");
    } інакше якщо обʼєкт.тип == ОДія {
      якщо обʼєкт.дія_слово == пусто {
        дописати_до_вектору_п8(рв, ю8"<дія>");
      } інакше {
        дописати_до_вектору_п8(рв, ю8"<дія ");
        дописати_до_вектору_п8(рв, обʼєкт.дія_слово.назва);
        дописати_до_вектору_п8(рв, ю8">");
      }
    } інакше якщо обʼєкт.тип == ОНативнаДія {
      якщо обʼєкт.дія_слово == пусто {
        дописати_до_вектору_п8(рв, ю8"<дія>");
      } інакше {
        дописати_до_вектору_п8(рв, ю8"<дія ");
        дописати_до_вектору_п8(рв, обʼєкт.дія_слово.назва);
        дописати_до_вектору_п8(рв, ю8">");
      }
    } інакше якщо обʼєкт.тип == ОСтруктура {
      якщо обʼєкт.структура_слово == пусто {
        дописати_до_вектору_п8(рв, ю8"<структура>");
      } інакше {
        дописати_до_вектору_п8(рв, ю8"<структура ");
        дописати_до_вектору_п8(рв, обʼєкт.структура_слово.назва);
        дописати_до_вектору_п8(рв, ю8">");
      }
    } інакше якщо обʼєкт.тип == ОТекст {
      якщо глибина == 0 {
        ціль з = ю32_в_ю8(обʼєкт.текст_значення);
        дописати_до_вектору_п8(рв, з);
        звільнити(з);
      } інакше {
        дописати_до_вектору_п8(рв, ю8"\"");
        ціль з = ю32_в_ю8(обʼєкт.текст_значення);
        дописати_до_вектору_п8(рв, з);
        звільнити(з);
        дописати_до_вектору_п8(рв, ю8"\"");
      }
    } інакше якщо обʼєкт.тип == ОМодуль {
      дописати_до_вектору_п8(рв, ю8"<модуль ");
      якщо обʼєкт.модуль_слово != пусто {
        дописати_до_вектору_п8(рв, обʼєкт.модуль_слово.назва);
      }
      дописати_до_вектору_п8(рв, ю8"[");
      змінна х = 0;
      поки х < обʼєкт.властивості.елементи.довжина {
        ціль елемент = обʼєкт.властивості.елементи.дані[х];
        дописати_до_вектору_п8(рв, елемент.ключ.назва);
        якщо х != обʼєкт.властивості.елементи.довжина - 1 {
          дописати_до_вектору_п8(рв, ю8", ");
        }
        х = х + 1;
      }
      дописати_до_вектору_п8(рв, ю8"]>");
    } інакше якщо обʼєкт.тип == ОСписок {
      дописати_до_вектору_п8(рв, ю8"[");
      змінна х = 0;
      поки х < обʼєкт.список_елементи.довжина {
        ціль з = значення_як_гарне_ю8(обʼєкт.список_елементи.дані[х], глибина + 1);
        дописати_до_вектору_п8(рв, з);
        звільнити(з);
        якщо х != обʼєкт.список_елементи.довжина - 1 {
          дописати_до_вектору_п8(рв, ю8", ");
        }
        х = х + 1;
      }
      дописати_до_вектору_п8(рв, ю8"]");
    } інакше якщо обʼєкт.тип == ОСловник {
      дописати_до_вектору_п8(рв, ю8"(");
      змінна х = 0;
      поки х < обʼєкт.словник_елементи.елементи.довжина {
        ціль к = значення_як_гарне_ю8(обʼєкт.словник_елементи.елементи.дані[х].ключ, глибина + 1);
        дописати_до_вектору_п8(рв, к);
        звільнити(к);
        дописати_до_вектору_п8(рв, ю8"=");
        ціль з = значення_як_гарне_ю8(обʼєкт.словник_елементи.елементи.дані[х].значення, глибина + 1);
        дописати_до_вектору_п8(рв, з);
        звільнити(з);
        якщо х != обʼєкт.словник_елементи.елементи.довжина - 1 {
          дописати_до_вектору_п8(рв, ю8", ");
        }
        х = х + 1;
      }
      дописати_до_вектору_п8(рв, ю8")");
    } інакше якщо обʼєкт.тип == ОПеребірСписку {
      дописати_до_вектору_п8(рв, ю8"<перебір_списку>");
    } інакше {
      дописати_до_вектору_п8(рв, ю8"<невідомий_обʼєкт>");
    }
    додати_до_вектору<п8>(рв, 0);
    ціль результат = ю8_клонувати(рв.дані);
    звільнити_вектор<п8>(рв);
    вернути результат;
  }

  дія значення_як_гарне_ю8(значення: Значення, глибина: позитивне): памʼять<п8> {
    якщо значення.тип == ЗПусто {
      вернути ю8_клонувати(ю8"пусто");
    } інакше якщо значення.тип == ЗЧисло {
      вернути перетворити_дійсне_в_ю8(значення.дані як дійсне);
    } інакше якщо значення.тип == ЗТак {
      вернути ю8_клонувати(ю8"так");
    } інакше якщо значення.тип == ЗНі {
      вернути ю8_клонувати(ю8"ні");
    } інакше якщо значення.тип == ЗСимвол {
      ціль код_символа = значення.дані як п32;
      ціль ю32 = виділити<п32>(2);
      ю32[0] = код_символа;
      ю32[1] = 0;
      ціль ю8 = ю32_в_ю8(ю32);
      звільнити(ю32);
      вернути ю8;
    } інакше якщо значення.тип == ЗОбʼєкт {
      вернути обʼєкт_як_гарне_ю8(значення.дані як комірка<Обʼєкт>, глибина);
    } інакше {
      вернути ю8_клонувати(ю8"невідоме значення");
    }
  }

  місцева дія друк_значення(значення: Значення) {
    ціль р = значення_як_гарне_ю8(значення, 0);
    біб::друк_ю8(р);
    звільнити(р);
  }

  місцева дія вивести_значення(значення: Значення) {
    ціль р = значення_як_гарне_ю8(значення, 0);
    біб::вивести_ю8(р);
    звільнити(р);
  }
}