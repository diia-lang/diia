взяти визначення МаМа;

секція мама {
  дія нативна_дія_перебору_тексту_далі(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    ціль обʼєкт_перебору = обʼєкт_нативної_дії.дія_я;
    ціль обʼєкт_тексту = обʼєкт_перебору.перебір_тексту_текст;
    ціль позиція = обʼєкт_перебору.перебір_тексту_позиція;
    якщо позиція >= обʼєкт_тексту.текст_довжина {
      вернути результат_значення(Значення { ЗНі });
    }
    ціль значення = обʼєкт_тексту.текст_значення[позиція];
    змінити_властивість_обʼєкта(обʼєкт_перебору, отримати_або_створити_слово(М, ю8"значення"), Значення { ЗСимвол, дані = значення });
    обʼєкт_перебору.перебір_тексту_позиція = позиція + 1;
    вернути результат_значення(Значення { ЗТак });
  }

  дія нативна_дія_вернути_дія_я(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо обʼєкт_нативної_дії.дія_я == пусто {
      вернути результат_значення(Значення { ЗПусто });
    }
    вернути результат_значення(Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії.дія_я });
  }

  дія нативна_дія_методу_структури_текст_чародія_перебір(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    ціль обʼєкт_перебору = створити_обʼєкт(М, ОПеребірТексту);
    обʼєкт_перебору.с = М.структура_перебір;
    ціль обʼєкт_нативної_дії_вернути_дія_я = створити_обʼєкт_нативна_дія(М, нативна_дія_вернути_дія_я);
    обʼєкт_нативної_дії_вернути_дія_я.дія_я = обʼєкт_перебору;
    змінити_властивість_обʼєкта(обʼєкт_перебору, отримати_або_створити_слово(М, ю8"чародія_перебір"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_вернути_дія_я });
    обʼєкт_перебору.перебір_тексту_текст = обʼєкт_нативної_дії.дія_я;
    обʼєкт_перебору.перебір_тексту_позиція = 0;
    ціль обʼєкт_нативної_дії_далі = створити_обʼєкт_нативна_дія(М, нативна_дія_перебору_тексту_далі);
    обʼєкт_нативної_дії_далі.дія_слово = отримати_або_створити_слово(М, ю8"далі");
    обʼєкт_нативної_дії_далі.дія_я = обʼєкт_перебору;
    змінити_властивість_обʼєкта(обʼєкт_перебору, отримати_або_створити_слово(М, ю8"далі"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_далі });
    вернути результат_значення(Значення { ЗОбʼєкт, дані = обʼєкт_перебору });
  }

  дія нативна_дія_методу_структури_текст_чародія_отримати(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина != 1 {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення_першого_аргументу = аргументи.дані[0].значення;
    якщо значення_першого_аргументу.тип != ЗЧисло {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль позиція_дійсне = значення_першого_аргументу.дані як дійсне;
    ціль позиція = позиція_дійсне як позитивне;
    ціль обʼєкт_тексту = обʼєкт_нативної_дії.дія_я;
    якщо позиція < 0 {
      вернути результат_значення(Значення { ЗПусто });
    }
    якщо позиція >= обʼєкт_тексту.текст_довжина {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення = обʼєкт_тексту.текст_значення[позиція];
    вернути результат_значення(Значення { ЗСимвол, дані = значення });
  }

  дія нативна_дія_методу_структури_текст_чародія_містить(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина != 1 {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення_першого_аргументу = аргументи.дані[0].значення;
    якщо значення_першого_аргументу.тип != ЗОбʼєкт {
      вернути результат_значення(Значення { ЗПусто });
    }
    якщо (значення_першого_аргументу.дані як комірка<Обʼєкт>).тип != ОТекст {
      вернути результат_значення(Значення { ЗПусто });
    }
    якщо обʼєкт_нативної_дії.дія_я.текст_довжина < (значення_першого_аргументу.дані як комірка<Обʼєкт>).текст_довжина {
      вернути результат_значення(Значення { ЗНі });
    }
    якщо ю32_містить(обʼєкт_нативної_дії.дія_я.текст_значення, (значення_першого_аргументу.дані як комірка<Обʼєкт>).текст_значення) {
      вернути результат_значення(Значення { ЗТак });
    }
    вернути результат_значення(Значення { ЗНі });
  }

  дія нативна_дія_методу_структури_текст_чародія_додати(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 1 {
      вернути результат_помилка_обʼєкт(створити_помилку_П5_пропущено_аргумент(М, місцезнаходження, ю8"значення"));
    }
    ціль значення_першого_аргументу = аргументи.дані[0].значення;
    якщо значення_першого_аргументу.тип != ЗОбʼєкт {
      вернути результат_помилка_обʼєкт(створити_помилку_П6_недопустима_структура_обʼєкта_аргумента(М, місцезнаходження, ю8"значення", значення_першого_аргументу, М.структура_текст));
    }
    якщо (значення_першого_аргументу.дані як комірка<Обʼєкт>).тип != ОТекст {
      вернути результат_помилка_обʼєкт(створити_помилку_П6_недопустима_структура_обʼєкта_аргумента(М, місцезнаходження, ю8"значення", значення_першого_аргументу, М.структура_текст));
    }
    ціль обʼєкт_тексту = обʼєкт_нативної_дії.дія_я;
    ціль обʼєкт_нового_тексту = створити_обʼєкт_текст_ю32(М, ю32_зʼєднати(обʼєкт_тексту.текст_значення, (значення_першого_аргументу.дані як комірка<Обʼєкт>).текст_значення));
    вернути результат_значення(Значення { ЗОбʼєкт, дані = обʼєкт_нового_тексту });
  }

  дія нативна_дія_методу_структури_текст_чародія_число(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    ціль обʼєкт_тексту = обʼєкт_нативної_дії.дія_я;
    вернути результат_значення(Значення { ЗЧисло, дані = перетворити_ю8_в_дійсне(ю32_в_ю8(обʼєкт_тексту.текст_значення)) });
  }

  дія нативна_дія_методу_структури_текст_розбити(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина != 1 {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення_першого_аргументу = аргументи.дані[0].значення;
    якщо значення_першого_аргументу.тип != ЗОбʼєкт {
      вернути результат_значення(Значення { ЗПусто });
    }
    якщо (значення_першого_аргументу.дані як комірка<Обʼєкт>).тип != ОТекст {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль обʼєкт_списку = створити_обʼєкт_список(М);
    ціль розбите = ю32_розбити(обʼєкт_нативної_дії.дія_я.текст_значення, (значення_першого_аргументу.дані як комірка<Обʼєкт>).текст_значення);
    змінна х = 0;
    поки розбите[х] != пусто {
      ціль обʼєкт_тексту = створити_обʼєкт_текст_ю32(М, розбите[х]);
      додати_до_вектору<Значення>(обʼєкт_списку.список_елементи, Значення { ЗОбʼєкт, дані = обʼєкт_тексту });
      х = х + 1;
    }
    вернути результат_значення(Значення { ЗОбʼєкт, дані = обʼєкт_списку });
  }

  дія нативна_дія_методу_структури_текст_замінити(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина != 2 {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення_першого_аргументу = аргументи.дані[0].значення;
    якщо значення_першого_аргументу.тип != ЗОбʼєкт {
      вернути результат_значення(Значення { ЗПусто });
    }
    якщо (значення_першого_аргументу.дані як комірка<Обʼєкт>).тип != ОТекст {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення_другого_аргументу = аргументи.дані[1].значення;
    якщо значення_другого_аргументу.тип != ЗОбʼєкт {
      вернути результат_значення(Значення { ЗПусто });
    }
    якщо (значення_другого_аргументу.дані як комірка<Обʼєкт>).тип != ОТекст {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль обʼєкт_тексту = обʼєкт_нативної_дії.дія_я;
    ціль обʼєкт_нового_тексту = створити_обʼєкт_текст_ю32(М, ю32_замінити(обʼєкт_тексту.текст_значення, (значення_першого_аргументу.дані як комірка<Обʼєкт>).текст_значення, (значення_другого_аргументу.дані як комірка<Обʼєкт>).текст_значення));
    вернути результат_значення(Значення { ЗОбʼєкт, дані = обʼєкт_нового_тексту });
  }

  дія нативна_дія_методу_структури_текст_починається(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина != 1 {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення_першого_аргументу = аргументи.дані[0].значення;
    якщо значення_першого_аргументу.тип != ЗОбʼєкт {
      вернути результат_значення(Значення { ЗПусто });
    }
    якщо (значення_першого_аргументу.дані як комірка<Обʼєкт>).тип != ОТекст {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль обʼєкт_тексту = обʼєкт_нативної_дії.дія_я;
    якщо ю32_починається_з(обʼєкт_тексту.текст_значення, (значення_першого_аргументу.дані як комірка<Обʼєкт>).текст_значення) {
      вернути результат_значення(Значення { ЗТак });
    }
    вернути результат_значення(Значення { ЗНі });
  }

  дія нативна_дія_методу_структури_текст_закінчується(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина != 1 {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль значення_першого_аргументу = аргументи.дані[0].значення;
    якщо значення_першого_аргументу.тип != ЗОбʼєкт {
      вернути результат_значення(Значення { ЗПусто });
    }
    якщо (значення_першого_аргументу.дані як комірка<Обʼєкт>).тип != ОТекст {
      вернути результат_значення(Значення { ЗПусто });
    }
    ціль обʼєкт_тексту = обʼєкт_нативної_дії.дія_я;
    якщо ю32_закінчується_на(обʼєкт_тексту.текст_значення, (значення_першого_аргументу.дані як комірка<Обʼєкт>).текст_значення) {
      вернути результат_значення(Значення { ЗТак });
    }
    вернути результат_значення(Значення { ЗНі });
  }

  дія нативна_дія_методу_структури_текст_обтяти(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    ціль обʼєкт_тексту = обʼєкт_нативної_дії.дія_я;
    ціль обʼєкт_нового_тексту = створити_обʼєкт_текст_ю32(М, ю32_обтяти(обʼєкт_тексту.текст_значення));
    вернути результат_значення(Значення { ЗОбʼєкт, дані = обʼєкт_нового_тексту });
  }

  дія обʼєкт_тексту_отримати_властивість_дія(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт: комірка<Обʼєкт>, слово_назви: комірка<Слово>): Результат {
    якщо слово_назви == М.база_слів.довжина {
      вернути результат_значення(Значення { ЗЧисло, дані = обʼєкт.текст_довжина як дійсне });
    }
    вернути обʼєкт_отримати_властивість_дія(М, місцезнаходження, обʼєкт, слово_назви);
  }

  дія обʼєкт_тексту_змінити_властивість_дія(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт: комірка<Обʼєкт>, слово_назви: комірка<Слово>, значення: Значення): Результат {
    вернути результат_помилка_обʼєкт(створити_помилку_П2_неможливо_змінити_властивість(М, місцезнаходження, слово_назви, Значення { ЗОбʼєкт, дані = обʼєкт }));
  }

  місцева дія створити_обʼєкт_текст(М: комірка<Машина>, значення: памʼять<п8>): комірка<Обʼєкт> {
    ціль обʼєкт_тексту = створити_обʼєкт(М, ОТекст);
    обʼєкт_тексту.с = М.структура_текст;
    обʼєкт_тексту.отримати_властивість = обʼєкт_тексту_отримати_властивість_дія;
    обʼєкт_тексту.змінити_властивість = обʼєкт_тексту_змінити_властивість_дія;
    ціль розмір_значення = біб::юнікод::дізнатись_розмір_ю8_сі(значення);
    обʼєкт_тексту.текст_значення = виділити<п32>(розмір_значення + 1);
    ціль розмір_виходу = біб::юнікод::ю8_в_ю32(значення, розмір_значення, обʼєкт_тексту.текст_значення);
    обʼєкт_тексту.текст_значення[розмір_виходу] = 0;
    обʼєкт_тексту.текст_довжина = довжина_ю32(обʼєкт_тексту.текст_значення);
    вернути обʼєкт_тексту;
  }

  місцева дія створити_обʼєкт_текст_ю32(М: комірка<Машина>, значення: памʼять<п32>): комірка<Обʼєкт> {
    ціль обʼєкт_тексту = створити_обʼєкт(М, ОТекст);
    обʼєкт_тексту.с = М.структура_текст;
    обʼєкт_тексту.отримати_властивість = обʼєкт_тексту_отримати_властивість_дія;
    обʼєкт_тексту.змінити_властивість = обʼєкт_тексту_змінити_властивість_дія;
    обʼєкт_тексту.текст_значення = ю32_клонувати(значення);
    обʼєкт_тексту.текст_довжина = довжина_ю32(обʼєкт_тексту.текст_значення);
    вернути обʼєкт_тексту;
  }

  дія структура_текст_виконати_дія(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 1 {
      вернути результат_помилка_обʼєкт(створити_помилку_П21_неможливо_виконати(М, місцезнаходження, Значення { ЗОбʼєкт, дані = обʼєкт }));
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
    якщо значення_першого_аргумента.тип == ЗПусто {
      ціль обʼєкт_тексту = створити_обʼєкт_текст(М, ю8"пусто");
      вернути результат_значення(Значення { ЗОбʼєкт, дані = обʼєкт_тексту });
    }
    якщо значення_першого_аргумента.тип == ЗТак {
      ціль обʼєкт_тексту = створити_обʼєкт_текст(М, ю8"так");
      вернути результат_значення(Значення { ЗОбʼєкт, дані = обʼєкт_тексту });
    }
    якщо значення_першого_аргумента.тип == ЗНі {
      ціль обʼєкт_тексту = створити_обʼєкт_текст(М, ю8"ні");
      вернути результат_значення(Значення { ЗОбʼєкт, дані = обʼєкт_тексту });
    }
    якщо значення_першого_аргумента.тип == ЗЧисло {
      ціль ю8 = перетворити_дійсне_в_ю8(значення_першого_аргумента.дані як дійсне);
      ціль обʼєкт_тексту = створити_обʼєкт_текст(М, ю8);
      звільнити(ю8);
      вернути результат_значення(Значення { ЗОбʼєкт, дані = обʼєкт_тексту });
    }
    якщо значення_першого_аргумента.тип == ЗСимвол {
      // потім: доробити
      вернути результат_значення(Значення { ЗПусто });
    }
    якщо значення_першого_аргумента.тип == ЗОбʼєкт {
      ціль обʼєкт_значення_першого_аргумента = значення_першого_аргумента.дані як комірка<Обʼєкт>;
      якщо обʼєкт_значення_першого_аргумента.тип == ОТекст {
        вернути результат_значення(значення_першого_аргумента);
      }
      ціль результат_отримання_чародії_текст = обʼєкт_значення_першого_аргумента.отримати_властивість(М, місцезнаходження, обʼєкт_значення_першого_аргумента, отримати_або_створити_слово(М, ю8"чародія_текст"));
      якщо результат_отримання_чародії_текст.успіх == ні {
        вернути результат_отримання_чародії_текст;
      }
      вернути машина_виконати_дію(М, місцезнаходження, результат_отримання_чародії_текст.значення, 0);
    }
    вернути результат_помилка_обʼєкт(створити_помилку_П21_неможливо_виконати(М, місцезнаходження, Значення { ЗОбʼєкт, дані = обʼєкт }));
  }

  місцева дія створити_структуру_текст(М: комірка<Машина>): комірка<Обʼєкт> {
    ціль слово = отримати_або_створити_слово(М, ю8"текст");
    ціль обʼєкт_структури = створити_обʼєкт_структура(М, слово, М.структура_обʼєкт);
    обʼєкт_структури.виконати = структура_текст_виконати_дія;
    ціль обʼєкт_нативної_дії_чародія_перебір = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_текст_чародія_перебір));
    обʼєкт_нативної_дії_чародія_перебір.дія_слово = отримати_або_створити_слово(М, ю8"чародія_перебір");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"чародія_перебір"), обʼєкт_нативної_дії_чародія_перебір);
    ціль обʼєкт_нативної_дії_чародія_отримати = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_текст_чародія_отримати));
    обʼєкт_нативної_дії_чародія_отримати.дія_слово = отримати_або_створити_слово(М, ю8"чародія_отримати");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"чародія_отримати"), обʼєкт_нативної_дії_чародія_отримати);
    ціль обʼєкт_нативної_дії_чародія_містить = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_текст_чародія_містить));
    обʼєкт_нативної_дії_чародія_містить.дія_слово = отримати_або_створити_слово(М, ю8"чародія_містить");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"чародія_містить"), обʼєкт_нативної_дії_чародія_містить);
    ціль обʼєкт_нативної_дії_чародія_додати = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_текст_чародія_додати));
    обʼєкт_нативної_дії_чародія_додати.дія_слово = отримати_або_створити_слово(М, ю8"чародія_додати");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"чародія_додати"), обʼєкт_нативної_дії_чародія_додати);
    ціль обʼєкт_нативної_дії_чародія_число = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_текст_чародія_число));
    обʼєкт_нативної_дії_чародія_число.дія_слово = отримати_або_створити_слово(М, ю8"чародія_число");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"чародія_число"), обʼєкт_нативної_дії_чародія_число);
    ціль обʼєкт_нативної_дії_розбити = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_текст_розбити));
    обʼєкт_нативної_дії_розбити.дія_слово = отримати_або_створити_слово(М, ю8"розбити");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"розбити"), обʼєкт_нативної_дії_розбити);
    ціль обʼєкт_нативної_дії_замінити = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_текст_замінити));
    обʼєкт_нативної_дії_замінити.дія_слово = отримати_або_створити_слово(М, ю8"замінити");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"замінити"), обʼєкт_нативної_дії_замінити);
    ціль обʼєкт_нативної_дії_починається = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_текст_починається));
    обʼєкт_нативної_дії_починається.дія_слово = отримати_або_створити_слово(М, ю8"починається");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"починається"), обʼєкт_нативної_дії_починається);
    ціль обʼєкт_нативної_дії_закінчується = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_текст_закінчується));
    обʼєкт_нативної_дії_закінчується.дія_слово = отримати_або_створити_слово(М, ю8"закінчується");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"закінчується"), обʼєкт_нативної_дії_закінчується);
    ціль обʼєкт_нативної_дії_обтяти = зробити_безсмертним(М, створити_обʼєкт_нативна_дія(М, нативна_дія_методу_структури_текст_обтяти));
    обʼєкт_нативної_дії_обтяти.дія_слово = отримати_або_створити_слово(М, ю8"обтяти");
    змінити_значення_карти<комірка<Слово>, комірка<Обʼєкт>>(обʼєкт_структури.структура_методи, отримати_або_створити_слово(М, ю8"обтяти"), обʼєкт_нативної_дії_обтяти);
    вернути зробити_безсмертним(М, обʼєкт_структури);
  }
}