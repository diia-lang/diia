////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення мавка;
взяти визначення мавка/бібліотека;

зовнішня дія прочитати_файл(шлях: адреса<п8>): адреса<п8>;
зовнішня дія виправити_шлях(шлях: адреса<п8>, вихід: адреса<адреса<п8>>);

секція мавка {
  дія машина_обробник_отримання_шляху_до_модуля(М: адреса<МаМа::Машина>, назва_паку: адреса<МаМа::Назва>, шлях: МаМа::Накопичувач<адреса<МаМа::Назва>>, вихід: адреса<Ю8>): логічне {
    ціль накопичувач_шляху_ю8 = МаМа::зробити_накопичувач_ю8();
    якщо назва_паку != пусто {
      МаМа::покласти_в_накопичувач_ю8(накопичувач_шляху_ю8::адреса, ю8"./паки/");
      ціль ю8_назви_паку: Ю8;
      якщо МаМа::виділити_ю8_з_назви(М, назва_паку, ю8_назви_паку::адреса) == ні {
        вернути ні;
      }
      МаМа::покласти_в_накопичувач_ю8(накопичувач_шляху_ю8::адреса, ю8_назви_паку);
      звільнити(ю8_назви_паку);
      МаМа::покласти_в_накопичувач_ю8(накопичувач_шляху_ю8::адреса, ю8"/");
    }
    змінна ціль пш: позитивне = 0;
    поки пш < шлях.розмір {
      ціль ю8_елемента_шляху: Ю8;
      якщо МаМа::виділити_ю8_з_назви(М, шлях.дані[пш], ю8_елемента_шляху::адреса) == ні {
        вернути ні;
      }
      МаМа::покласти_в_накопичувач_ю8(накопичувач_шляху_ю8::адреса, ю8_елемента_шляху);
      звільнити(ю8_елемента_шляху);
      якщо пш < шлях.розмір - 1 {
        МаМа::покласти_в_накопичувач_ю8(накопичувач_шляху_ю8::адреса, ю8"/");
      }
      пш += 1;
    }
    МаМа::покласти_в_накопичувач_ю8(накопичувач_шляху_ю8::адреса, ю8".м");
    ціль ю8_шлях_сирий = МаМа::виділити_ю8_з_накопичувача_ю8(накопичувач_шляху_ю8::адреса);
    виправити_шлях(ю8_шлях_сирий, вихід);
    звільнити(ю8_шлях_сирий);
    МаМа::звільнити_значення_накопичувача_ю8(накопичувач_шляху_ю8);
    вернути так;
  }

  дія машина_обробник_взяття_модуля(М: адреса<МаМа::Машина>, обʼєкт_модуля_запису: адреса<МаМа::ОбʼєктМодуля>, ю8_шлях: Ю8): МаМа::обʼєкт_або_стан_падіння {
    ціль значення_файлу = прочитати_файл(ю8_шлях);
    якщо значення_файлу == пусто {
      ціль накопичувач_тексту_помилки = МаМа::зробити_накопичувач_ю8();
      МаМа::покласти_в_накопичувач_ю8(накопичувач_тексту_помилки::адреса, ю8"Не вдалося прочитати файл \"");
      МаМа::покласти_в_накопичувач_ю8(накопичувач_тексту_помилки::адреса, ю8_шлях);
      МаМа::покласти_в_накопичувач_ю8(накопичувач_тексту_помилки::адреса, ю8"\"");
      ціль ю8_помилки = МаМа::виділити_ю8_з_накопичувача_ю8(накопичувач_тексту_помилки::адреса);
      МаМа::звільнити_значення_накопичувача_ю8(накопичувач_тексту_помилки);
      ціль обʼєкт_юнікоду = МаМа::виділити_обʼєкт_юнікоду_з_ю8(М, ю8_помилки);
      звільнити(ю8_помилки);
      МаМа::увімкнути_стан_падіння(М, пусто);
      вернути обʼєкт_юнікоду як адреса<МаМа::Обʼєкт>;
    }
    ціль текст_коду = виділити<ТекстКоду>();
    якщо МаМа::виділити_копію_Ю8(ю8_шлях, МаМа::порахувати_розмір_Ю8(ю8_шлях), текст_коду.шлях::адреса) == ні {
      МаМа::ПОМЕРТИ(ю8"Не вдалося виділити копію Ю8");
    }
    текст_коду.значення = значення_файлу;
    ціль результат_розбору_мавки = розібрати_мавку(текст_коду);
    якщо результат_розбору_мавки.успіх == 0 {
      ціль обʼєкт_тексту = МаМа::виділити_обʼєкт_юнікоду_з_ю8(М, результат_розбору_мавки.помилка.повідомлення);
      змінна ціль місцезнаходження_падіння: адреса<МаМа::МісцезнаходженняПадіння> = пусто;
      якщо результат_розбору_мавки.помилка.місцезнаходження != пусто {
        місцезнаходження_падіння  = МаМа::виділити_місцезнаходження_падіння(
          текст_коду.шлях,
          п32(результат_розбору_мавки.помилка.місцезнаходження.рядок)
        );
      }
      МаМа::увімкнути_стан_падіння(М, місцезнаходження_падіння);
      вернути обʼєкт_тексту як адреса<МаМа::Обʼєкт>;
    }
    ціль код = МаМа::виділити_код(ю8_шлях);
    ціль контекст_компіляції = виділити_контекст_компіляції();
    ціль помилка_компіляції = скомпілювати_тіло(М, контекст_компіляції, код, результат_розбору_мавки.тіло, так);
    якщо помилка_компіляції != пусто {
      ціль обʼєкт_тексту = МаМа::виділити_обʼєкт_юнікоду_з_ю8(М, помилка_компіляції.повідомлення);
      змінна ціль місцезнаходження_падіння: адреса<МаМа::МісцезнаходженняПадіння> = пусто;
      якщо помилка_компіляції.місцезнаходження != пусто {
        місцезнаходження_падіння  = МаМа::виділити_місцезнаходження_падіння(
          текст_коду.шлях,
          п32(помилка_компіляції.місцезнаходження.рядок)
        );
      }
      МаМа::увімкнути_стан_падіння(М, місцезнаходження_падіння);
      вернути обʼєкт_тексту як адреса<МаМа::Обʼєкт>;
    }
    мавка::звільнити_контекст_компіляції(контекст_компіляції);
    звільнити_результат_розбору_мавки(результат_розбору_мавки);
    звільнити(текст_коду.шлях);
    звільнити(значення_файлу);
    звільнити(текст_коду);
//    МаМа::надрукувати_код(код);
    ціль результат_виконання_коду = МаМа::виконати_код(М, М.глобальне_середовище, код, пусто, обʼєкт_модуля_запису, обʼєкт_модуля_запису як адреса<МаМа::Обʼєкт>);
    вернути результат_виконання_коду;
  }

  дія машина_обробник_взяття_біб(М: адреса<МаМа::Машина>, обʼєкт_модуля_запису: адреса<МаМа::ОбʼєктМодуля>, шлях: МаМа::Накопичувач<адреса<МаМа::Назва>>): МаМа::обʼєкт_або_стан_падіння {
    якщо шлях.дані[0] == М.БН.С.М {
      бібліотека::заповнити_модуль_М(М.дані_виконувача як адреса<Виконувач>, обʼєкт_модуля_запису як адреса<Обʼєкт>);
      вернути обʼєкт_модуля_запису як адреса<МаМа::Обʼєкт>;
    }
    якщо шлях.дані[0] == М.БН.С.мавка {
      бібліотека::заповнити_модуль_мавка(М.дані_виконувача як адреса<Виконувач>, обʼєкт_модуля_запису як адреса<Обʼєкт>);
      вернути обʼєкт_модуля_запису як адреса<МаМа::Обʼєкт>;
    }
    якщо шлях.дані[0] == М.БН.С.МаМа {
      бібліотека::заповнити_модуль_МаМа(М.дані_виконувача як адреса<Виконувач>, обʼєкт_модуля_запису як адреса<Обʼєкт>);
      вернути обʼєкт_модуля_запису як адреса<МаМа::Обʼєкт>;
    }
    МаМа::увімкнути_стан_падіння(М, пусто);
    вернути МаМа::виділити_обʼєкт_тексту_з_ю8(М, ю8"Не вдалося знайти модуль біб") як адреса<МаМа::Обʼєкт>;
  }

  місцева дія створити_виконувач(): адреса<Виконувач> {
    ціль В = виділити<Виконувач>();
    В.М = МаМа::виділити_машину();
    В.М.дані_виконувача = В;
    В.М.обробник_отримання_шляху_до_модуля = машина_обробник_отримання_шляху_до_модуля;
    В.М.обробник_взяття_модуля = машина_обробник_взяття_модуля;
    В.М.обробник_взяття_біб = машина_обробник_взяття_біб;
    вернути В;
  }

  місцева дія знищити_виконувач(В: адреса<Виконувач>) {
    МаМа::звільнити_машину(В.М);
    звільнити(В);
  }

  структура ДаніДіалогу {
    В: адреса<Виконувач>;
    середовище: адреса<МаМа::Середовище>;
  }

  дія діалог_виконати(data: адреса, value: памʼять<unsigned_char>) {
    ціль ввід = value як Ю8;
    якщо МаМа::порівняти_Ю8(ввід, ю8"") == 0 {
    } інакше {
      ціль дані_діалогу = data як адреса<ДаніДіалогу>;
      ціль В = дані_діалогу.В;
      ціль середовище = дані_діалогу.середовище;
      ціль текст_коду = виділити<ТекстКоду>();
      якщо МаМа::виділити_копію_Ю8(ю8"ДМ://", МаМа::порахувати_розмір_Ю8(ю8"ДМ://"), текст_коду.шлях::адреса) == ні {
        МаМа::ПОМЕРТИ(ю8"Не вдалося виділити копію Ю8");
      }
      якщо МаМа::виділити_копію_Ю8(ввід, МаМа::порахувати_розмір_Ю8(ввід), текст_коду.значення::адреса) == ні {
        МаМа::ПОМЕРТИ(ю8"Не вдалося виділити копію Ю8");
      }
      ціль результат_розбору_мавки = розібрати_мавку(текст_коду);
      якщо результат_розбору_мавки.успіх == 0 {
        ціль обʼєкт_тексту = МаМа::виділити_обʼєкт_юнікоду_з_ю8(В.М, результат_розбору_мавки.помилка.повідомлення);
        змінна ціль місцезнаходження_падіння: адреса<МаМа::МісцезнаходженняПадіння> = пусто;
        якщо результат_розбору_мавки.помилка.місцезнаходження != пусто {
          місцезнаходження_падіння  = МаМа::виділити_місцезнаходження_падіння(
            текст_коду.шлях,
            п32(результат_розбору_мавки.помилка.місцезнаходження.рядок)
          );
        }
        // потім: надрукувати помилку
        вернути;
      }
      ціль код = МаМа::виділити_код(ю8"ДМ://");
      ціль контекст_компіляції = виділити_контекст_компіляції();
      ціль помилка_компіляції = скомпілювати_тіло(В.М, контекст_компіляції, код, результат_розбору_мавки.тіло, так);
      якщо помилка_компіляції != пусто {
        ціль обʼєкт_тексту = МаМа::виділити_обʼєкт_юнікоду_з_ю8(В.М, помилка_компіляції.повідомлення);
        змінна ціль місцезнаходження_падіння: адреса<МаМа::МісцезнаходженняПадіння> = пусто;
        якщо помилка_компіляції.місцезнаходження != пусто {
          місцезнаходження_падіння  = МаМа::виділити_місцезнаходження_падіння(
            текст_коду.шлях,
            п32(помилка_компіляції.місцезнаходження.рядок)
          );
        }
        // потім: надрукувати помилку
        вернути;
      }
      мавка::звільнити_контекст_компіляції(контекст_компіляції);
      звільнити_результат_розбору_мавки(результат_розбору_мавки);
      звільнити(текст_коду.шлях);
      звільнити(текст_коду.значення);
      звільнити(текст_коду);
      ціль результат_виконання_коду = МаМа::виконати_код_в_середовищі(В.М, середовище, код);
      якщо В.М.стан_падіння {
        // потім: надрукувати падіння
        МаМа::вимкнути_стан_падіння(В.М);
      } інакше {
        МаМа::надрукувати_обʼєкт(результат_виконання_коду, В.М, 1);
      }
    }
  }

  місцева дія почати_діалог(В: адреса<Виконувач>): Результат {
    ціль дані_діалогу = виділити<ДаніДіалогу>();
    дані_діалогу.В = В;
    дані_діалогу.середовище = МаМа::покласти_тимчасове_середовище(В.М);
    mavka_dialog(дані_діалогу, діалог_виконати);
    МаМа::забрати_тимчасове_середовище(В.М);
    вернути результат_успіх(пусто);
  }

  місцева дія взяти_файл(В: адреса<Виконувач>, назва_модуля: адреса<Назва>, шлях_до_файлу: Ю8): Результат {
    ціль виправлений_шлях_до_файлу: Ю8 = пусто;
    виправити_шлях(шлях_до_файлу, виправлений_шлях_до_файлу::адреса);
    ціль обʼєкт_модуля = МаМа::взяти_модуль_за_шляхом(В.М, В.М.глобальне_середовище, назва_модуля як адреса<МаМа::Назва>, виправлений_шлях_до_файлу);
    якщо В.М.стан_падіння {
      // потім: зробити місцезнаходження_падіння з В.М.місцезнаходження_падіння
      ціль результат = результат_падіння(обʼєкт_модуля як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(обʼєкт_модуля як адреса<Обʼєкт>);
  }

  місцева дія виконати_ю8(В: адреса<Виконувач>, значення: Ю8): Результат {
    // ...
  }

  місцева дія зберегти_обʼєкт(В: адреса<Виконувач>, обʼєкт: адреса<Обʼєкт>) {
    МаМа::зберегти_обʼєкт(В.М, обʼєкт як адреса<МаМа::Обʼєкт>);
  }

  місцева дія видалити_збережений_обʼєкт(В: адреса<Виконувач>) {
    МаМа::видалити_збережений_обʼєкт(В.М);
  }

  місцева дія назва_з_Ю8(В: адреса<Виконувач>, значення: Ю8): адреса<Назва> {
    вернути МаМа::назва_з_Ю8(В.М, значення) як адреса<Назва>;
  }

  місцева дія отримати_так(В: адреса<Виконувач>): адреса<Обʼєкт> {
    вернути В.М.обʼєкт_логічного_так як адреса<Обʼєкт>;
  }

  місцева дія отримати_ні(В: адреса<Виконувач>): адреса<Обʼєкт> {
    вернути В.М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія визначити_глобальний_субʼєкт(В: адреса<Виконувач>, назва: адреса<Назва>, обʼєкт: адреса<Обʼєкт>) {
    МаМа::змінити_в_середовищі(В.М, В.М.глобальне_середовище, назва як адреса<МаМа::Назва>, обʼєкт як адреса<МаМа::Обʼєкт>);
  }

  структура ДаніНативноїДії {
    нативна_дія: НативнаДія;
  }

  дія нативна_дія_нативної_дії(обʼєкт_нативної_дії: адреса<МаМа::ОбʼєктНативноїДії>, М: адреса<МаМа::Машина>, обʼєкт_я: адреса<МаМа::Обʼєкт>, аргументи: адреса<МаМа::Накопичувач<адреса<МаМа::Обʼєкт>>>, іменовані_аргументи: адреса<МаМа::Реєстр<адреса<МаМа::Назва>, адреса<МаМа::Обʼєкт>>>): адреса<МаМа::Обʼєкт> {
    ціль дані_нативної_дії = обʼєкт_нативної_дії.дані як адреса<ДаніНативноїДії>;
    ціль результат_нативної_дії = дані_нативної_дії.нативна_дія(обʼєкт_нативної_дії як адреса<Обʼєкт>, М.дані_виконувача як адреса<Виконувач>, обʼєкт_я як адреса<Обʼєкт>, аргументи як адреса<МаМа::Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи як адреса<МаМа::Реєстр<адреса<Назва>, адреса<Обʼєкт>>>);
    якщо результат_нативної_дії.падіння != пусто {
      МаМа::увімкнути_стан_падіння(М, пусто);
      вернути результат_нативної_дії.значення як адреса<МаМа::Обʼєкт>;
    }
    вернути результат_нативної_дії.значення як адреса<МаМа::Обʼєкт>;
  }

  дія відклик_перед_звільненням_нативної_дії(обʼєкт_нативної_дії: адреса<МаМа::ОбʼєктНативноїДії>, М: адреса<МаМа::Машина>) {
    звільнити(обʼєкт_нативної_дії.дані);
  }

  місцева дія створити_нативну_дію(В: адреса<Виконувач>, назва: адреса<Назва>, значення: НативнаДія): адреса<Обʼєкт> {
    ціль дані_нативної_дії = виділити<ДаніНативноїДії>();
    дані_нативної_дії.нативна_дія = значення;
    ціль обʼєкт_нативної_дії = МаМа::виділити_обʼєкт_нативної_дії(В.М, назва як адреса<МаМа::Назва>, нативна_дія_нативної_дії, дані_нативної_дії, відклик_перед_звільненням_нативної_дії);
    вернути обʼєкт_нативної_дії як адреса<Обʼєкт>;
  }

  місцева дія створити_число(В: адреса<Виконувач>, значення: д64): адреса<Обʼєкт> {
    ціль обʼєкт_числа = МаМа::виділити_обʼєкт_числа(В.М, значення);
    вернути обʼєкт_числа як адреса<Обʼєкт>;
  }

  місцева дія створити_текст_з_Ю8(В: адреса<Виконувач>, значення: МаМа::памʼять<п8>): адреса<Обʼєкт> {
    ціль обʼєкт_тексту = МаМа::виділити_обʼєкт_тексту_з_ю8(В.М, значення);
    вернути обʼєкт_тексту як адреса<Обʼєкт>;
  }

  місцева дія створити_юнікод_з_Ю8(В: адреса<Виконувач>, значення: МаМа::памʼять<п8>): адреса<Обʼєкт> {
    ціль обʼєкт_тексту = МаМа::виділити_обʼєкт_юнікоду_з_ю8(В.М, значення);
    вернути обʼєкт_тексту як адреса<Обʼєкт>;
  }

  місцева дія створити_модуль(В: адреса<Виконувач>, назва: адреса<Назва>): адреса<Обʼєкт> {
    ціль обʼєкт_модуля = МаМа::виділити_обʼєкт_модуля(В.М, назва як адреса<МаМа::Назва>);
    вернути обʼєкт_модуля як адреса<Обʼєкт>;
  }

  місцева дія створити_список(В: адреса<Виконувач>): адреса<Обʼєкт> {
    ціль обʼєкт_списку = МаМа::виділити_обʼєкт_списку(В.М);
    вернути обʼєкт_списку як адреса<Обʼєкт>;
  }

  місцева дія створити_словник(В: адреса<Виконувач>): адреса<Обʼєкт> {
    ціль обʼєкт_словника = МаМа::виділити_обʼєкт_словника(В.М);
    вернути обʼєкт_словника як адреса<Обʼєкт>;
  }

  місцева дія створити_обʼєкт(В: адреса<Виконувач>): адреса<Обʼєкт> {
    ціль обʼєкт = МаМа::обʼєкт_виконати(В.М.обʼєкт_структури_обʼєкт як адреса<МаМа::Обʼєкт>, В.М, пусто, пусто, пусто);
    вернути обʼєкт як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_виконати(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, аргументи: МаМа::Накопичувач<адреса<Обʼєкт>>): Результат {
    ціль результат_виконання_обʼєкту = МаМа::обʼєкт_виконати(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, пусто, аргументи::адреса як адреса<МаМа::Накопичувач<адреса<МаМа::Обʼєкт>>>, пусто);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_виконання_обʼєкту як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_виконання_обʼєкту як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_отримати_властивість(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, назва: адреса<Назва>): Результат {
    ціль обʼєкт_властивості = МаМа::обʼєкт_отримати_властивість(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, назва як адреса<МаМа::Назва>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(обʼєкт_властивості як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(обʼєкт_властивості як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_змінити_властивість(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, назва: адреса<Назва>, значення: адреса<Обʼєкт>): Результат {
    ціль результат_зміни_властивості = МаМа::обʼєкт_змінити_властивість(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, назва як адреса<МаМа::Назва>, значення як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_зміни_властивості як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(пусто);
  }

  місцева дія обʼєкт_видалити_властивість(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, назва: адреса<Назва>): Результат {
    ціль результат_видалення_властивості = МаМа::обʼєкт_видалити_властивість(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, назва як адреса<МаМа::Назва>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_видалення_властивості як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(пусто);
  }

  місцева дія обʼєкт_виконати_властивість(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, назва: адреса<Назва>, аргументи: МаМа::Накопичувач<адреса<Обʼєкт>>): Результат {
    ціль результат_виконання_властивості = МаМа::обʼєкт_виконати_властивість(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, назва як адреса<МаМа::Назва>, аргументи::адреса як адреса<МаМа::Накопичувач<адреса<МаМа::Обʼєкт>>>, пусто);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_виконання_властивості як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_виконання_властивості як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_отримати_елемент(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, ключ: адреса<Обʼєкт>): Результат {
    ціль результат_елементу = МаМа::обʼєкт_отримати_елемент(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, ключ як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_елементу як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_елементу як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_змінити_елемент(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): Результат {
    ціль результат_зміни_елементу = МаМа::обʼєкт_змінити_елемент(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, ключ як адреса<МаМа::Обʼєкт>, значення як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_зміни_елементу як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(пусто);
  }

  місцева дія обʼєкт_видалити_елемент(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, ключ: адреса<Обʼєкт>): Результат {
    ціль результат_видалення_елементу = МаМа::обʼєкт_видалити_елемент(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, ключ як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_видалення_елементу як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(пусто);
  }

  місцева дія обʼєкт_отримати_перебір(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>): Результат {
    ціль результат_перебору = МаМа::обʼєкт_отримати_перебір(обʼєкт як адреса<МаМа::Обʼєкт>, В.М);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_перебору як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_перебору як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_додати(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, аргумент: адреса<Обʼєкт>): Результат {
    ціль результат_додавання = МаМа::обʼєкт_додати(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, аргумент як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_додавання як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_додавання як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_відняти(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, аргумент: адреса<Обʼєкт>): Результат {
    ціль результат_віднімання = МаМа::обʼєкт_відняти(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, аргумент як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_віднімання як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_віднімання як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_помножити(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, аргумент: адреса<Обʼєкт>): Результат {
    ціль результат_множення = МаМа::обʼєкт_помножити(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, аргумент як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_множення як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_множення як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_поділити(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, аргумент: адреса<Обʼєкт>): Результат {
    ціль результат_ділення = МаМа::обʼєкт_поділити(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, аргумент як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_ділення як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_ділення як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_остача(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, аргумент: адреса<Обʼєкт>): Результат {
    ціль результат_остачі = МаМа::обʼєкт_отримати_остачу_ділення(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, аргумент як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_остачі як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
  }

  місцева дія обʼєкт_неповна_частка(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, аргумент: адреса<Обʼєкт>): Результат {
    ціль результат_частки = МаМа::обʼєкт_отримати_неповну_частку_ділення(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, аргумент як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_частки як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_частки як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_степінь(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, аргумент: адреса<Обʼєкт>): Результат {
    ціль результат_степені = МаМа::обʼєкт_піднести_до_степеня(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, аргумент як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_степені як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_степені як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_вліво(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, аргумент: адреса<Обʼєкт>): Результат {
    ціль результат_вліво = МаМа::обʼєкт_зсунути_вліво(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, аргумент як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_вліво як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_вліво як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_вправо_зі_заповненням(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, аргумент: адреса<Обʼєкт>): Результат {
    ціль результат_вправо = МаМа::обʼєкт_зсунути_вправо_зі_заповненням(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, аргумент як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_вправо як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_вправо як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_двійкове_і(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, аргумент: адреса<Обʼєкт>): Результат {
    ціль результат_двійкового_і = МаМа::обʼєкт_двійкове_і(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, аргумент як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_двійкового_і як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_двійкового_і як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_двійкове_або(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, аргумент: адреса<Обʼєкт>): Результат {
    ціль результат_двійкового_або = МаМа::обʼєкт_двійкове_або(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, аргумент як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_двійкового_або як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_двійкового_або як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_двійкове_виключне_або(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, аргумент: адреса<Обʼєкт>): Результат {
    ціль результат_двійкового_виключного_або = МаМа::обʼєкт_двійкове_виключне_або(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, аргумент як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_двійкового_виключного_або як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_двійкового_виключного_або як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_двійкове_не(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>): Результат {
    ціль результат_двійкового_не = МаМа::обʼєкт_двійкове_не(обʼєкт як адреса<МаМа::Обʼєкт>, В.М);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_двійкового_не як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_двійкового_не як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_більше(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, аргумент: адреса<Обʼєкт>): Результат {
    ціль результат_більше = МаМа::обʼєкт_більше(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, аргумент як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_більше як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_більше як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_менше(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, аргумент: адреса<Обʼєкт>): Результат {
    ціль результат_менше = МаМа::обʼєкт_менше(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, аргумент як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_менше як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_менше як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_рівно(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, аргумент: адреса<Обʼєкт>): Результат {
    ціль результат_рівно = МаМа::обʼєкт_рівно(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, аргумент як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_рівно як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_рівно як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_містить(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, аргумент: адреса<Обʼєкт>): Результат {
    ціль результат_містить = МаМа::обʼєкт_містить(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, аргумент як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_містить як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_містить як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_є(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, аргумент: адреса<Обʼєкт>): Результат {
    ціль результат_є = МаМа::обʼєкт_є(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, аргумент як адреса<МаМа::Обʼєкт>);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_є як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_є як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_відʼємне(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>): Результат {
    ціль результат_відʼємне = МаМа::обʼєкт_відʼємне(обʼєкт як адреса<МаМа::Обʼєкт>, В.М);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_відʼємне як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_відʼємне як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_числове(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>): Результат {
    ціль результат_числове = МаМа::обʼєкт_числове(обʼєкт як адреса<МаМа::Обʼєкт>, В.М);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_числове як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_числове як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_заперечити(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>): Результат {
    ціль результат_заперечення = МаМа::обʼєкт_заперечити(обʼєкт як адреса<МаМа::Обʼєкт>, В.М);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_заперечення як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_заперечення як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_збільшити(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>): Результат {
    ціль результат_збільшення = МаМа::обʼєкт_збільшити(обʼєкт як адреса<МаМа::Обʼєкт>, В.М);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_збільшення як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_збільшення як адреса<Обʼєкт>);
  }

  місцева дія обʼєкт_зменшити(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>): Результат {
    ціль результат_зменшення = МаМа::обʼєкт_зменшити(обʼєкт як адреса<МаМа::Обʼєкт>, В.М);
    якщо В.М.стан_падіння {
      ціль результат = результат_падіння(результат_зменшення як адреса<Обʼєкт>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(результат_зменшення як адреса<Обʼєкт>);
  }

  місцева дія скомпіювати_значення_обʼєкта_юнікоду_як_Ю8(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, адреса_на_розмір_виходу: адреса<позитивне>, адреса_на_вихід: адреса<Ю8>): логічне {
    ціль обʼєкт_юнікоду_МаМа = обʼєкт як адреса<МаМа::ОбʼєктЮнікоду>;
    адреса_на_розмір_виходу[0] = МаМа::перекодувати_Ю32_в_Ю8(обʼєкт_юнікоду_МаМа.значення, обʼєкт_юнікоду_МаМа.довжина, адреса_на_вихід);
    якщо адреса_на_розмір_виходу[0] == 0 {
      МаМа::ПОМЕРТИ(ю8"Неможливо перекодувати Ю32 в Ю8");
    }
    вернути так;
  }

  місцева дія результат_успіх(обʼєкт: адреса<Обʼєкт>): Результат {
    вернути Результат { падіння = пусто, значення = обʼєкт };
  }

  місцева дія результат_падіння(обʼєкт: адреса<Обʼєкт>, місцезнаходження_падіння: адреса<МісцезнаходженняПадіння>): Результат {
    // потім: зробити копію місцезнаходження падіння
    // потім: зробити копію історії виконання падіння
    ціль падіння = виділити_падіння(місцезнаходження_падіння, 0, пусто);
    вернути Результат { падіння = падіння, значення = обʼєкт };
  }

  місцева дія виділити_падіння(місцезнаходження_падіння: адреса<МісцезнаходженняПадіння>, розмір_історії: позитивне, історія: памʼять<ЕлементІсторіїПадіння>): адреса<Падіння> {
    ціль падіння = виділити<Падіння>();
    падіння.місцезнаходження = місцезнаходження_падіння;
    падіння.розмір_історії = розмір_історії;
    падіння.історія = історія;
    вернути падіння;
  }

  місцева дія звільнити_падіння(падіння: адреса<Падіння>) {
    звільнити_місцезнаходження_падіння(падіння.місцезнаходження);
    змінна ціль п: позитивне = 0;
    поки п < падіння.розмір_історії {
      звільнити(падіння.історія[п].шлях_до_файлу);
      п += 1;
    }
    звільнити(падіння.історія);
    звільнити(падіння);
  }

  місцева дія виділити_місцезнаходження_падіння(шлях_до_файлу: Ю8, рядок: п32): адреса<МісцезнаходженняПадіння> {
    ціль місцезнаходження_падіння = виділити<МісцезнаходженняПадіння>();
    якщо МаМа::виділити_копію_Ю8(шлях_до_файлу, МаМа::порахувати_розмір_Ю8(шлях_до_файлу), місцезнаходження_падіння.шлях_до_файлу::адреса) == ні {
      МаМа::ПОМЕРТИ(ю8"Неможливо виділити копію шляху до файлу");
    }
    місцезнаходження_падіння.рядок = позитивне(рядок);
    вернути місцезнаходження_падіння;
  }

  місцева дія звільнити_місцезнаходження_падіння(місцезнаходження_падіння: адреса<МісцезнаходженняПадіння>) {
    звільнити(місцезнаходження_падіння.шлях_до_файлу);
    звільнити(місцезнаходження_падіння);
  }

  місцева дія отримати_шлях_до_файлу_з_місцезнаходження_падіння(місцезнаходження_падіння: адреса<МісцезнаходженняПадіння>): Ю8 {
    ціль мп = місцезнаходження_падіння як адреса<МаМа::МісцезнаходженняПадіння>;
    вернути мп.шлях_до_файлу;
  }

  місцева дія отримати_рядок_з_місцезнаходження_падіння(місцезнаходження_падіння: адреса<МісцезнаходженняПадіння>): п32 {
    ціль мп = місцезнаходження_падіння як адреса<МаМа::МісцезнаходженняПадіння>;
    вернути мп.рядок;
  }

  місцева дія надрукувати_обʼєкт_в_накопичувач_ю8(обʼєкт: адреса<Обʼєкт>, В: адреса<Виконувач>, накопичувач: адреса<МаМа::НакопичувачЮ8>, глибина: позитивне) {
    МаМа::надрукувати_обʼєкт_в_накопичувач_ю8(обʼєкт як адреса<МаМа::Обʼєкт>, В.М, накопичувач, глибина);
  }
}