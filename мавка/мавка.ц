взяти визначення МаМа;
взяти визначення ./компілятор;
взяти визначення мавка/мавка_втілення;
взяти визначення мавка/бібліотека;

зовнішня дія mavka_double_to_string(value: double, buffer: адреса<адреса<char>>): size_t;
зовнішня дія mavka_bitnot(value: double): double;
зовнішня дія mavka_negate(value: double): double;
зовнішня дія mavka_pow(a: double, b: double): double;
зовнішня дія mavka_floor(value: double): double;

секція мавка {
  зовнішня дія виділити_сиру_памʼять(В: адреса<Виконувач>, розмір: позитивне): памʼять<п8> {
    вернути МаМа::виділити<п8>(В.М, розмір) як памʼять<п8>;
  }

  зовнішня дія перевиділити_сиру_памʼять(В: адреса<Виконувач>, значення: памʼять<п8>, розмір: позитивне): памʼять<п8> {
    вернути МаМа::перевиділити<п8>(В.М, значення, розмір) як памʼять<п8>;
  }

  зовнішня дія звільнити_сиру_памʼять(В: адреса<Виконувач>, значення: памʼять<п8>) {
    МаМа::звільнити(В.М, значення як адреса);
  }

  дія машина_обробник_отримання_шляху_до_модуля(М: адреса<МаМа::Машина>, назва_паку: адреса<МаМа::Назва>, шлях: МаМа::Накопичувач<адреса<МаМа::Назва>>, вихід: адреса<памʼять<п8>>): логічне {
    ціль В = М.дані_виконувача як адреса<Виконувач>;
    ціль накопичувач_шляху_ю8 = МаМа::зробити_накопичувач_ю8(М);
    якщо назва_паку != пусто {
      МаМа::покласти_в_накопичувач_ю8(М, накопичувач_шляху_ю8::адреса, ю8сі"./паки/");
      ціль ю8_назви_паку: памʼять<п8>;
      якщо МаМа::виділити_ю8_з_назви(М, назва_паку, ю8_назви_паку::адреса) == ні {
        вернути ні;
      }
      МаМа::покласти_в_накопичувач_ю8(М, накопичувач_шляху_ю8::адреса, ю8_назви_паку);
      звільнити_памʼять(М.дані_виконувача як адреса<Виконувач>, ю8_назви_паку);
      МаМа::покласти_в_накопичувач_ю8(М, накопичувач_шляху_ю8::адреса, ю8сі"/");
    }
    змінна ціль пш: позитивне = 0;
    поки пш < шлях.розмір {
      ціль ю8_елемента_шляху: памʼять<п8>;
      якщо МаМа::виділити_ю8_з_назви(М, шлях.дані[пш], ю8_елемента_шляху::адреса) == ні {
        вернути ні;
      }
      МаМа::покласти_в_накопичувач_ю8(М, накопичувач_шляху_ю8::адреса, ю8_елемента_шляху);
      звільнити_памʼять(М.дані_виконувача як адреса<Виконувач>, ю8_елемента_шляху);
      якщо пш < шлях.розмір - 1 {
        МаМа::покласти_в_накопичувач_ю8(М, накопичувач_шляху_ю8::адреса, ю8сі"/");
      }
      пш += 1;
    }
    МаМа::покласти_в_накопичувач_ю8(М, накопичувач_шляху_ю8::адреса, ю8сі".м");
    ціль ю8_шлях_сирий = МаМа::виділити_ю8_з_накопичувача_ю8(М, накопичувач_шляху_ю8::адреса);
    ціль розмір_виходу: позитивне = 0;
    якщо В.система.виправити_шлях(В, ю8_шлях_сирий, МаМа::порахувати_розмір_Ю8(ю8_шлях_сирий), вихід, розмір_виходу::адреса) != 0 {
      // помилка...
    }
    звільнити_памʼять(М.дані_виконувача як адреса<Виконувач>, ю8_шлях_сирий);
    МаМа::звільнити_значення_накопичувача_ю8(М, накопичувач_шляху_ю8);
    вернути так;
  }

  дія машина_обробник_взяття_модуля(М: адреса<МаМа::Машина>, предмет_модуля_запису: адреса<МаМа::ПредметМодуля>, ю8_шлях: памʼять<п8>): МаМа::предмет_або_стан_падіння {
    ціль В = М.дані_виконувача як адреса<Виконувач>;
    змінна ціль значення_файлу: памʼять<п8> = пусто;
    змінна ціль розмір_значення_файлу: позитивне = 0;
    якщо В.система.прочитати_файл(В, ю8_шлях, МаМа::порахувати_розмір_Ю8(ю8_шлях), значення_файлу::адреса, розмір_значення_файлу::адреса) != 0 {
      ціль накопичувач_тексту_помилки = МаМа::зробити_накопичувач_ю8(М);
      МаМа::покласти_в_накопичувач_ю8(М, накопичувач_тексту_помилки::адреса, ю8сі"Не вдалося прочитати файл \"");
      МаМа::покласти_в_накопичувач_ю8(М, накопичувач_тексту_помилки::адреса, ю8_шлях);
      МаМа::покласти_в_накопичувач_ю8(М, накопичувач_тексту_помилки::адреса, ю8сі"\"");
      ціль ю8_помилки = МаМа::виділити_ю8_з_накопичувача_ю8(М, накопичувач_тексту_помилки::адреса);
      МаМа::звільнити_значення_накопичувача_ю8(М, накопичувач_тексту_помилки);
      ціль предмет_юнікоду = МаМа::виділити_предмет_юнікоду_з_ю8(М, ю8_помилки);
      звільнити_памʼять(М.дані_виконувача як адреса<Виконувач>, ю8_помилки);
      МаМа::увімкнути_стан_падіння(М, пусто);
      вернути предмет_юнікоду як адреса<МаМа::Предмет>;
    }
    ціль текст_коду = виділити<ТекстКоду>(М.дані_виконувача як адреса<Виконувач>);
    текст_коду.шлях = пусто;
    МаМа::виділити_копію_Ю8(М, ю8_шлях, МаМа::порахувати_розмір_Ю8(ю8_шлях), текст_коду.шлях::адреса);
    якщо текст_коду.шлях == пусто {
      МаМа::ПОМЕРТИ(М, ю8сі"Не вдалося виділити копію Ю8");
    }
    текст_коду.значення = значення_файлу;
    ціль результат_розбору_мавки = розібрати_мавку(текст_коду);
    якщо результат_розбору_мавки.успіх == 0 {
      ціль предмет_тексту = МаМа::виділити_предмет_юнікоду_з_ю8(М, результат_розбору_мавки.помилка.повідомлення);
      змінна ціль місцезнаходження_падіння: адреса<МаМа::МісцезнаходженняПадіння> = пусто;
      якщо результат_розбору_мавки.помилка.місцезнаходження != пусто {
        місцезнаходження_падіння = МаМа::виділити_місцезнаходження_падіння(
          М,
          текст_коду.шлях,
          результат_розбору_мавки.помилка.місцезнаходження.рядок
        );
      }
      МаМа::увімкнути_стан_падіння(М, місцезнаходження_падіння);
      вернути предмет_тексту як адреса<МаМа::Предмет>;
    }
    ціль код = МаМа::виділити_код(М, ю8_шлях);
    ціль контекст_компіляції = виділити_контекст_компіляції(М.дані_виконувача як адреса<Виконувач>);
    ціль помилка_компіляції = скомпілювати_тіло(М.дані_виконувача як адреса<Виконувач>, контекст_компіляції, код, результат_розбору_мавки.тіло, так);
    якщо помилка_компіляції != пусто {
      ціль предмет_тексту = МаМа::виділити_предмет_юнікоду_з_ю8(М, помилка_компіляції.повідомлення);
      змінна ціль місцезнаходження_падіння: адреса<МаМа::МісцезнаходженняПадіння> = пусто;
      якщо помилка_компіляції.місцезнаходження != пусто {
        місцезнаходження_падіння = МаМа::виділити_місцезнаходження_падіння(
          М,
          текст_коду.шлях,
          помилка_компіляції.місцезнаходження.рядок
        );
      }
      МаМа::увімкнути_стан_падіння(М, місцезнаходження_падіння);
      вернути предмет_тексту як адреса<МаМа::Предмет>;
    }
    мавка::звільнити_контекст_компіляції(М.дані_виконувача як адреса<Виконувач>, контекст_компіляції);
    звільнити_результат_розбору_мавки(результат_розбору_мавки);
    звільнити_памʼять(М.дані_виконувача як адреса<Виконувач>, текст_коду.шлях);
    звільнити_памʼять(М.дані_виконувача як адреса<Виконувач>, значення_файлу);
    звільнити(М.дані_виконувача як адреса<Виконувач>, текст_коду);
//    МаМа::надрукувати_код(код);
    ціль результат_виконання_коду = МаМа::виконати_код(М, М.глобальне_середовище, код, пусто, предмет_модуля_запису, предмет_модуля_запису як адреса<МаМа::Предмет>);
    вернути результат_виконання_коду;
  }

  дія машина_обробник_взяття_біб(М: адреса<МаМа::Машина>, предмет_модуля_запису: адреса<МаМа::ПредметМодуля>, шлях: МаМа::Накопичувач<адреса<МаМа::Назва>>): МаМа::предмет_або_стан_падіння {
    якщо шлях.дані[0] == М.БН.С.М {
      бібліотека::заповнити_модуль_М(М.дані_виконувача як адреса<Виконувач>, предмет_модуля_запису як адреса<Предмет>);
      вернути предмет_модуля_запису як адреса<МаМа::Предмет>;
    }
    якщо шлях.дані[0] == М.БН.С.мавка {
      бібліотека::заповнити_модуль_мавка(М.дані_виконувача як адреса<Виконувач>, предмет_модуля_запису як адреса<Предмет>);
      вернути предмет_модуля_запису як адреса<МаМа::Предмет>;
    }
    якщо шлях.дані[0] == М.БН.С.МаМа {
      бібліотека::заповнити_модуль_МаМа(М.дані_виконувача як адреса<Виконувач>, предмет_модуля_запису як адреса<Предмет>);
      вернути предмет_модуля_запису як адреса<МаМа::Предмет>;
    }
    якщо шлях.дані[0] == М.БН.С.читати_юнікод {
      бібліотека::заповнити_модуль_читати_юнікод(М.дані_виконувача як адреса<Виконувач>, предмет_модуля_запису як адреса<Предмет>);
      вернути предмет_модуля_запису як адреса<МаМа::Предмет>;
    }
    МаМа::увімкнути_стан_падіння(М, пусто);
    вернути МаМа::виділити_предмет_тексту_з_ю8(М, ю8сі"Не вдалося знайти модуль біб") як адреса<МаМа::Предмет>;
  }

  дія машина_виділити_памʼять(М: адреса<МаМа::Машина>, розмір: позитивне): памʼять<п8> {
    ціль В = М.дані_виконувача як адреса<Виконувач>;
    вернути В.система.виділити_сиру_памʼять(В, розмір);
  }

  дія машина_перевиділити_памʼять(М: адреса<МаМа::Машина>, значення: памʼять<п8>, новий_розмір: позитивне): памʼять<п8> {
    ціль В = М.дані_виконувача як адреса<Виконувач>;
    вернути В.система.перевиділити_сиру_памʼять(В, значення, новий_розмір);
  }

  дія машина_звільнити_памʼять(М: адреса<МаМа::Машина>, значення: памʼять<п8>) {
    ціль В = М.дані_виконувача як адреса<Виконувач>;
    В.система.звільнити_сиру_памʼять(В, значення);
  }

  дія машина_вивести(М: адреса<МаМа::Машина>, значення: памʼять<п8>, розмір: позитивне) {
    ціль В = М.дані_виконувача як адреса<Виконувач>;
    В.система.вивести(В, значення, розмір);
  }

  дія машина_вивести_Ю8(М: адреса<МаМа::Машина>, значення: памʼять<п8>, розмір: позитивне) {
    ціль В = М.дані_виконувача як адреса<Виконувач>;
    В.система.вивести_Ю8(В, значення, розмір);
  }

  дія машина_померти(М: адреса<МаМа::Машина>, код: ц32) {
    ціль В = М.дані_виконувача як адреса<Виконувач>;
    В.система.померти(В, код);
  }

  зовнішня дія виділити_виконувач(виділити_сиру_памʼять: (розмір: позитивне) -> памʼять<п8>): адреса<Виконувач> {
    вернути виділити_сиру_памʼять(Виконувач.розмір) як адреса<Виконувач>;
  }

  дія машина_підлога_д64(М: адреса<МаМа::Машина>, значення: д64): д64 {
    вернути д64(mavka_floor(double(значення)));
  }

  дія машина_піднести_до_степеня_д64(М: адреса<МаМа::Машина>, база: д64, експонента: д64): д64 {
    вернути д64(mavka_pow(double(база), double(експонента)));
  }

  дія машина_негація_д64(М: адреса<МаМа::Машина>, значення: д64): д64 {
    вернути д64(mavka_negate(double(значення)));
  }

  дія машина_двійкова_негація_д64(М: адреса<МаМа::Машина>, значення: д64): д64 {
    вернути д64(mavka_bitnot(double(значення)));
  }

  дія машина_д64_в_Ю8(М: адреса<МаМа::Машина>, значення: д64, вихід: адреса<памʼять<п8>>, розмір_виходу: адреса<позитивне>) {
    розмір_виходу::вміст = mavka_double_to_string(значення, вихід як адреса<адреса<char>>);
  }

  зовнішня дія налаштувати_виконувач(В: адреса<Виконувач>, версія_мавки: ВерсіяМавки, система: Система) {
    В.система = система;
    В.версія_мавки = версія_мавки;
    В.М = В.система.виділити_сиру_памʼять(В, МаМа::Машина.розмір) як адреса<МаМа::Машина>;
    МаМа::налаштувати_машину(В.М, В, МаМа::Система {
      виділити_памʼять = машина_виділити_памʼять,
      перевиділити_памʼять = машина_перевиділити_памʼять,
      звільнити_памʼять = машина_звільнити_памʼять,
      вивести = машина_вивести,
      вивести_Ю8 = машина_вивести_Ю8,
      померти = машина_померти,
      підлога_д64 = машина_підлога_д64,
      піднести_до_степеня_д64 = машина_піднести_до_степеня_д64,
      негація_д64 = машина_негація_д64,
      двійкова_негація_д64 = машина_двійкова_негація_д64,
      д64_в_Ю8 = машина_д64_в_Ю8,
    });
    В.М.обробник_отримання_шляху_до_модуля = машина_обробник_отримання_шляху_до_модуля;
    В.М.обробник_взяття_модуля = машина_обробник_взяття_модуля;
    В.М.обробник_взяття_біб = машина_обробник_взяття_біб;
  }

  зовнішня дія розлаштувати_виконувач(В: адреса<Виконувач>) {
    МаМа::розлаштувати_машину(В.М);
  }

  структура ДаніДіалогу {
    В: адреса<Виконувач>;
    середовище: адреса<МаМа::Середовище>;
  }

  дія діалог_виконати(дані: адреса, значення: памʼять<п8>, розмір_значення: позитивне) {
    ціль ввід = значення як памʼять<п8>;
    якщо МаМа::порівняти_Ю8(ввід, ю8сі"") == 0 {
    } інакше {
      ціль дані_діалогу = дані як адреса<ДаніДіалогу>;
      ціль В = дані_діалогу.В;
      ціль середовище = дані_діалогу.середовище;
      ціль текст_коду = виділити<ТекстКоду>(В);
      текст_коду.шлях = пусто;
      МаМа::виділити_копію_Ю8(В.М, ю8сі"ДМ://", МаМа::порахувати_розмір_Ю8(ю8сі"ДМ://"), текст_коду.шлях::адреса);
      якщо текст_коду.шлях == пусто {
        МаМа::ПОМЕРТИ(В.М, ю8сі"Не вдалося виділити копію Ю8");
      }
      текст_коду.значення = пусто;
      МаМа::виділити_копію_Ю8(В.М, ввід, МаМа::порахувати_розмір_Ю8(ввід), текст_коду.значення::адреса);
      якщо текст_коду.значення == пусто {
        МаМа::ПОМЕРТИ(В.М, ю8сі"Не вдалося виділити копію Ю8");
      }
      ціль результат_розбору_мавки = розібрати_мавку(текст_коду);
      якщо результат_розбору_мавки.успіх == 0 {
        ціль предмет_тексту = МаМа::виділити_предмет_юнікоду_з_ю8(В.М, результат_розбору_мавки.помилка.повідомлення);
        змінна ціль місцезнаходження_падіння: адреса<МаМа::МісцезнаходженняПадіння> = пусто;
        якщо результат_розбору_мавки.помилка.місцезнаходження != пусто {
          місцезнаходження_падіння = МаМа::виділити_місцезнаходження_падіння(
            В.М,
            текст_коду.шлях,
            результат_розбору_мавки.помилка.місцезнаходження.рядок
          );
        }
        // потім: надрукувати помилку
        вернути;
      }
      ціль код = МаМа::виділити_код(В.М, ю8сі"ДМ://");
      ціль контекст_компіляції = виділити_контекст_компіляції(В);
      ціль помилка_компіляції = скомпілювати_тіло(В, контекст_компіляції, код, результат_розбору_мавки.тіло, так);
      якщо помилка_компіляції != пусто {
        ціль предмет_тексту = МаМа::виділити_предмет_юнікоду_з_ю8(В.М, помилка_компіляції.повідомлення);
        змінна ціль місцезнаходження_падіння: адреса<МаМа::МісцезнаходженняПадіння> = пусто;
        якщо помилка_компіляції.місцезнаходження != пусто {
          місцезнаходження_падіння = МаМа::виділити_місцезнаходження_падіння(
            В.М,
            текст_коду.шлях,
            помилка_компіляції.місцезнаходження.рядок
          );
        }
        // потім: надрукувати помилку
        вернути;
      }
      мавка::звільнити_контекст_компіляції(В, контекст_компіляції);
      звільнити_результат_розбору_мавки(результат_розбору_мавки);
      звільнити_памʼять(В, текст_коду.шлях);
      звільнити_памʼять(В, текст_коду.значення);
      звільнити(В, текст_коду);
      ціль результат_виконання_коду = МаМа::виконати_код_в_середовищі(В.М, середовище, код);
      якщо В.М.стан_падіння == позитивне(так) {
        // потім: надрукувати падіння
        МаМа::вимкнути_стан_падіння(В.М);
      } інакше {
        надрукувати_предмет(В, результат_виконання_коду як адреса<Предмет>);
      }
    }
  }

  зовнішня дія почати_діалог(В: адреса<Виконувач>): Результат {
    ціль дані_діалогу = виділити<ДаніДіалогу>(В);
    дані_діалогу.В = В;
    дані_діалогу.середовище = МаМа::покласти_тимчасове_середовище(В.М);
    вивести_Ю8(В, ю8сі"Діалог Мавки ");
    вивести_п64(В, В.версія_мавки.г);
    вивести_Ю8(В, ю8сі".");
    вивести_п64(В, В.версія_мавки.м);
    вивести_Ю8(В, ю8сі".");
    вивести_п64(В, В.версія_мавки.в);
    вивести_Ю8(В, ю8сі"\n");
    В.система.розпочати_діалог(В, дані_діалогу, діалог_виконати);
    МаМа::забрати_тимчасове_середовище(В.М);
    вернути результат_успіх(В, пусто);
  }

  зовнішня дія взяти_файл_Ю8(В: адреса<Виконувач>, назва_модуля: адреса<Назва>, шлях_до_файлу: памʼять<п8>): Результат {
    ціль виправлений_шлях_до_файлу: памʼять<п8> = пусто;
    ціль розмір_виправленого_шляху_до_файлу: позитивне = 0;
    якщо В.система.виправити_шлях(В, шлях_до_файлу, МаМа::порахувати_розмір_Ю8(шлях_до_файлу), виправлений_шлях_до_файлу::адреса, розмір_виправленого_шляху_до_файлу::адреса) != 0 {
      // помилка
    }
    ціль предмет_модуля = МаМа::взяти_модуль_за_шляхом(В.М, В.М.глобальне_середовище, назва_модуля як адреса<МаМа::Назва>, виправлений_шлях_до_файлу);
    якщо В.М.стан_падіння == позитивне(так) {
      змінна ціль місцезнаходження_падіння: адреса<МісцезнаходженняПадіння> = пусто;
      якщо В.М.місцезнаходження_падіння != пусто {
        місцезнаходження_падіння = виділити_місцезнаходження_падіння(
          В,
          В.М.місцезнаходження_падіння.шлях_до_файлу,
          В.М.місцезнаходження_падіння.рядок
        );
      }
      ціль результат = результат_падіння(В, предмет_модуля як адреса<Предмет>, місцезнаходження_падіння);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, предмет_модуля як адреса<Предмет>);
  }

  зовнішня дія виконати_ю8(В: адреса<Виконувач>, значення: памʼять<п8>): Результат {
    // ...
  }

  зовнішня дія зберегти_предмет(В: адреса<Виконувач>, предмет: адреса<Предмет>) {
    МаМа::зберегти_предмет(В.М, предмет як адреса<МаМа::Предмет>);
  }

  зовнішня дія видалити_збережений_предмет(В: адреса<Виконувач>) {
    МаМа::видалити_збережений_предмет(В.М);
  }

  зовнішня дія назва_з_Ю8(В: адреса<Виконувач>, значення: памʼять<п8>): адреса<Назва> {
    вернути МаМа::назва_з_Ю8(В.М, значення) як адреса<Назва>;
  }

  зовнішня дія отримати_так(В: адреса<Виконувач>): адреса<Предмет> {
    вернути В.М.предмет_логічного_так як адреса<Предмет>;
  }

  зовнішня дія отримати_ні(В: адреса<Виконувач>): адреса<Предмет> {
    вернути В.М.предмет_логічного_ні як адреса<Предмет>;
  }

  зовнішня дія визначити_глобальний_підмет(В: адреса<Виконувач>, назва: адреса<Назва>, предмет: адреса<Предмет>) {
    МаМа::змінити_в_середовищі(В.М, В.М.глобальне_середовище, назва як адреса<МаМа::Назва>, предмет як адреса<МаМа::Предмет>);
  }

  зовнішня дія утилізувати(В: адреса<Виконувач>) {
    МаМа::утилізувати(В.М);
  }

  структура ДаніНативноїДії {
    В: адреса<Виконувач>;
    нативна_дія: НативнаДія;
    дані: адреса;
    відклик_перед_звільненням: ВідкликПередЗвільненнямПредметаНативноїДії;
  }

  дія нативна_дія_нативної_дії(предмет_нативної_дії: адреса<МаМа::ПредметНативноїДії>, М: адреса<МаМа::Машина>, предмет_я: адреса<МаМа::Предмет>, аргументи: адреса<МаМа::Накопичувач<адреса<МаМа::Предмет>>>, іменовані_аргументи: адреса<МаМа::Реєстр<адреса<МаМа::Назва>, адреса<МаМа::Предмет>>>): адреса<МаМа::Предмет> {
    ціль дані_нативної_дії = предмет_нативної_дії.дані як адреса<ДаніНативноїДії>;
    ціль результат_нативної_дії = дані_нативної_дії.нативна_дія(
      предмет_нативної_дії як адреса<Предмет>,
      дані_нативної_дії.В,
      предмет_я як адреса<Предмет>,
      аргументи.розмір,
      аргументи.дані як памʼять<адреса<Предмет>>,
      іменовані_аргументи як адреса<ІменованіАргументи>,
      дані_нативної_дії.дані
    );
    якщо результат_нативної_дії.падіння != пусто {
      якщо результат_нативної_дії.падіння.місцезнаходження == пусто {
        МаМа::увімкнути_стан_падіння(М, пусто);
      } інакше {
        МаМа::увімкнути_стан_падіння(М, МаМа::виділити_місцезнаходження_падіння(
          М,
          результат_нативної_дії.падіння.місцезнаходження.шлях_до_файлу,
          результат_нативної_дії.падіння.місцезнаходження.рядок
        ));
      }
      мавка::звільнити_падіння(дані_нативної_дії.В, результат_нативної_дії.падіння);
      вернути результат_нативної_дії.значення як адреса<МаМа::Предмет>;
    }
    вернути результат_нативної_дії.значення як адреса<МаМа::Предмет>;
  }

  дія відклик_перед_звільненням_нативної_дії(предмет_нативної_дії: адреса<МаМа::ПредметНативноїДії>, М: адреса<МаМа::Машина>) {
    ціль дані_нативної_дії = предмет_нативної_дії.дані як адреса<ДаніНативноїДії>;
    якщо дані_нативної_дії.відклик_перед_звільненням != пусто {
      дані_нативної_дії.відклик_перед_звільненням(предмет_нативної_дії як адреса<Предмет>, дані_нативної_дії.В, дані_нативної_дії.дані);
    }
    звільнити(дані_нативної_дії.В, предмет_нативної_дії.дані);
  }

  зовнішня дія створити_нативну_дію(В: адреса<Виконувач>, назва: адреса<Назва>, значення: НативнаДія, дані: адреса, відклик_перед_звільненням: ВідкликПередЗвільненнямПредметаНативноїДії): адреса<Предмет> {
    ціль дані_нативної_дії = виділити<ДаніНативноїДії>(В);
    дані_нативної_дії.В = В;
    дані_нативної_дії.нативна_дія = значення;
    дані_нативної_дії.дані = дані;
    дані_нативної_дії.відклик_перед_звільненням = відклик_перед_звільненням;
    ціль предмет_нативної_дії = МаМа::виділити_предмет_нативної_дії(В.М, назва як адреса<МаМа::Назва>, нативна_дія_нативної_дії, дані_нативної_дії, відклик_перед_звільненням_нативної_дії);
    вернути предмет_нативної_дії як адреса<Предмет>;
  }

  зовнішня дія створити_число(В: адреса<Виконувач>, значення: д64): адреса<Предмет> {
    ціль предмет_числа = МаМа::виділити_предмет_числа(В.М, значення);
    вернути предмет_числа як адреса<Предмет>;
  }

  зовнішня дія створити_текст_з_Ю8(В: адреса<Виконувач>, значення: памʼять<п8>): адреса<Предмет> {
    ціль предмет_тексту = МаМа::виділити_предмет_тексту_з_ю8(В.М, значення);
    вернути предмет_тексту як адреса<Предмет>;
  }

  зовнішня дія створити_юнікод_з_Ю8(В: адреса<Виконувач>, значення: памʼять<п8>): адреса<Предмет> {
    ціль предмет_юнікоду = МаМа::виділити_предмет_юнікоду_з_ю8(В.М, значення);
    вернути предмет_юнікоду як адреса<Предмет>;
  }

  зовнішня дія створити_модуль(В: адреса<Виконувач>, назва: адреса<Назва>): адреса<Предмет> {
    ціль предмет_модуля = МаМа::виділити_предмет_модуля(В.М, назва як адреса<МаМа::Назва>);
    вернути предмет_модуля як адреса<Предмет>;
  }

  зовнішня дія створити_список(В: адреса<Виконувач>): адреса<Предмет> {
    ціль предмет_списку = МаМа::виділити_предмет_списку(В.М);
    вернути предмет_списку як адреса<Предмет>;
  }

  зовнішня дія створити_словник(В: адреса<Виконувач>): адреса<Предмет> {
    ціль предмет_словника = МаМа::виділити_предмет_словника(В.М);
    вернути предмет_словника як адреса<Предмет>;
  }

  зовнішня дія створити_байти(В: адреса<Виконувач>, розмір: позитивне): адреса<Предмет> {
    ціль предмет_байтів = МаМа::виділити_предмет_байтів(В.М, розмір);
    вернути предмет_байтів як адреса<Предмет>;
  }

  зовнішня дія створити_адресу(В: адреса<Виконувач>, значення: адреса): адреса<Предмет> {
    ціль предмет_адреси = МаМа::виділити_предмет_адреси(В.М, значення);
    вернути предмет_адреси як адреса<Предмет>;
  }

  зовнішня дія створити_предмет(В: адреса<Виконувач>): адреса<Предмет> {
    ціль предмет = МаМа::предмет_виконати(В.М.предмет_структури_предмет як адреса<МаМа::Предмет>, В.М, пусто, пусто, пусто);
    вернути предмет як адреса<Предмет>;
  }

  зовнішня дія предмет_виконати(предмет: адреса<Предмет>, В: адреса<Виконувач>, предмет_я: адреса<Предмет>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>): Результат {
    ціль накопичувач_аргументів = МаМа::виділити_накопичувач<адреса<МаМа::Предмет>>(В.М);
    змінна ціль п: позитивне = 0;
    поки п < кількість_аргументів {
      МаМа::покласти_в_накопичувач<адреса<МаМа::Предмет>>(В.М, накопичувач_аргументів, аргументи[п] як адреса<МаМа::Предмет>);
      п += 1;
    }
    ціль результат_виконання_предмету = МаМа::предмет_виконати(
      предмет як адреса<МаМа::Предмет>,
      В.М,
      предмет_я як адреса<МаМа::Предмет>,
      накопичувач_аргументів,
      пусто
    );
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_виконання_предмету як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_виконання_предмету як адреса<Предмет>);
  }

  зовнішня дія предмет_отримати_властивість(предмет: адреса<Предмет>, В: адреса<Виконувач>, назва: адреса<Назва>): Результат {
    ціль предмет_властивості = МаМа::предмет_отримати_властивість(предмет як адреса<МаМа::Предмет>, В.М, назва як адреса<МаМа::Назва>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, предмет_властивості як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, предмет_властивості як адреса<Предмет>);
  }

  зовнішня дія предмет_змінити_властивість(предмет: адреса<Предмет>, В: адреса<Виконувач>, назва: адреса<Назва>, значення: адреса<Предмет>): Результат {
    ціль результат_зміни_властивості = МаМа::предмет_змінити_властивість(предмет як адреса<МаМа::Предмет>, В.М, назва як адреса<МаМа::Назва>, значення як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_зміни_властивості як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, пусто);
  }

  зовнішня дія предмет_видалити_властивість(предмет: адреса<Предмет>, В: адреса<Виконувач>, назва: адреса<Назва>): Результат {
    ціль результат_видалення_властивості = МаМа::предмет_видалити_властивість(предмет як адреса<МаМа::Предмет>, В.М, назва як адреса<МаМа::Назва>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_видалення_властивості як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, пусто);
  }

  зовнішня дія предмет_виконати_властивість(предмет: адреса<Предмет>, В: адреса<Виконувач>, назва: адреса<Назва>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Предмет>>, іменовані_аргументи: адреса<ІменованіАргументи>): Результат {
    ціль накопичувач_аргументів = МаМа::виділити_накопичувач<адреса<МаМа::Предмет>>(В.М);
    змінна ціль п: позитивне = 0;
    поки п < кількість_аргументів {
      МаМа::покласти_в_накопичувач<адреса<МаМа::Предмет>>(В.М, накопичувач_аргументів, аргументи[п] як адреса<МаМа::Предмет>);
      п += 1;
    }
    ціль результат_виконання_властивості = МаМа::предмет_виконати_властивість(
      предмет як адреса<МаМа::Предмет>,
      В.М,
      назва як адреса<МаМа::Назва>,
      накопичувач_аргументів,
      пусто
    );
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_виконання_властивості як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_виконання_властивості як адреса<Предмет>);
  }

  зовнішня дія предмет_отримати_елемент(предмет: адреса<Предмет>, В: адреса<Виконувач>, ключ: адреса<Предмет>): Результат {
    ціль результат_елементу = МаМа::предмет_отримати_елемент(предмет як адреса<МаМа::Предмет>, В.М, ключ як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_елементу як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_елементу як адреса<Предмет>);
  }

  зовнішня дія предмет_змінити_елемент(предмет: адреса<Предмет>, В: адреса<Виконувач>, ключ: адреса<Предмет>, значення: адреса<Предмет>): Результат {
    ціль результат_зміни_елементу = МаМа::предмет_змінити_елемент(предмет як адреса<МаМа::Предмет>, В.М, ключ як адреса<МаМа::Предмет>, значення як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_зміни_елементу як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, пусто);
  }

  зовнішня дія предмет_видалити_елемент(предмет: адреса<Предмет>, В: адреса<Виконувач>, ключ: адреса<Предмет>): Результат {
    ціль результат_видалення_елементу = МаМа::предмет_видалити_елемент(предмет як адреса<МаМа::Предмет>, В.М, ключ як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_видалення_елементу як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, пусто);
  }

  зовнішня дія предмет_отримати_перебір(предмет: адреса<Предмет>, В: адреса<Виконувач>): Результат {
    ціль результат_перебору = МаМа::предмет_отримати_перебір(предмет як адреса<МаМа::Предмет>, В.М);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_перебору як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_перебору як адреса<Предмет>);
  }

  зовнішня дія предмет_додати(предмет: адреса<Предмет>, В: адреса<Виконувач>, аргумент: адреса<Предмет>): Результат {
    ціль результат_додавання = МаМа::предмет_додати(предмет як адреса<МаМа::Предмет>, В.М, аргумент як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_додавання як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_додавання як адреса<Предмет>);
  }

  зовнішня дія предмет_відняти(предмет: адреса<Предмет>, В: адреса<Виконувач>, аргумент: адреса<Предмет>): Результат {
    ціль результат_віднімання = МаМа::предмет_відняти(предмет як адреса<МаМа::Предмет>, В.М, аргумент як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_віднімання як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_віднімання як адреса<Предмет>);
  }

  зовнішня дія предмет_помножити(предмет: адреса<Предмет>, В: адреса<Виконувач>, аргумент: адреса<Предмет>): Результат {
    ціль результат_множення = МаМа::предмет_помножити(предмет як адреса<МаМа::Предмет>, В.М, аргумент як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_множення як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_множення як адреса<Предмет>);
  }

  зовнішня дія предмет_поділити(предмет: адреса<Предмет>, В: адреса<Виконувач>, аргумент: адреса<Предмет>): Результат {
    ціль результат_ділення = МаМа::предмет_поділити(предмет як адреса<МаМа::Предмет>, В.М, аргумент як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_ділення як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_ділення як адреса<Предмет>);
  }

  зовнішня дія предмет_остача(предмет: адреса<Предмет>, В: адреса<Виконувач>, аргумент: адреса<Предмет>): Результат {
    ціль результат_остачі = МаМа::предмет_отримати_остачу_ділення(предмет як адреса<МаМа::Предмет>, В.М, аргумент як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_остачі як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
  }

  зовнішня дія предмет_неповна_частка(предмет: адреса<Предмет>, В: адреса<Виконувач>, аргумент: адреса<Предмет>): Результат {
    ціль результат_частки = МаМа::предмет_отримати_неповну_частку_ділення(предмет як адреса<МаМа::Предмет>, В.М, аргумент як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_частки як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_частки як адреса<Предмет>);
  }

  зовнішня дія предмет_степінь(предмет: адреса<Предмет>, В: адреса<Виконувач>, аргумент: адреса<Предмет>): Результат {
    ціль результат_степені = МаМа::предмет_піднести_до_степеня(предмет як адреса<МаМа::Предмет>, В.М, аргумент як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_степені як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_степені як адреса<Предмет>);
  }

  зовнішня дія предмет_вліво(предмет: адреса<Предмет>, В: адреса<Виконувач>, аргумент: адреса<Предмет>): Результат {
    ціль результат_вліво = МаМа::предмет_зсунути_вліво(предмет як адреса<МаМа::Предмет>, В.М, аргумент як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_вліво як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_вліво як адреса<Предмет>);
  }

  зовнішня дія предмет_вправо_зі_заповненням(предмет: адреса<Предмет>, В: адреса<Виконувач>, аргумент: адреса<Предмет>): Результат {
    ціль результат_вправо = МаМа::предмет_зсунути_вправо_зі_заповненням(предмет як адреса<МаМа::Предмет>, В.М, аргумент як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_вправо як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_вправо як адреса<Предмет>);
  }

  зовнішня дія предмет_двійкове_і(предмет: адреса<Предмет>, В: адреса<Виконувач>, аргумент: адреса<Предмет>): Результат {
    ціль результат_двійкового_і = МаМа::предмет_двійкове_і(предмет як адреса<МаМа::Предмет>, В.М, аргумент як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_двійкового_і як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_двійкового_і як адреса<Предмет>);
  }

  зовнішня дія предмет_двійкове_або(предмет: адреса<Предмет>, В: адреса<Виконувач>, аргумент: адреса<Предмет>): Результат {
    ціль результат_двійкового_або = МаМа::предмет_двійкове_або(предмет як адреса<МаМа::Предмет>, В.М, аргумент як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_двійкового_або як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_двійкового_або як адреса<Предмет>);
  }

  зовнішня дія предмет_двійкове_виключне_або(предмет: адреса<Предмет>, В: адреса<Виконувач>, аргумент: адреса<Предмет>): Результат {
    ціль результат_двійкового_виключного_або = МаМа::предмет_двійкове_виключне_або(предмет як адреса<МаМа::Предмет>, В.М, аргумент як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_двійкового_виключного_або як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_двійкового_виключного_або як адреса<Предмет>);
  }

  зовнішня дія предмет_двійкове_не(предмет: адреса<Предмет>, В: адреса<Виконувач>): Результат {
    ціль результат_двійкового_не = МаМа::предмет_двійкове_не(предмет як адреса<МаМа::Предмет>, В.М);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_двійкового_не як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_двійкового_не як адреса<Предмет>);
  }

  зовнішня дія предмет_більше(предмет: адреса<Предмет>, В: адреса<Виконувач>, аргумент: адреса<Предмет>): Результат {
    ціль результат_більше = МаМа::предмет_більше(предмет як адреса<МаМа::Предмет>, В.М, аргумент як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_більше як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_більше як адреса<Предмет>);
  }

  зовнішня дія предмет_менше(предмет: адреса<Предмет>, В: адреса<Виконувач>, аргумент: адреса<Предмет>): Результат {
    ціль результат_менше = МаМа::предмет_менше(предмет як адреса<МаМа::Предмет>, В.М, аргумент як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_менше як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_менше як адреса<Предмет>);
  }

  зовнішня дія предмет_рівно(предмет: адреса<Предмет>, В: адреса<Виконувач>, аргумент: адреса<Предмет>): Результат {
    ціль результат_рівно = МаМа::предмет_рівно(предмет як адреса<МаМа::Предмет>, В.М, аргумент як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_рівно як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_рівно як адреса<Предмет>);
  }

  зовнішня дія предмет_містить(предмет: адреса<Предмет>, В: адреса<Виконувач>, аргумент: адреса<Предмет>): Результат {
    ціль результат_містить = МаМа::предмет_містить(предмет як адреса<МаМа::Предмет>, В.М, аргумент як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_містить як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_містить як адреса<Предмет>);
  }

  зовнішня дія предмет_є(предмет: адреса<Предмет>, В: адреса<Виконувач>, аргумент: адреса<Предмет>): Результат {
    ціль результат_є = МаМа::предмет_є(предмет як адреса<МаМа::Предмет>, В.М, аргумент як адреса<МаМа::Предмет>);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_є як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_є як адреса<Предмет>);
  }

  зовнішня дія предмет_відʼємне(предмет: адреса<Предмет>, В: адреса<Виконувач>): Результат {
    ціль результат_відʼємне = МаМа::предмет_відʼємне(предмет як адреса<МаМа::Предмет>, В.М);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_відʼємне як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_відʼємне як адреса<Предмет>);
  }

  зовнішня дія предмет_числове(предмет: адреса<Предмет>, В: адреса<Виконувач>): Результат {
    ціль результат_числове = МаМа::предмет_числове(предмет як адреса<МаМа::Предмет>, В.М);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_числове як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_числове як адреса<Предмет>);
  }

  зовнішня дія предмет_заперечити(предмет: адреса<Предмет>, В: адреса<Виконувач>): Результат {
    ціль результат_заперечення = МаМа::предмет_заперечити(предмет як адреса<МаМа::Предмет>, В.М);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_заперечення як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_заперечення як адреса<Предмет>);
  }

  зовнішня дія предмет_збільшити(предмет: адреса<Предмет>, В: адреса<Виконувач>): Результат {
    ціль результат_збільшення = МаМа::предмет_збільшити(предмет як адреса<МаМа::Предмет>, В.М);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_збільшення як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_збільшення як адреса<Предмет>);
  }

  зовнішня дія предмет_зменшити(предмет: адреса<Предмет>, В: адреса<Виконувач>): Результат {
    ціль результат_зменшення = МаМа::предмет_зменшити(предмет як адреса<МаМа::Предмет>, В.М);
    якщо В.М.стан_падіння == позитивне(так) {
      ціль результат = результат_падіння(В, результат_зменшення як адреса<Предмет>, пусто);
      МаМа::вимкнути_стан_падіння(В.М);
      вернути результат;
    }
    вернути результат_успіх(В, результат_зменшення як адреса<Предмет>);
  }

  зовнішня дія скопіювати_значення_предмета_юнікоду_як_Ю8(предмет: адреса<Предмет>, В: адреса<Виконувач>, адреса_на_розмір_виходу: адреса<позитивне>, адреса_на_вихід: адреса<памʼять<п8>>): логічне {
    ціль предмет_юнікоду_МаМа = предмет як адреса<МаМа::ПредметЮнікоду>;
    адреса_на_розмір_виходу::вміст = МаМа::перекодувати_Ю32_в_Ю8(В.М, предмет_юнікоду_МаМа.значення, предмет_юнікоду_МаМа.довжина, адреса_на_вихід);
    якщо адреса_на_розмір_виходу::вміст == 0 {
      МаМа::ПОМЕРТИ(В.М, ю8сі"Неможливо перекодувати Ю32 в Ю8");
    }
    вернути так;
  }

  зовнішня дія результат_успіх(В: адреса<Виконувач>, предмет: адреса<Предмет>): Результат {
    вернути Результат { падіння = пусто, значення = предмет };
  }

  зовнішня дія результат_падіння(В: адреса<Виконувач>, предмет: адреса<Предмет>, місцезнаходження_падіння: адреса<МісцезнаходженняПадіння>): Результат {
    // потім: зробити копію місцезнаходження падіння
    // потім: зробити копію історії виконання падіння
    ціль падіння = виділити_падіння(В, місцезнаходження_падіння, 0, пусто);
    вернути Результат { падіння = падіння, значення = предмет };
  }

  зовнішня дія виділити_падіння(В: адреса<Виконувач>, місцезнаходження_падіння: адреса<МісцезнаходженняПадіння>, розмір_історії: позитивне, історія: памʼять<ЕлементІсторіїПадіння>): адреса<Падіння> {
    ціль падіння = виділити<Падіння>(В);
    падіння.місцезнаходження = місцезнаходження_падіння;
    падіння.розмір_історії = розмір_історії;
    падіння.історія = історія;
    вернути падіння;
  }

  зовнішня дія звільнити_падіння(В: адреса<Виконувач>, падіння: адреса<Падіння>) {
    якщо падіння.місцезнаходження != пусто {
      звільнити_місцезнаходження_падіння(В, падіння.місцезнаходження);
    }
    змінна ціль п: позитивне = 0;
    поки п < падіння.розмір_історії {
      звільнити_памʼять(В, падіння.історія[п].шлях_до_файлу);
      п += 1;
    }
    якщо падіння.історія != пусто {
      звільнити_памʼять(В, падіння.історія);
    }
    звільнити(В, падіння);
  }

  зовнішня дія виділити_місцезнаходження_падіння(В: адреса<Виконувач>, шлях_до_файлу: памʼять<п8>, рядок: позитивне): адреса<МісцезнаходженняПадіння> {
    ціль місцезнаходження_падіння = виділити<МісцезнаходженняПадіння>(В);
    місцезнаходження_падіння.шлях_до_файлу = пусто;
    МаМа::виділити_копію_Ю8(В.М, шлях_до_файлу, МаМа::порахувати_розмір_Ю8(шлях_до_файлу), місцезнаходження_падіння.шлях_до_файлу::адреса);
    якщо місцезнаходження_падіння.шлях_до_файлу == пусто {
      МаМа::ПОМЕРТИ(В.М, ю8сі"Неможливо виділити копію шляху до файлу");
    }
    місцезнаходження_падіння.рядок = позитивне(рядок);
    вернути місцезнаходження_падіння;
  }

  зовнішня дія звільнити_місцезнаходження_падіння(В: адреса<Виконувач>, місцезнаходження_падіння: адреса<МісцезнаходженняПадіння>) {
    звільнити_памʼять(В, місцезнаходження_падіння.шлях_до_файлу);
    звільнити(В, місцезнаходження_падіння);
  }

  зовнішня дія отримати_шлях_до_файлу_з_місцезнаходження_падіння(В: адреса<Виконувач>, місцезнаходження_падіння: адреса<МісцезнаходженняПадіння>): памʼять<п8> {
    ціль мп = місцезнаходження_падіння як адреса<МаМа::МісцезнаходженняПадіння>;
    вернути мп.шлях_до_файлу;
  }

  зовнішня дія отримати_рядок_з_місцезнаходження_падіння(В: адреса<Виконувач>, місцезнаходження_падіння: адреса<МісцезнаходженняПадіння>): позитивне {
    ціль мп = місцезнаходження_падіння як адреса<МаМа::МісцезнаходженняПадіння>;
    вернути мп.рядок;
  }

  зовнішня дія отримати_текстове_зображення_предмета_як_Ю8(предмет: адреса<Предмет>, В: адреса<Виконувач>, вихід: адреса<памʼять<п8>>): позитивне {
    ціль накопичувач_ю8 = МаМа::зробити_накопичувач_ю8(В.М);
    МаМа::надрукувати_предмет_в_накопичувач_ю8(предмет як адреса<МаМа::Предмет>, В.М, накопичувач_ю8::адреса, 0);
    вихід::вміст = МаМа::виділити_ю8_з_накопичувача_ю8(В.М, накопичувач_ю8::адреса);
    МаМа::звільнити_значення_накопичувача_ю8(В.М, накопичувач_ю8);
    вернути МаМа::порахувати_розмір_Ю8(вихід::вміст);
  }

  зовнішня дія отримати_значення_числа(предмет: адреса<Предмет>, В: адреса<Виконувач>): д64 {
    якщо перевірити_чи_предмет_є_числом(предмет, В) == ні {
      вернути 0;
    }
    ціль предмет_числа = предмет як адреса<МаМа::ПредметЧисла>;
    вернути предмет_числа.значення;
  }

  зовнішня дія перевірити_чи_предмет_виражається_логічним_так(предмет: адреса<Предмет>, В: адреса<Виконувач>): логічне {
    вернути МаМа::перевірити_чи_предмет_виражається_логічним_так(предмет як адреса<МаМа::Предмет>, В.М);
  }

  зовнішня дія перевірити_чи_предмет_є_дією(предмет: адреса<Предмет>, В: адреса<Виконувач>): логічне {
    вернути МаМа::перевірити_чи_предмет_є_дією(предмет як адреса<МаМа::Предмет>, В.М);
  }

  зовнішня дія перевірити_чи_предмет_є_нативною_дією(предмет: адреса<Предмет>, В: адреса<Виконувач>): логічне {
    вернути МаМа::перевірити_чи_предмет_є_нативною_дією(предмет як адреса<МаМа::Предмет>, В.М);
  }

  зовнішня дія перевірити_чи_предмет_є_числом(предмет: адреса<Предмет>, В: адреса<Виконувач>): логічне {
    вернути МаМа::перевірити_чи_предмет_є_числом(предмет як адреса<МаМа::Предмет>, В.М);
  }

  зовнішня дія перевірити_чи_предмет_є_текстом(предмет: адреса<Предмет>, В: адреса<Виконувач>): логічне {
    вернути МаМа::перевірити_чи_предмет_є_текстом(предмет як адреса<МаМа::Предмет>, В.М);
  }

  зовнішня дія перевірити_чи_предмет_є_юнікодом(предмет: адреса<Предмет>, В: адреса<Виконувач>): логічне {
    вернути МаМа::перевірити_чи_предмет_є_юнікодом(предмет як адреса<МаМа::Предмет>, В.М);
  }

  зовнішня дія перевірити_чи_предмет_є_модулем(предмет: адреса<Предмет>, В: адреса<Виконувач>): логічне {
    вернути МаМа::перевірити_чи_предмет_є_модулем(предмет як адреса<МаМа::Предмет>, В.М);
  }

  зовнішня дія перевірити_чи_предмет_є_списком(предмет: адреса<Предмет>, В: адреса<Виконувач>): логічне {
    вернути МаМа::перевірити_чи_предмет_є_списком(предмет як адреса<МаМа::Предмет>, В.М);
  }

  зовнішня дія перевірити_чи_предмет_є_словником(предмет: адреса<Предмет>, В: адреса<Виконувач>): логічне {
    вернути МаМа::перевірити_чи_предмет_є_словником(предмет як адреса<МаМа::Предмет>, В.М);
  }

  зовнішня дія перевірити_чи_предмет_є_логічним(предмет: адреса<Предмет>, В: адреса<Виконувач>): логічне {
    вернути МаМа::перевірити_чи_предмет_є_логічним(предмет як адреса<МаМа::Предмет>, В.М);
  }

  зовнішня дія перевірити_чи_предмет_є_байтами(предмет: адреса<Предмет>, В: адреса<Виконувач>): логічне {
    вернути МаМа::перевірити_чи_предмет_є_байтами(предмет як адреса<МаМа::Предмет>, В.М);
  }

  зовнішня дія перевірити_чи_предмет_є_адресою(предмет: адреса<Предмет>, В: адреса<Виконувач>): логічне {
    вернути МаМа::перевірити_чи_предмет_є_адресою(предмет як адреса<МаМа::Предмет>, В.М);
  }

  зовнішня дія записати_в_байти(предмет: адреса<Предмет>, В: адреса<Виконувач>, дані: памʼять<п8>, розмір: позитивне, зсув: позитивне) {
    МаМа::записати_в_байти(предмет як адреса<МаМа::ПредметБайтів>, В.М, дані, розмір, зсув);
  }

  зовнішня дія отримати_копію_даних_тексту(предмет: адреса<Предмет>, В: адреса<Виконувач>, вихід: адреса<памʼять<п8>>): позитивне {
    вернути МаМа::отримати_копію_даних_тексту(предмет як адреса<МаМа::ПредметТексту>, В.М, вихід);
  }

  зовнішня дія отримати_дані_тексту(предмет: адреса<Предмет>, В: адреса<Виконувач>, вихід: адреса<памʼять<п8>>): позитивне {
    вернути МаМа::отримати_дані_тексту(предмет як адреса<МаМа::ПредметТексту>, В.М, вихід);
  }

  зовнішня дія отримати_копію_даних_юнікоду(предмет: адреса<Предмет>, В: адреса<Виконувач>, вихід: адреса<памʼять<п32>>): позитивне {
    вернути МаМа::отримати_копію_даних_юнікоду(предмет як адреса<МаМа::ПредметЮнікоду>, В.М, вихід);
  }

  зовнішня дія отримати_дані_юнікоду(предмет: адреса<Предмет>, В: адреса<Виконувач>, вихід: адреса<памʼять<п32>>): позитивне {
    вернути МаМа::отримати_дані_юнікоду(предмет як адреса<МаМа::ПредметЮнікоду>, В.М, вихід);
  }

  зовнішня дія отримати_копію_даних_юнікоду_як_Ю8(предмет: адреса<Предмет>, В: адреса<Виконувач>, вихід: адреса<памʼять<п8>>): позитивне {
    вернути МаМа::отримати_копію_даних_юнікоду_як_Ю8(предмет як адреса<МаМа::ПредметЮнікоду>, В.М, вихід);
  }

  зовнішня дія отримати_копію_даних_байтів(предмет: адреса<Предмет>, В: адреса<Виконувач>, вихід: адреса<памʼять<п8>>): позитивне {
    вернути МаМа::отримати_копію_даних_байтів(предмет як адреса<МаМа::ПредметБайтів>, В.М, вихід);
  }

  зовнішня дія отримати_дані_байтів(предмет: адреса<Предмет>, В: адреса<Виконувач>, вихід: адреса<памʼять<п8>>): позитивне {
    вернути МаМа::отримати_дані_байтів(предмет як адреса<МаМа::ПредметБайтів>, В.М, вихід);
  }

  зовнішня дія отримати_значення_адреси(предмет: адреса<Предмет>, В: адреса<Виконувач>): адреса {
    вернути МаМа::отримати_значення_адреси(предмет як адреса<МаМа::ПредметАдреси>, В.М);
  }

  зовнішня дія знайти_іменований_аргумент(В: адреса<Виконувач>, іменовані_аргументи: адреса<ІменованіАргументи>, назва: адреса<Назва>, вихід: адреса<адреса<Предмет>>): логічне {
    ціль реєстр_іменованих_аргументів = іменовані_аргументи як адреса<МаМа::Реєстр<адреса<МаМа::Назва>, адреса<МаМа::Предмет>>>;
    ціль елемент_реєстру = МаМа::отримати_з_реєстру<адреса<МаМа::Назва>, адреса<МаМа::Предмет>>(В.М, реєстр_іменованих_аргументів, назва як адреса<МаМа::Назва>);
    якщо елемент_реєстру == пусто {
      вернути ні;
    }
    вихід::вміст = елемент_реєстру.значення як адреса<Предмет>;
    вернути так;
  }

  зовнішня дія записати_іменований_аргумент(В: адреса<Виконувач>, іменовані_аргументи: адреса<ІменованіАргументи>, назва: адреса<Назва>, значення: адреса<Предмет>) {
    ціль реєстр_іменованих_аргументів = іменовані_аргументи як адреса<МаМа::Реєстр<адреса<МаМа::Назва>, адреса<МаМа::Предмет>>>;
    МаМа::змінити_в_реєстрі<адреса<МаМа::Назва>, адреса<МаМа::Предмет>>(В.М, реєстр_іменованих_аргументів, назва як адреса<МаМа::Назва>, значення як адреса<МаМа::Предмет>);
  }

  зовнішня дія виділити_іменовані_аргументи(В: адреса<Виконувач>): адреса<ІменованіАргументи> {
    вернути пусто;
  }

  зовнішня дія звільнити_іменовані_аргументи(В: адреса<Виконувач>, іменовані_аргументи: адреса<ІменованіАргументи>) {
    // ...
  }

  зовнішня дія вивести_Ю8(В: адреса<Виконувач>, значення: памʼять<п8>) {
    МаМа::вивести_Ю8(В.М, значення);
  }

  зовнішня дія надрукувати_Ю8(В: адреса<Виконувач>, значення: памʼять<п8>) {
    МаМа::надрукувати_Ю8(В.М, значення);
  }

  зовнішня дія надрукувати_предмет(В: адреса<Виконувач>, значення: адреса<Предмет>) {
    МаМа::надрукувати_предмет(значення як адреса<МаМа::Предмет>, В.М, 1);
  }

  зовнішня дія вивести_п64(В: адреса<Виконувач>, значення: п64) {
    МаМа::вивести_п64(В.М, значення);
  }
}