////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення мавка/бібліотека;
взяти визначення РМв1;

зовнішня дія mavka_load_shared_object_function_ptr_from_file(path: адреса<unsigned_char>, name: адреса<unsigned_char>): адреса;

секція РМв1 {
  секція втілення {
    дія виділити_падіння(): адреса<Падіння> {
      вернути пусто;
    }

    дія звільнити_падіння(падіння: адреса<Падіння>) {
      // ...
    }

    // УВАГА: ця дія звільняє передане падіння мавки з памʼяті!
    дія перетворити_падіння_мавки_в_падіння_РМв1(падіння_мавки: адреса<мавка::Падіння>): адреса<Падіння> {
      ціль падіння = мавка::виділити<Падіння>();
      якщо падіння_мавки.місцезнаходження == пусто {
        падіння.місцезнаходження = пусто;
      } інакше {
        падіння.місцезнаходження = мавка::виділити<МісцезнаходженняПадіння>();
        якщо МаМа::виділити_копію_Ю8(падіння_мавки.місцезнаходження.шлях_до_файлу, МаМа::порахувати_розмір_Ю8(падіння_мавки.місцезнаходження.шлях_до_файлу), падіння.місцезнаходження.шлях_до_файлу::адреса) == ні {
          МаМа::ПОМЕРТИ(ю8":(");
        }
        падіння.місцезнаходження.рядок = падіння_мавки.місцезнаходження.рядок;
      }
      падіння.розмір_історії = падіння_мавки.розмір_історії;
      падіння.історія = мавка::виділити<ЕлементІсторіїПадіння>(ц32(падіння_мавки.розмір_історії));
      змінна ціль п: позитивне = 0;
      поки п < падіння_мавки.розмір_історії {
        якщо МаМа::виділити_копію_Ю8(падіння_мавки.історія[п].шлях_до_файлу, МаМа::порахувати_розмір_Ю8(падіння_мавки.історія[п].шлях_до_файлу), падіння.історія[п].шлях_до_файлу::адреса) == ні {
          МаМа::ПОМЕРТИ(ю8":(");
        }
        падіння.історія[п].рядок = падіння_мавки.історія[п].рядок;
        падіння.історія[п].назва_дії = падіння_мавки.історія[п].назва_дії як адреса<Назва>;
        п += 1;
      }
      мавка::звільнити_падіння(падіння_мавки);
      вернути падіння;
    }

    // УВАГА: ця дія звільняє падіння мавки з переданого результату з памʼяті!
    дія перетворити_результат_мавки_в_результат_РМв1(результат_мавки: мавка::Результат): Результат {
      якщо результат_мавки.падіння == пусто {
        вернути Результат {
          падіння = пусто,
          значення = результат_мавки.значення як адреса<Обʼєкт>
        };
      } інакше {
        вернути Результат {
          падіння = перетворити_падіння_мавки_в_падіння_РМв1(результат_мавки.падіння),
          значення = результат_мавки.значення як адреса<Обʼєкт>
        };
      }
    }

    // УВАГА: ця дія звільняє передане падіння РМв1 з памʼяті!
    дія перетворити_падіння_РМв1_в_падіння_мавки(падіння_РМв1: адреса<Падіння>): адреса<мавка::Падіння> {
      ціль падіння = мавка::виділити<мавка::Падіння>();
      якщо падіння_РМв1.місцезнаходження == пусто {
        падіння.місцезнаходження = пусто;
      } інакше {
        падіння.місцезнаходження = мавка::виділити<мавка::МісцезнаходженняПадіння>();
        якщо МаМа::виділити_копію_Ю8(падіння_РМв1.місцезнаходження.шлях_до_файлу, МаМа::порахувати_розмір_Ю8(падіння_РМв1.місцезнаходження.шлях_до_файлу), падіння.місцезнаходження.шлях_до_файлу::адреса) == ні {
          МаМа::ПОМЕРТИ(ю8":(");
        }
        падіння.місцезнаходження.рядок = падіння_РМв1.місцезнаходження.рядок;
      }
      падіння.розмір_історії = падіння_РМв1.розмір_історії;
      падіння.історія = мавка::виділити<мавка::ЕлементІсторіїПадіння>(ц32(падіння_РМв1.розмір_історії));
      змінна ціль п: позитивне = 0;
      поки п < падіння_РМв1.розмір_історії {
        якщо МаМа::виділити_копію_Ю8(падіння_РМв1.історія[п].шлях_до_файлу, МаМа::порахувати_розмір_Ю8(падіння_РМв1.історія[п].шлях_до_файлу), падіння.історія[п].шлях_до_файлу::адреса) == ні {
          МаМа::ПОМЕРТИ(ю8":(");
        }
        падіння.історія[п].рядок = падіння_РМв1.історія[п].рядок;
        падіння.історія[п].назва_дії = падіння_РМв1.історія[п].назва_дії як адреса<мавка::Назва>;
        п += 1;
      }
      звільнити_падіння(падіння_РМв1);
      вернути падіння;
    }

    // УВАГА: ця дія звільняє падіння РМв1 з переданого результату з памʼяті!
    дія перетворити_результат_РМв1_в_результат_мавки(результат_РМв1: Результат): мавка::Результат {
      якщо результат_РМв1.падіння == пусто {
        вернути мавка::Результат {
          падіння = пусто,
          значення = результат_РМв1.значення як адреса<мавка::Обʼєкт>
        };
      } інакше {
        вернути мавка::Результат {
          падіння = перетворити_падіння_РМв1_в_падіння_мавки(результат_РМв1.падіння),
          значення = результат_РМв1.значення як адреса<мавка::Обʼєкт>
        };
      }
    }

    дія РМв1_надрукувати_Ю8(значення: памʼять<п8>, Р: адреса<Розширення>) {
      МаМа::надрукувати_ю8(значення);
    }

    дія РМв1_надрукувати_обʼєкт(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, глибина: позитивне) {
      ціль В = Р.В як адреса<мавка::Виконувач>;
      ціль М = В.М;
      МаМа::надрукувати_обʼєкт(обʼєкт як адреса<МаМа::Обʼєкт>, М, глибина);
    }

    дія РМв1_взяти_файл(Р: адреса<Розширення>, назва_модуля: адреса<Назва>, шлях_до_файлу: Ю8): Результат {
      ціль результат_мавки = мавка::взяти_файл(Р.В як адреса<мавка::Виконувач>, назва_модуля як адреса<мавка::Назва>, шлях_до_файлу);
      вернути перетворити_результат_мавки_в_результат_РМв1(результат_мавки);
    }

    дія РМв1_зберегти_обʼєкт(Р: адреса<Розширення>, обʼєкт: адреса<Обʼєкт>) {
      мавка::зберегти_обʼєкт(Р.В як адреса<мавка::Виконувач>, обʼєкт як адреса<мавка::Обʼєкт>);
    }

    дія РМв1_видалити_збережений_обʼєкт(Р: адреса<Розширення>) {
      мавка::видалити_збережений_обʼєкт(Р.В як адреса<мавка::Виконувач>);
    }

    дія РМв1_назва_з_Ю8(Р: адреса<Розширення>, значення: Ю8): адреса<Назва> {
      вернути мавка::назва_з_Ю8(Р.В як адреса<мавка::Виконувач>, значення) як адреса<Назва>;
    }

    структура ДаніНативноїДії {
      Р: адреса<Розширення>;
      нативна_дія: НативнаДія;
      дані: адреса;
      відклик_перед_звільненням: ВідкликПередЗвільненнямОбʼєктаНативноїДії;
    }

    дія нативна_дія_нативної_дії(обʼєкт_нативної_дії: адреса<мавка::Обʼєкт>, В: адреса<мавка::Виконувач>, обʼєкт_я: адреса<мавка::Обʼєкт>, аргументи: адреса<мавка::Накопичувач<адреса<мавка::Обʼєкт>>>, іменовані_аргументи: адреса<мавка::Реєстр<адреса<мавка::Назва>, адреса<мавка::Обʼєкт>>>, дані: адреса): мавка::Результат {
      ціль дані_нативної_дії = дані як адреса<ДаніНативноїДії>;
      ціль результат_РМв1 = дані_нативної_дії.нативна_дія(
        обʼєкт_нативної_дії як адреса<Обʼєкт>,
        дані_нативної_дії.Р,
        обʼєкт_я як адреса<Обʼєкт>,
        аргументи.розмір,
        аргументи.дані як памʼять<адреса<Обʼєкт>>,
        іменовані_аргументи як адреса<МаМа::Реєстр<адреса<Назва>, адреса<Обʼєкт>>>,
        дані_нативної_дії.дані
      );
      вернути перетворити_результат_РМв1_в_результат_мавки(результат_РМв1);
    }

    дія відклик_перед_звільненням_нативної_дії(обʼєкт_нативної_дії: адреса<мавка::Обʼєкт>, В: адреса<мавка::Виконувач>, дані: адреса) {
      ціль дані_нативної_дії = дані як адреса<ДаніНативноїДії>;
      якщо дані_нативної_дії.відклик_перед_звільненням != пусто {
        дані_нативної_дії.відклик_перед_звільненням(обʼєкт_нативної_дії як адреса<Обʼєкт>, дані_нативної_дії.Р, дані_нативної_дії.дані);
      }
      мавка::звільнити(дані);
    }

    дія РМв1_створити_нативну_дію(Р: адреса<Розширення>, назва: адреса<Назва>, значення: НативнаДія, дані: адреса, відклик_перед_звільненням: ВідкликПередЗвільненнямОбʼєктаНативноїДії): адреса<Обʼєкт> {
      ціль дані_нативної_дії = мавка::виділити<ДаніНативноїДії>();
      дані_нативної_дії.Р = Р;
      дані_нативної_дії.нативна_дія = значення;
      дані_нативної_дії.дані = дані;
      дані_нативної_дії.відклик_перед_звільненням = відклик_перед_звільненням;
      ціль обʼєкт_нативної_дії = мавка::створити_нативну_дію(Р.В як адреса<мавка::Виконувач>, назва як адреса<мавка::Назва>, нативна_дія_нативної_дії, дані_нативної_дії, відклик_перед_звільненням_нативної_дії);
      вернути обʼєкт_нативної_дії як адреса<Обʼєкт>;
    }

    дія РМв1_створити_число(Р: адреса<Розширення>, значення: д64): адреса<Обʼєкт> {
      вернути мавка::створити_число(Р.В як адреса<мавка::Виконувач>, значення) як адреса<Обʼєкт>;
    }

    дія РМв1_створити_текст_з_Ю8(Р: адреса<Розширення>, значення: Ю8): адреса<Обʼєкт> {
      вернути мавка::створити_текст_з_Ю8(Р.В як адреса<мавка::Виконувач>, значення) як адреса<Обʼєкт>;
    }

    дія РМв1_створити_юнікод_з_Ю8(Р: адреса<Розширення>, значення: Ю8): адреса<Обʼєкт> {
      вернути мавка::створити_юнікод_з_Ю8(Р.В як адреса<мавка::Виконувач>, значення) як адреса<Обʼєкт>;
    }

    дія РМв1_створити_модуль(Р: адреса<Розширення>, назва: адреса<Назва>): адреса<Обʼєкт> {
      вернути мавка::створити_модуль(Р.В як адреса<мавка::Виконувач>, назва як адреса<мавка::Назва>) як адреса<Обʼєкт>;
    }

    дія РМв1_створити_список(Р: адреса<Розширення>): адреса<Обʼєкт> {
      вернути мавка::створити_список(Р.В як адреса<мавка::Виконувач>) як адреса<Обʼєкт>;
    }

    дія РМв1_створити_словник(Р: адреса<Розширення>): адреса<Обʼєкт> {
      вернути мавка::створити_словник(Р.В як адреса<мавка::Виконувач>) як адреса<Обʼєкт>;
    }

    дія РМв1_створити_обʼєкт(Р: адреса<Розширення>): адреса<Обʼєкт> {
      вернути мавка::створити_обʼєкт(Р.В як адреса<мавка::Виконувач>) як адреса<Обʼєкт>;
    }

    дія РМв1_обʼєкт_виконати(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, обʼєкт_я: адреса<Обʼєкт>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Обʼєкт>>): Результат {
      ціль накопичувач_аргументів = МаМа::зробити_накопичувач<адреса<мавка::Обʼєкт>>();
      змінна ціль п: позитивне = 0;
      поки п < кількість_аргументів {
        МаМа::покласти_в_накопичувач<адреса<мавка::Обʼєкт>>(накопичувач_аргументів::адреса, аргументи[п] як адреса<мавка::Обʼєкт>);
        п += 1;
      }
      ціль результат_мавки = мавка::обʼєкт_виконати(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        обʼєкт_я як адреса<мавка::Обʼєкт>,
        накопичувач_аргументів
      );
      МаМа::звільнити_значення_накопичувача<адреса<мавка::Обʼєкт>>(накопичувач_аргументів);
      вернути перетворити_результат_мавки_в_результат_РМв1(результат_мавки);
    }

    дія РМв1_обʼєкт_отримати_властивість(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, назва: адреса<Назва>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_отримати_властивість(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        назва як адреса<мавка::Назва>
      ));
    }

    дія РМв1_обʼєкт_змінити_властивість(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, назва: адреса<Назва>, значення: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_змінити_властивість(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        назва як адреса<мавка::Назва>,
        значення як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_видалити_властивість(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, назва: адреса<Назва>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_видалити_властивість(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        назва як адреса<мавка::Назва>
      ));
    }

    дія РМв1_обʼєкт_виконати_властивість(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, назва: адреса<Назва>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<Обʼєкт>>): Результат {
      ціль накопичувач_аргументів = МаМа::зробити_накопичувач<адреса<мавка::Обʼєкт>>();
      змінна ціль п: позитивне = 0;
      поки п < кількість_аргументів {
        МаМа::покласти_в_накопичувач<адреса<мавка::Обʼєкт>>(накопичувач_аргументів::адреса, аргументи[п] як адреса<мавка::Обʼєкт>);
        п += 1;
      }
      ціль результат_мавки = мавка::обʼєкт_виконати_властивість(
          обʼєкт як адреса<мавка::Обʼєкт>,
          Р.В як адреса<мавка::Виконувач>,
          назва як адреса<мавка::Назва>,
          накопичувач_аргументів
      );
      МаМа::звільнити_значення_накопичувача<адреса<мавка::Обʼєкт>>(накопичувач_аргументів);
      вернути перетворити_результат_мавки_в_результат_РМв1(результат_мавки);
    }

    дія РМв1_обʼєкт_отримати_елемент(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, ключ: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_отримати_елемент(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        ключ як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_змінити_елемент(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_змінити_елемент(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        ключ як адреса<мавка::Обʼєкт>,
        значення як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_видалити_елемент(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, ключ: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_видалити_елемент(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        ключ як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_отримати_перебір(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_отримати_перебір(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>
      ));
    }

    дія РМв1_обʼєкт_додати(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, аргумент: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_додати(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        аргумент як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_відняти(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, аргумент: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_відняти(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        аргумент як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_помножити(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, аргумент: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_помножити(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        аргумент як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_поділити(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, аргумент: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_поділити(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        аргумент як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_остача(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, аргумент: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_остача(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        аргумент як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_неповна_частка(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, аргумент: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_неповна_частка(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        аргумент як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_степінь(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, аргумент: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_степінь(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        аргумент як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_вліво(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, аргумент: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_вліво(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        аргумент як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_вправо_зі_заповненням(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, аргумент: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_вправо_зі_заповненням(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        аргумент як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_двійкове_і(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, аргумент: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_двійкове_і(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        аргумент як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_двійкове_або(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, аргумент: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_двійкове_або(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        аргумент як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_двійкове_виключне_або(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, аргумент: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_двійкове_виключне_або(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        аргумент як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_двійкове_не(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_двійкове_не(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>
      ));
    }

    дія РМв1_обʼєкт_більше(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, аргумент: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_більше(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        аргумент як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_менше(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, аргумент: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_менше(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        аргумент як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_рівно(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, аргумент: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_рівно(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        аргумент як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_містить(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, аргумент: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_містить(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        аргумент як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_є(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>, аргумент: адреса<Обʼєкт>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_є(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>,
        аргумент як адреса<мавка::Обʼєкт>
      ));
    }

    дія РМв1_обʼєкт_відʼємне(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_відʼємне(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>
      ));
    }

    дія РМв1_обʼєкт_числове(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_числове(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>
      ));
    }

    дія РМв1_обʼєкт_заперечити(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_заперечити(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>
      ));
    }

    дія РМв1_обʼєкт_збільшити(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_збільшити(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>
      ));
    }

    дія РМв1_обʼєкт_зменшити(обʼєкт: адреса<Обʼєкт>, Р: адреса<Розширення>): Результат {
      вернути перетворити_результат_мавки_в_результат_РМв1(мавка::обʼєкт_зменшити(
        обʼєкт як адреса<мавка::Обʼєкт>,
        Р.В як адреса<мавка::Виконувач>
      ));
    }

    місцева дія нативна_дія_модуля_мавка_завантажити_РМв1(обʼєкт_нативної_дії: адреса<мавка::Обʼєкт>, В: адреса<мавка::Виконувач>, обʼєкт_я: адреса<мавка::Обʼєкт>, аргументи: адреса<мавка::Накопичувач<адреса<мавка::Обʼєкт>>>, іменовані_аргументи: адреса<мавка::Реєстр<адреса<мавка::Назва>, адреса<мавка::Обʼєкт>>>, дані: адреса): мавка::Результат {
      якщо аргументи.розмір > 0 {
        ціль обʼєкт_аргумента_шляху = аргументи.дані[0];
        ціль розмір_ю8_шляху: позитивне = 0;
        ціль ю8_шляху: Ю8 = пусто;
        якщо мавка::скопіювати_значення_обʼєкта_юнікоду_як_Ю8(обʼєкт_аргумента_шляху, В, розмір_ю8_шляху::адреса, ю8_шляху::адреса) == ні {
          вернути мавка::результат_падіння(пусто, пусто);
        }
        ціль завантажити_РМв1 = mavka_load_shared_object_function_ptr_from_file(ю8_шляху, ю8"завантажити_РМв1") як (Р: адреса<Розширення>) -> ніщо;
        якщо завантажити_РМв1 == пусто {
          МаМа::надрукувати_ю8(ю8"Помилка завантаження функції з файлу");
          вернути мавка::результат_падіння(пусто, пусто);
        }
        ціль обʼєкт_модуля_розширення = мавка::створити_модуль(В, мавка::назва_з_Ю8(В, ю8"розширення"));
        мавка::зберегти_обʼєкт(В, обʼєкт_модуля_розширення);
        ціль розширення = мавка::виділити<Розширення>();
        розширення.мажор = МАЖОР;
        розширення.мінор = МІНОР;
        розширення.патч = ПАТЧ;
        розширення.дані = пусто;
        розширення.В = В;
        розширення.виділити_падіння = виділити_падіння;
        розширення.звільнити_падіння = звільнити_падіння;
        розширення.обʼєкт_модуля_розширення = обʼєкт_модуля_розширення як адреса<Обʼєкт>;
        розширення.обʼєкт_логічного_так = В.М.обʼєкт_логічного_так як адреса<Обʼєкт>;
        розширення.обʼєкт_логічного_ні = В.М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
        розширення.надрукувати_Ю8 = РМв1_надрукувати_Ю8;
        розширення.надрукувати_обʼєкт = РМв1_надрукувати_обʼєкт;
        розширення.взяти_файл = РМв1_взяти_файл;
        розширення.зберегти_обʼєкт = РМв1_зберегти_обʼєкт;
        розширення.видалити_збережений_обʼєкт = РМв1_видалити_збережений_обʼєкт;
        розширення.назва_з_Ю8 = РМв1_назва_з_Ю8;
        розширення.створити_нативну_дію = РМв1_створити_нативну_дію;
        розширення.створити_число = РМв1_створити_число;
        розширення.створити_текст_з_Ю8 = РМв1_створити_текст_з_Ю8;
        розширення.створити_юнікод_з_Ю8 = РМв1_створити_юнікод_з_Ю8;
        розширення.створити_модуль = РМв1_створити_модуль;
        розширення.створити_список = РМв1_створити_список;
        розширення.створити_словник = РМв1_створити_словник;
        розширення.створити_обʼєкт = РМв1_створити_обʼєкт;
        розширення.обʼєкт_виконати = РМв1_обʼєкт_виконати;
        розширення.обʼєкт_отримати_властивість = РМв1_обʼєкт_отримати_властивість;
        розширення.обʼєкт_змінити_властивість = РМв1_обʼєкт_змінити_властивість;
        розширення.обʼєкт_видалити_властивість = РМв1_обʼєкт_видалити_властивість;
        розширення.обʼєкт_виконати_властивість = РМв1_обʼєкт_виконати_властивість;
        розширення.обʼєкт_отримати_елемент = РМв1_обʼєкт_отримати_елемент;
        розширення.обʼєкт_змінити_елемент = РМв1_обʼєкт_змінити_елемент;
        розширення.обʼєкт_видалити_елемент = РМв1_обʼєкт_видалити_елемент;
        розширення.обʼєкт_отримати_перебір = РМв1_обʼєкт_отримати_перебір;
        розширення.обʼєкт_додати = РМв1_обʼєкт_додати;
        розширення.обʼєкт_відняти = РМв1_обʼєкт_відняти;
        розширення.обʼєкт_помножити = РМв1_обʼєкт_помножити;
        розширення.обʼєкт_поділити = РМв1_обʼєкт_поділити;
        розширення.обʼєкт_остача = РМв1_обʼєкт_остача;
        розширення.обʼєкт_неповна_частка = РМв1_обʼєкт_неповна_частка;
        розширення.обʼєкт_степінь = РМв1_обʼєкт_степінь;
        розширення.обʼєкт_вліво = РМв1_обʼєкт_вліво;
        розширення.обʼєкт_вправо_зі_заповненням = РМв1_обʼєкт_вправо_зі_заповненням;
        розширення.обʼєкт_двійкове_і = РМв1_обʼєкт_двійкове_і;
        розширення.обʼєкт_двійкове_або = РМв1_обʼєкт_двійкове_або;
        розширення.обʼєкт_двійкове_виключне_або = РМв1_обʼєкт_двійкове_виключне_або;
        розширення.обʼєкт_двійкове_не = РМв1_обʼєкт_двійкове_не;
        розширення.обʼєкт_більше = РМв1_обʼєкт_більше;
        розширення.обʼєкт_менше = РМв1_обʼєкт_менше;
        розширення.обʼєкт_рівно = РМв1_обʼєкт_рівно;
        розширення.обʼєкт_містить = РМв1_обʼєкт_містить;
        розширення.обʼєкт_є = РМв1_обʼєкт_є;
        розширення.обʼєкт_відʼємне = РМв1_обʼєкт_відʼємне;
        розширення.обʼєкт_числове = РМв1_обʼєкт_числове;
        розширення.обʼєкт_заперечити = РМв1_обʼєкт_заперечити;
        розширення.обʼєкт_збільшити = РМв1_обʼєкт_збільшити;
        розширення.обʼєкт_зменшити = РМв1_обʼєкт_зменшити;
        завантажити_РМв1(розширення);
        мавка::видалити_збережений_обʼєкт(В);
        вернути мавка::результат_успіх(обʼєкт_модуля_розширення);
      }
      вернути мавка::результат_успіх(пусто);
    }
  }
}

секція мавка {
  секція бібліотека {
    місцева дія заповнити_модуль_мавка(В: адреса<Виконувач>, обʼєкт_модуля: адреса<Обʼєкт>) {
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"завантажити_РМв1"), створити_нативну_дію(В, назва_з_Ю8(В, ю8"завантажити_РМв1"), РМв1::втілення::нативна_дія_модуля_мавка_завантажити_РМв1, пусто, пусто));
    }
  }
}