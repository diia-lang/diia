взяти визначення бібліотека;

зовнішня дія математика_abs(значення: дійсне): дійсне;
зовнішня дія математика_acos(значення: дійсне): дійсне;
зовнішня дія математика_asin(значення: дійсне): дійсне;
зовнішня дія математика_atan(значення: дійсне): дійсне;
зовнішня дія математика_atan2(а: дійсне, б: дійсне): дійсне;
зовнішня дія математика_cos(значення: дійсне): дійсне;
зовнішня дія математика_sin(значення: дійсне): дійсне;
зовнішня дія математика_tan(значення: дійсне): дійсне;
зовнішня дія математика_cosh(значення: дійсне): дійсне;
зовнішня дія математика_sinh(значення: дійсне): дійсне;
зовнішня дія математика_tanh(значення: дійсне): дійсне;
зовнішня дія математика_exp(значення: дійсне): дійсне;
//зовнішня дія математика_ldexp(а: дійсне, б: дійсне): дійсне;
зовнішня дія математика_log(значення: дійсне): дійсне;
зовнішня дія математика_log10(значення: дійсне): дійсне;
зовнішня дія математика_pow(а: дійсне, б: дійсне): дійсне;
зовнішня дія математика_sqrt(значення: дійсне): дійсне;
зовнішня дія математика_ceil(значення: дійсне): дійсне;
зовнішня дія математика_floor(значення: дійсне): дійсне;
зовнішня дія математика_round(значення: дійсне): дійсне;

секція мама {
  внутрішня дія нативна_дія_абс(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 1 {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Недостатньо аргументів"));
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
    якщо значення_першого_аргумента.тип != ЗЧисло {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Очікується число першим аргументом"));
    }
    вернути результат_значення(Значення { ЗЧисло, дані = математика_abs(значення_першого_аргумента.дані як дійсне) });
  }

  внутрішня дія нативна_дія_акос(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 1 {
      вернути результат_помилка(Значення { ЗПусто });
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
      якщо значення_першого_аргумента.тип != ЗЧисло {
      вернути результат_помилка(Значення { ЗПусто });
    }
    вернути результат_значення(Значення { ЗЧисло, дані = математика_acos(значення_першого_аргумента.дані як дійсне) });
  }

  внутрішня дія нативна_дія_асин(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 1 {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Недостатньо аргументів"));
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
    якщо значення_першого_аргумента.тип != ЗЧисло {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Очікується число першим аргументом"));
    }
    вернути результат_значення(Значення { ЗЧисло, дані = математика_asin(значення_першого_аргумента.дані як дійсне) });
  }

  внутрішня дія нативна_дія_атан(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 1 {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Недостатньо аргументів"));
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
    якщо значення_першого_аргумента.тип != ЗЧисло {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Очікується число першим аргументом"));
    }
    вернути результат_значення(Значення { ЗЧисло, дані = математика_atan(значення_першого_аргумента.дані як дійсне) });
  }

  внутрішня дія нативна_дія_атан2(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 2 {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Недостатньо аргументів"));
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
    якщо значення_першого_аргумента.тип != ЗЧисло {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Очікується число першим аргументом"));
    }
    ціль значення_другого_аргумента = аргументи.дані[1].значення;
    якщо значення_другого_аргумента.тип != ЗЧисло {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Очікується число другим аргументом"));
    }
    вернути результат_значення(Значення { ЗЧисло, дані = математика_atan2(значення_першого_аргумента.дані як дійсне, значення_другого_аргумента.дані як дійсне) });
  }

  внутрішня дія нативна_дія_кос(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 1 {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Недостатньо аргументів"));
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
    якщо значення_першого_аргумента.тип != ЗЧисло {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Очікується число першим аргументом"));
    }
    вернути результат_значення(Значення { ЗЧисло, дані = математика_cos(значення_першого_аргумента.дані як дійсне) });
  }

  внутрішня дія нативна_дія_син(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 1 {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Недостатньо аргументів"));
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
    якщо значення_першого_аргумента.тип != ЗЧисло {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Очікується число першим аргументом"));
    }
    вернути результат_значення(Значення { ЗЧисло, дані = математика_sin(значення_першого_аргумента.дані як дійсне) });
  }

  внутрішня дія нативна_дія_тан(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 1 {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Недостатньо аргументів"));
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
    якщо значення_першого_аргумента.тип != ЗЧисло {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Очікується число першим аргументом"));
    }
    вернути результат_значення(Значення { ЗЧисло, дані = математика_tan(значення_першого_аргумента.дані як дійсне) });
  }

  внутрішня дія нативна_дія_гіперкос(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 1 {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Недостатньо аргументів"));
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
    якщо значення_першого_аргумента.тип != ЗЧисло {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Очікується число першим аргументом"));
    }
    вернути результат_значення(Значення { ЗЧисло, дані = математика_cosh(значення_першого_аргумента.дані як дійсне) });
  }

  внутрішня дія нативна_дія_гіперсин(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 1 {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Недостатньо аргументів"));
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
    якщо значення_першого_аргумента.тип != ЗЧисло {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Очікується число першим аргументом"));
    }
    вернути результат_значення(Значення { ЗЧисло, дані = математика_sinh(значення_першого_аргумента.дані як дійсне) });
  }

  внутрішня дія нативна_дія_гіпертан(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 1 {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Недостатньо аргументів"));
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
    якщо значення_першого_аргумента.тип != ЗЧисло {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Очікується число першим аргументом"));
    }
    вернути результат_значення(Значення { ЗЧисло, дані = математика_tanh(значення_першого_аргумента.дані як дійсне) });
  }

  внутрішня дія нативна_дія_експ(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 1 {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Недостатньо аргументів"));
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
    якщо значення_першого_аргумента.тип != ЗЧисло {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Очікується число першим аргументом"));
    }
    вернути результат_значення(Значення { ЗЧисло, дані = математика_exp(значення_першого_аргумента.дані як дійсне) });
  }

  внутрішня дія нативна_дія_лог(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 1 {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Недостатньо аргументів"));
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
    якщо значення_першого_аргумента.тип != ЗЧисло {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Очікується число першим аргументом"));
    }
    вернути результат_значення(Значення { ЗЧисло, дані = математика_log(значення_першого_аргумента.дані як дійсне) });
  }

  внутрішня дія нативна_дія_лог10(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 1 {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Недостатньо аргументів"));
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
    якщо значення_першого_аргумента.тип != ЗЧисло {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Очікується число першим аргументом"));
    }
    вернути результат_значення(Значення { ЗЧисло, дані = математика_log10(значення_першого_аргумента.дані як дійсне) });
  }

  внутрішня дія нативна_дія_степінь(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 2 {
      вернути результат_помилка(Значення { ЗПусто });
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
    якщо значення_першого_аргумента.тип != ЗЧисло {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Очікується число першим аргументом"));
    }
    ціль значення_другого_аргумента = аргументи.дані[1].значення;
    якщо значення_другого_аргумента.тип != ЗЧисло {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Очікується число другим аргументом"));
    }
    вернути результат_значення(Значення { ЗЧисло, дані = математика_pow(значення_першого_аргумента.дані як дійсне, значення_другого_аргумента.дані як дійсне) });
  }

  внутрішня дія нативна_дія_корінь(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 1 {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Недостатньо аргументів"));
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
    якщо значення_першого_аргумента.тип != ЗЧисло {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Очікується число першим аргументом"));
    }
    вернути результат_значення(Значення { ЗЧисло, дані = математика_sqrt(значення_першого_аргумента.дані як дійсне) });
  }

  внутрішня дія нативна_дія_стеля(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 1 {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Недостатньо аргументів"));
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
    якщо значення_першого_аргумента.тип != ЗЧисло {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Очікується число першим аргументом"));
    }
    вернути результат_значення(Значення { ЗЧисло, дані = математика_ceil(значення_першого_аргумента.дані як дійсне) });
  }

  внутрішня дія нативна_дія_підлога(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 1 {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Недостатньо аргументів"));
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
    якщо значення_першого_аргумента.тип != ЗЧисло {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Очікується число першим аргументом"));
    }
    вернути результат_значення(Значення { ЗЧисло, дані = математика_floor(значення_першого_аргумента.дані як дійсне) });
  }

  внутрішня дія нативна_дія_округлити(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, обʼєкт_нативної_дії: комірка<Обʼєкт>, аргументи: комірка<вектор<Аргумент>>): Результат {
    якщо аргументи.довжина < 1 {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Недостатньо аргументів"));
    }
    ціль значення_першого_аргумента = аргументи.дані[0].значення;
    якщо значення_першого_аргумента.тип != ЗЧисло {
      вернути результат_помилка_обʼєкт(створити_обʼєкт_помилка(М, місцезнаходження, ю8"Очікується число першим аргументом"));
    }
    вернути результат_значення(Значення { ЗЧисло, дані = математика_round(значення_першого_аргумента.дані як дійсне) });
  }

  місцева дія завантажити_біб_М(М: комірка<Машина>, місцезнаходження: комірка<Місцезнаходження>, середовище: комірка<Середовище>, обʼєкт_модуля: комірка<Обʼєкт>): Результат {
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"Е"), Значення { ЗЧисло, дані = ЧИСЛО_Е як д64 });
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"ЛОГ2Е"), Значення { ЗЧисло, дані = ЧИСЛО_ЛОГ2Е як д64 });
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"ЛОГ10Е"), Значення { ЗЧисло, дані = ЧИСЛО_ЛОГ10Е як д64 });
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"ЛОГ2"), Значення { ЗЧисло, дані = ЧИСЛО_ЛОГ2 як д64 });
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"ЛОГ10"), Значення { ЗЧисло, дані = ЧИСЛО_ЛОГ10 як д64 });
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"ПІ"), Значення { ЗЧисло, дані = ЧИСЛО_ПІ як д64 });
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"КОРІНЬ2"), Значення { ЗЧисло, дані = ЧИСЛО_КОРІНЬ2 як д64 });
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"КОРІНЬ1_2"), Значення { ЗЧисло, дані = ЧИСЛО_КОРІНЬ1_2 як д64 });
    ціль обʼєкт_нативної_дії_абс = створити_обʼєкт_нативна_дія(М, нативна_дія_абс);
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"абс"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_абс });
    ціль обʼєкт_нативної_дії_акос = створити_обʼєкт_нативна_дія(М, нативна_дія_акос);
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"акос"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_акос });
    ціль обʼєкт_нативної_дії_асин = створити_обʼєкт_нативна_дія(М, нативна_дія_асин);
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"асин"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_асин });
    ціль обʼєкт_нативної_дії_атан = створити_обʼєкт_нативна_дія(М, нативна_дія_атан);
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"атан"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_атан });
    ціль обʼєкт_нативної_дії_атан2 = створити_обʼєкт_нативна_дія(М, нативна_дія_атан2);
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"атан2"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_атан2 });
    ціль обʼєкт_нативної_дії_кос = створити_обʼєкт_нативна_дія(М, нативна_дія_кос);
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"кос"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_кос });
    ціль обʼєкт_нативної_дії_син = створити_обʼєкт_нативна_дія(М, нативна_дія_син);
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"син"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_син });
    ціль обʼєкт_нативної_дії_тан = створити_обʼєкт_нативна_дія(М, нативна_дія_тан);
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"тан"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_тан });
    ціль обʼєкт_нативної_дії_гіперкос = створити_обʼєкт_нативна_дія(М, нативна_дія_гіперкос);
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"гіперкос"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_гіперкос });
    ціль обʼєкт_нативної_дії_гіперсин = створити_обʼєкт_нативна_дія(М, нативна_дія_гіперсин);
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"гіперсин"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_гіперсин });
    ціль обʼєкт_нативної_дії_гіпертан = створити_обʼєкт_нативна_дія(М, нативна_дія_гіпертан);
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"гіпертан"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_гіпертан });
    ціль обʼєкт_нативної_дії_експ = створити_обʼєкт_нативна_дія(М, нативна_дія_експ);
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"експ"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_експ });
    ціль обʼєкт_нативної_дії_лог = створити_обʼєкт_нативна_дія(М, нативна_дія_лог);
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"лог"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_лог });
    ціль обʼєкт_нативної_дії_лог10 = створити_обʼєкт_нативна_дія(М, нативна_дія_лог10);
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"лог10"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_лог10 });
    ціль обʼєкт_нативної_дії_степінь = створити_обʼєкт_нативна_дія(М, нативна_дія_степінь);
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"степінь"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_степінь });
    ціль обʼєкт_нативної_дії_корінь = створити_обʼєкт_нативна_дія(М, нативна_дія_корінь);
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"корінь"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_корінь });
    ціль обʼєкт_нативної_дії_стеля = створити_обʼєкт_нативна_дія(М, нативна_дія_стеля);
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"стеля"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_стеля });
    ціль обʼєкт_нативної_дії_підлога = створити_обʼєкт_нативна_дія(М, нативна_дія_підлога);
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"підлога"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_підлога });
    ціль обʼєкт_нативної_дії_округлити = створити_обʼєкт_нативна_дія(М, нативна_дія_округлити);
    змінити_властивість_обʼєкта(обʼєкт_модуля, отримати_або_створити_слово(М, ю8"округлити"), Значення { ЗОбʼєкт, дані = обʼєкт_нативної_дії_округлити });
    вернути результат_значення(Значення { ЗПусто });
  }
}