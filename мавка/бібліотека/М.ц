взяти визначення мавка/бібліотека;

секція мавка {
  секція бібліотека {
    дія нативна_дія_модуля_математики_синус(обʼєкт_нативної_дії: адреса<Обʼєкт>, В: адреса<Виконувач>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(В, іменовані_аргументи, В.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо аргументи.розмір > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_обʼєкт_є_числом(аргумент_значення, В) == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, В);
      вернути результат_успіх(В, створити_число(В, mavka_sin(значення_числа)));
    }

    дія нативна_дія_модуля_математики_косинус(обʼєкт_нативної_дії: адреса<Обʼєкт>, В: адреса<Виконувач>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(В, іменовані_аргументи, В.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо аргументи.розмір > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_обʼєкт_є_числом(аргумент_значення, В) == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, В);
      вернути результат_успіх(В, створити_число(В, mavka_cos(значення_числа)));
    }

    дія нативна_дія_модуля_математики_тангенс(обʼєкт_нативної_дії: адреса<Обʼєкт>, В: адреса<Виконувач>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(В, іменовані_аргументи, В.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо аргументи.розмір > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_обʼєкт_є_числом(аргумент_значення, В) == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, В);
      вернути результат_успіх(В, створити_число(В, mavka_tan(значення_числа)));
    }

    дія нативна_дія_модуля_математики_арксинус(обʼєкт_нативної_дії: адреса<Обʼєкт>, В: адреса<Виконувач>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(В, іменовані_аргументи, В.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо аргументи.розмір > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_обʼєкт_є_числом(аргумент_значення, В) == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, В);
      вернути результат_успіх(В, створити_число(В, mavka_asin(значення_числа)));
    }

    дія нативна_дія_модуля_математики_арккосинус(обʼєкт_нативної_дії: адреса<Обʼєкт>, В: адреса<Виконувач>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(В, іменовані_аргументи, В.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо аргументи.розмір > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_обʼєкт_є_числом(аргумент_значення, В) == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, В);
      вернути результат_успіх(В, створити_число(В, mavka_acos(значення_числа)));
    }

    дія нативна_дія_модуля_математики_арктангенс(обʼєкт_нативної_дії: адреса<Обʼєкт>, В: адреса<Виконувач>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(В, іменовані_аргументи, В.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо аргументи.розмір > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_обʼєкт_є_числом(аргумент_значення, В) == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, В);
      вернути результат_успіх(В, створити_число(В, mavka_atan(значення_числа)));
    }

    дія нативна_дія_модуля_математики_арктангенс2(обʼєкт_нативної_дії: адреса<Обʼєкт>, В: адреса<Виконувач>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_а = ні;
      змінна ціль аргумент_а: адреса<Обʼєкт> = пусто;
      змінна ціль знайдено_аргумент_б = ні;
      змінна ціль аргумент_б: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_а = знайти_іменований_аргумент(В, іменовані_аргументи, назва_з_Ю8(В, ю8"а"), аргумент_а::адреса);
        знайдено_аргумент_б = знайти_іменований_аргумент(В, іменовані_аргументи, назва_з_Ю8(В, ю8"б"), аргумент_б::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_а == ні {
          якщо аргументи.розмір > 0 {
            знайдено_аргумент_а = так;
            аргумент_а = аргументи.дані[0];
          }
        }
        якщо знайдено_аргумент_б == ні {
          якщо аргументи.розмір > 1 {
            знайдено_аргумент_б = так;
            аргумент_б = аргументи.дані[1];
          }
        }
      }
      якщо знайдено_аргумент_а == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Недостатньо аргументів"), пусто);
      }
      якщо знайдено_аргумент_б == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_обʼєкт_є_числом(аргумент_а, В) == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Очікується числове значення"), пусто);
      }
      якщо перевірити_чи_обʼєкт_є_числом(аргумент_б, В) == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа_а = отримати_значення_числа(аргумент_а, В);
      ціль значення_числа_б = отримати_значення_числа(аргумент_б, В);
      вернути результат_успіх(В, створити_число(В, mavka_atan2(значення_числа_а, значення_числа_б)));
    }

    дія нативна_дія_модуля_математики_абсолютне(обʼєкт_нативної_дії: адреса<Обʼєкт>, В: адреса<Виконувач>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(В, іменовані_аргументи, В.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо аргументи.розмір > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_обʼєкт_є_числом(аргумент_значення, В) == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, В);
      вернути результат_успіх(В, створити_число(В, mavka_abs(значення_числа)));
    }

    дія нативна_дія_модуля_математики_експонента(обʼєкт_нативної_дії: адреса<Обʼєкт>, В: адреса<Виконувач>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(В, іменовані_аргументи, В.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо аргументи.розмір > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_обʼєкт_є_числом(аргумент_значення, В) == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, В);
      вернути результат_успіх(В, створити_число(В, mavka_exp(значення_числа)));
    }

    дія нативна_дія_модуля_математики_корінь(обʼєкт_нативної_дії: адреса<Обʼєкт>, В: адреса<Виконувач>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(В, іменовані_аргументи, В.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо аргументи.розмір > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_обʼєкт_є_числом(аргумент_значення, В) == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, В);
      вернути результат_успіх(В, створити_число(В, mavka_sqrt(значення_числа)));
    }

    дія нативна_дія_модуля_математики_степінь(обʼєкт_нативної_дії: адреса<Обʼєкт>, В: адреса<Виконувач>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_а = ні;
      змінна ціль аргумент_а: адреса<Обʼєкт> = пусто;
      змінна ціль знайдено_аргумент_б = ні;
      змінна ціль аргумент_б: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_а = знайти_іменований_аргумент(В, іменовані_аргументи, назва_з_Ю8(В, ю8"а"), аргумент_а::адреса);
        знайдено_аргумент_б = знайти_іменований_аргумент(В, іменовані_аргументи, назва_з_Ю8(В, ю8"б"), аргумент_б::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_а == ні {
          якщо аргументи.розмір > 0 {
            знайдено_аргумент_а = так;
            аргумент_а = аргументи.дані[0];
          }
        }
        якщо знайдено_аргумент_б == ні {
          якщо аргументи.розмір > 1 {
            знайдено_аргумент_б = так;
            аргумент_б = аргументи.дані[1];
          }
        }
      }
      якщо знайдено_аргумент_а == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Недостатньо аргументів"), пусто);
      }
      якщо знайдено_аргумент_б == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_обʼєкт_є_числом(аргумент_а, В) == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Очікується числове значення"), пусто);
      }
      якщо перевірити_чи_обʼєкт_є_числом(аргумент_б, В) == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа_а = отримати_значення_числа(аргумент_а, В);
      ціль значення_числа_б = отримати_значення_числа(аргумент_б, В);
      вернути результат_успіх(В, створити_число(В, mavka_pow(значення_числа_а, значення_числа_б)));
    }

    дія нативна_дія_модуля_математики_стеля(обʼєкт_нативної_дії: адреса<Обʼєкт>, В: адреса<Виконувач>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(В, іменовані_аргументи, В.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо аргументи.розмір > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_обʼєкт_є_числом(аргумент_значення, В) == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, В);
      вернути результат_успіх(В, створити_число(В, mavka_ceil(значення_числа)));
    }

    дія нативна_дія_модуля_математики_підлога(обʼєкт_нативної_дії: адреса<Обʼєкт>, В: адреса<Виконувач>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(В, іменовані_аргументи, В.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо аргументи.розмір > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_обʼєкт_є_числом(аргумент_значення, В) == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, В);
      вернути результат_успіх(В, створити_число(В, mavka_floor(значення_числа)));
    }

    дія нативна_дія_модуля_математики_округлити(обʼєкт_нативної_дії: адреса<Обʼєкт>, В: адреса<Виконувач>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(В, іменовані_аргументи, В.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо аргументи.розмір > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_обʼєкт_є_числом(аргумент_значення, В) == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Очікується числове значення"), пусто);
      }
      ціль значення_числа = отримати_значення_числа(аргумент_значення, В);
      вернути результат_успіх(В, створити_число(В, mavka_round(значення_числа)));
    }

    дія нативна_дія_модуля_математики_найбільше(обʼєкт_нативної_дії: адреса<Обʼєкт>, В: адреса<Виконувач>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(В, іменовані_аргументи, В.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо аргументи.розмір > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_обʼєкт_є_списком(аргумент_значення, В) == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Очікується спискове значення"), пусто);
      }
      ціль обʼєкт_списку = аргумент_значення як адреса<МаМа::ОбʼєктСписку>;
      змінна ціль результат: адреса<Обʼєкт> = пусто;
      якщо обʼєкт_списку.елементи.розмір > 0 {
        результат = обʼєкт_списку.елементи.дані[0] як адреса<Обʼєкт>;
      }
      змінна ціль п: позитивне = 1;
      поки п < обʼєкт_списку.елементи.розмір {
        ціль значення = обʼєкт_списку.елементи.дані[п] як адреса<Обʼєкт>;
        ціль результат_більше = обʼєкт_більше(значення, В, результат);
        якщо результат_більше.падіння != пусто {
          вернути результат_більше;
        }
        якщо перевірити_чи_обʼєкт_виражається_логічним_так(результат_більше.значення, В) == так {
          результат = значення;
        }
        п += 1;
      }
      вернути результат_успіх(В, результат);
    }

    дія нативна_дія_модуля_математики_найменше(обʼєкт_нативної_дії: адреса<Обʼєкт>, В: адреса<Виконувач>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<ІменованіАргументи>, дані: адреса): Результат {
      змінна ціль знайдено_аргумент_значення = ні;
      змінна ціль аргумент_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        знайдено_аргумент_значення = знайти_іменований_аргумент(В, іменовані_аргументи, В.М.БН.С.значення як адреса<Назва>, аргумент_значення::адреса);
      }
      якщо аргументи != пусто {
        якщо знайдено_аргумент_значення == ні {
          якщо аргументи.розмір > 0 {
            знайдено_аргумент_значення = так;
            аргумент_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_аргумент_значення == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Недостатньо аргументів"), пусто);
      }
      якщо перевірити_чи_обʼєкт_є_списком(аргумент_значення, В) == ні {
        вернути результат_падіння(В, мавка::створити_текст_з_Ю8(В, ю8"Очікується спискове значення"), пусто);
      }
      ціль обʼєкт_списку = аргумент_значення як адреса<МаМа::ОбʼєктСписку>;
      змінна ціль результат: адреса<Обʼєкт> = пусто;
      якщо обʼєкт_списку.елементи.розмір > 0 {
        результат = обʼєкт_списку.елементи.дані[0] як адреса<Обʼєкт>;
      }
      змінна ціль п: позитивне = 1;
      поки п < обʼєкт_списку.елементи.розмір {
        ціль значення = обʼєкт_списку.елементи.дані[п] як адреса<Обʼєкт>;
        ціль результат_більше = обʼєкт_менше(значення, В, результат);
        якщо результат_більше.падіння != пусто {
          вернути результат_більше;
        }
        якщо перевірити_чи_обʼєкт_виражається_логічним_так(результат_більше.значення, В) == так {
          результат = значення;
        }
        п += 1;
      }
      вернути результат_успіх(В, результат);
    }

    місцева дія заповнити_модуль_М(В: адреса<Виконувач>, обʼєкт_модуля: адреса<Обʼєкт>) {
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"Е"), створити_число(В, ЧИСЛО_Е));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"ЛОГ2Е"), створити_число(В, ЧИСЛО_ЛОГ2Е));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"ЛОГ10Е"), створити_число(В, ЧИСЛО_ЛОГ10Е));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"ЛОГ2"), створити_число(В, ЧИСЛО_ЛОГ2));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"ЛОГ10"), створити_число(В, ЧИСЛО_ЛОГ10));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"ПІ"), створити_число(В, ЧИСЛО_ПІ));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"КОРІНЬ2"), створити_число(В, ЧИСЛО_КОРІНЬ2));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"КОРІНЬ1_2"), створити_число(В, ЧИСЛО_КОРІНЬ1_2));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"синус"), створити_нативну_дію(В, назва_з_Ю8(В, ю8"синус"), нативна_дія_модуля_математики_синус, пусто, пусто));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"косинус"), створити_нативну_дію(В, назва_з_Ю8(В, ю8"косинус"), нативна_дія_модуля_математики_косинус, пусто, пусто));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"тангенс"), створити_нативну_дію(В, назва_з_Ю8(В, ю8"тангенс"), нативна_дія_модуля_математики_тангенс, пусто, пусто));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"арксинус"), створити_нативну_дію(В, назва_з_Ю8(В, ю8"арксинус"), нативна_дія_модуля_математики_арксинус, пусто, пусто));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"арккосинус"), створити_нативну_дію(В, назва_з_Ю8(В, ю8"арккосинус"), нативна_дія_модуля_математики_арккосинус, пусто, пусто));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"арктангенс"), створити_нативну_дію(В, назва_з_Ю8(В, ю8"арктангенс"), нативна_дія_модуля_математики_арктангенс, пусто, пусто));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"арктангенс2"), створити_нативну_дію(В, назва_з_Ю8(В, ю8"арктангенс2"), нативна_дія_модуля_математики_арктангенс2, пусто, пусто));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"абсолютне"), створити_нативну_дію(В, назва_з_Ю8(В, ю8"абсолютне"), нативна_дія_модуля_математики_абсолютне, пусто, пусто));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"експонента"), створити_нативну_дію(В, назва_з_Ю8(В, ю8"експонента"), нативна_дія_модуля_математики_експонента, пусто, пусто));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"корінь"), створити_нативну_дію(В, назва_з_Ю8(В, ю8"корінь"), нативна_дія_модуля_математики_корінь, пусто, пусто));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"степінь"), створити_нативну_дію(В, назва_з_Ю8(В, ю8"степінь"), нативна_дія_модуля_математики_степінь, пусто, пусто));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"стеля"), створити_нативну_дію(В, назва_з_Ю8(В, ю8"стеля"), нативна_дія_модуля_математики_стеля, пусто, пусто));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"підлога"), створити_нативну_дію(В, назва_з_Ю8(В, ю8"підлога"), нативна_дія_модуля_математики_підлога, пусто, пусто));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"округлити"), створити_нативну_дію(В, назва_з_Ю8(В, ю8"округлити"), нативна_дія_модуля_математики_округлити, пусто, пусто));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"найбільше"), створити_нативну_дію(В, назва_з_Ю8(В, ю8"найбільше"), нативна_дія_модуля_математики_найбільше, пусто, пусто));
      обʼєкт_змінити_властивість(обʼєкт_модуля, В, назва_з_Ю8(В, ю8"найменше"), створити_нативну_дію(В, назва_з_Ю8(В, ю8"найменше"), нативна_дія_модуля_математики_найменше, пусто, пусто));
    }
  }
}