секція UNICODE {
  синонім NEWLINE = 10;
  синонім CARRIAGE_RETURN = 13;
  синонім SPACE = 32;
  синонім OPEN_PARENTHESIS = 40;
  синонім CLOSE_PARENTHESIS = 41;
  синонім ASTERISK = 42;
  синонім PLUS = 43;
  синонім COLON = 58;
  синонім SEMICOLON = 59;
  синонім QUESTION_MARK = 63;
  синонім OPEN_CURLY_BRACKET = 123;
  синонім LINE = 124;
  синонім CLOSE_CURLY_BRACKET = 125;
}

секція Г {
  секція лексер {
    структура Місцезнаходження {
      рядок_початку: позитивне;
      стовпець_початку: позитивне;
      рядок_кінця: позитивне;
      стовпець_кінця: позитивне;
    }

    перелік Лексема {
      КлючовеСловоЛексика { місцезнаходження: адреса<Місцезнаходження> },
      КлючовеСловоГраматика { місцезнаходження: адреса<Місцезнаходження> },
      КлючовеСловоФаргмент { місцезнаходження: адреса<Місцезнаходження> },
      ВідкритаДужка { місцезнаходження: адреса<Місцезнаходження> },
      ЗакритаДужка { місцезнаходження: адреса<Місцезнаходження> },
      Зірочка { місцезнаходження: адреса<Місцезнаходження> },
      Плюс { місцезнаходження: адреса<Місцезнаходження> },
      Двокрапка { місцезнаходження: адреса<Місцезнаходження> },
      Крапкакома { місцезнаходження: адреса<Місцезнаходження> },
      ЗнакПитання { місцезнаходження: адреса<Місцезнаходження> },
      ВідкритаФігурнаДужка { місцезнаходження: адреса<Місцезнаходження> },
      Пряма { місцезнаходження: адреса<Місцезнаходження> },
      ЗакритаФігурнаДужка { місцезнаходження: адреса<Місцезнаходження> },
      Ідентифікатор { значення: памʼять<п32>; місцезнаходження: адреса<Місцезнаходження> },
      Текст { значення: памʼять<п32>; місцезнаходження: адреса<Місцезнаходження> },
    }

    структура РозібранаЛексика {
      кількість_лексем: позитивне;
      лексеми: памʼять<Лексема>;
    }

    дія перевірити_ключове_слово(значення: памʼять<п32>, позиція_початку: позитивне, шукане_значення: памʼять<п32>): логічне {
      змінна ціль п: позитивне = 0;
      поки шукане_значення[п] != 0 {
        якщо значення[позиція_початку + п] != шукане_значення[п] {
          вернути ні;
        }
        п += 1;
      }
      вернути так;
    }

    дія розібрати(значення: памʼять<п32>, вихід: адреса<адреса<РозібранаЛексика>>): позитивне {
      ціль розібрана_лексика = виділити<РозібранаЛексика>();
      змінна ціль п: позитивне = 0;
      далі:
      ціль символ = значення[п];
      якщо символ == 0 {
        стрибнути стоп;
      }
      якщо символ == UNICODE::NEWLINE {
        п += 1;
        стрибнути далі;
      }
      якщо символ == UNICODE::CARRIAGE_RETURN {
        п += 1;
        стрибнути далі;
      }
      якщо символ == UNICODE::SPACE {
        п += 1;
        стрибнути далі;
      }
      якщо перевірити_ключове_слово(значення, п, ю32"лексика") {
        ціль лексема = Лексема::КлючовеСловоЛексика { пусто };
        розібрана_лексика.лексеми = перевиділити<Лексема>(розібрана_лексика.лексеми, розібрана_лексика.кількість_лексем + 1);
        розібрана_лексика.лексеми[розібрана_лексика.кількість_лексем] = лексема;
        розібрана_лексика.кількість_лексем += 1;
        п += 6;
        стрибнути далі;
      }
      якщо перевірити_ключове_слово(значення, п, ю32"граматика") {
        ціль лексема = Лексема::КлючовеСловоГраматика { пусто };
        розібрана_лексика.лексеми = перевиділити<Лексема>(розібрана_лексика.лексеми, розібрана_лексика.кількість_лексем + 1);
        розібрана_лексика.лексеми[розібрана_лексика.кількість_лексем] = лексема;
        розібрана_лексика.кількість_лексем += 1;
        п += 6;
        стрибнути далі;
      }
      якщо перевірити_ключове_слово(значення, п, ю32"фрагмент") {
        ціль лексема = Лексема::КлючовеСловоФаргмент { пусто };
        розібрана_лексика.лексеми = перевиділити<Лексема>(розібрана_лексика.лексеми, розібрана_лексика.кількість_лексем + 1);
        розібрана_лексика.лексеми[розібрана_лексика.кількість_лексем] = лексема;
        розібрана_лексика.кількість_лексем += 1;
        п += 6;
        стрибнути далі;
      }
      якщо символ == UNICODE::OPEN_PARENTHESIS {
        ціль лексема = Лексема::ВідкритаДужка { пусто };
        розібрана_лексика.лексеми = перевиділити<Лексема>(розібрана_лексика.лексеми, розібрана_лексика.кількість_лексем + 1);
        розібрана_лексика.лексеми[розібрана_лексика.кількість_лексем] = лексема;
        розібрана_лексика.кількість_лексем += 1;
        п += 1;
      }
      якщо символ == UNICODE::CLOSE_PARENTHESIS {
        ціль лексема = Лексема::ЗакритаДужка { пусто };
        розібрана_лексика.лексеми = перевиділити<Лексема>(розібрана_лексика.лексеми, розібрана_лексика.кількість_лексем + 1);
        розібрана_лексика.лексеми[розібрана_лексика.кількість_лексем] = лексема;
        розібрана_лексика.кількість_лексем += 1;
        п += 1;
      }
      якщо символ == UNICODE::ASTERISK {
        ціль лексема = Лексема::Зірочка { пусто };
        розібрана_лексика.лексеми = перевиділити<Лексема>(розібрана_лексика.лексеми, розібрана_лексика.кількість_лексем + 1);
        розібрана_лексика.лексеми[розібрана_лексика.кількість_лексем] = лексема;
        розібрана_лексика.кількість_лексем += 1;
        п += 1;
      }
      якщо символ == UNICODE::PLUS {
        ціль лексема = Лексема::Плюс { пусто };
        розібрана_лексика.лексеми = перевиділити<Лексема>(розібрана_лексика.лексеми, розібрана_лексика.кількість_лексем + 1);
        розібрана_лексика.лексеми[розібрана_лексика.кількість_лексем] = лексема;
        розібрана_лексика.кількість_лексем += 1;
        п += 1;
      }
      якщо символ == UNICODE::COLON {
        ціль лексема = Лексема::Двокрапка { пусто };
        розібрана_лексика.лексеми = перевиділити<Лексема>(розібрана_лексика.лексеми, розібрана_лексика.кількість_лексем + 1);
        розібрана_лексика.лексеми[розібрана_лексика.кількість_лексем] = лексема;
        розібрана_лексика.кількість_лексем += 1;
        п += 1;
      }
      якщо символ == UNICODE::SEMICOLON {
        ціль лексема = Лексема::Крапкакома { пусто };
        розібрана_лексика.лексеми = перевиділити<Лексема>(розібрана_лексика.лексеми, розібрана_лексика.кількість_лексем + 1);
        розібрана_лексика.лексеми[розібрана_лексика.кількість_лексем] = лексема;
        розібрана_лексика.кількість_лексем += 1;
        п += 1;
      }
      якщо символ == UNICODE::QUESTION_MARK {
        ціль лексема = Лексема::ЗнакПитання { пусто };
        розібрана_лексика.лексеми = перевиділити<Лексема>(розібрана_лексика.лексеми, розібрана_лексика.кількість_лексем + 1);
        розібрана_лексика.лексеми[розібрана_лексика.кількість_лексем] = лексема;
        розібрана_лексика.кількість_лексем += 1;
        п += 1;
      }
      якщо символ == UNICODE::OPEN_CURLY_BRACKET {
        ціль лексема = Лексема::ВідкритаФігурнаДужка { пусто };
        розібрана_лексика.лексеми = перевиділити<Лексема>(розібрана_лексика.лексеми, розібрана_лексика.кількість_лексем + 1);
        розібрана_лексика.лексеми[розібрана_лексика.кількість_лексем] = лексема;
        розібрана_лексика.кількість_лексем += 1;
        п += 1;
      }
      якщо символ == UNICODE::LINE {
        ціль лексема = Лексема::Пряма { пусто };
        розібрана_лексика.лексеми = перевиділити<Лексема>(розібрана_лексика.лексеми, розібрана_лексика.кількість_лексем + 1);
        розібрана_лексика.лексеми[розібрана_лексика.кількість_лексем] = лексема;
        розібрана_лексика.кількість_лексем += 1;
        п += 1;
      }
      якщо символ == UNICODE::CLOSE_CURLY_BRACKET {
        ціль лексема = Лексема::ЗакритаФігурнаДужка { пусто };
        розібрана_лексика.лексеми = перевиділити<Лексема>(розібрана_лексика.лексеми, розібрана_лексика.кількість_лексем + 1);
        розібрана_лексика.лексеми[розібрана_лексика.кількість_лексем] = лексема;
        розібрана_лексика.кількість_лексем += 1;
        п += 1;
      }
      // ...
      стоп:
      вихід::вміст = розібрана_лексика;
    }
  }
}