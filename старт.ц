взяти визначення мавка;

дія нативна_дія_мавки_друк(обʼєкт_нативної_дії: адреса<мавка::Обʼєкт>, В: адреса<мавка::Виконувач>, обʼєкт_я: адреса<мавка::Обʼєкт>, аргументи: адреса<Накопичувач<адреса<мавка::Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<мавка::Назва>, адреса<мавка::Обʼєкт>>>): мавка::Результат {
  якщо аргументи != пусто {
    змінна ціль па: позитивне = 0;
    поки па < аргументи.розмір {
      ціль накопичувач_ю8 = зробити_накопичувач_ю8();
      мавка::надрукувати_обʼєкт_в_накопичувач_ю8(аргументи.дані[па], В, накопичувач_ю8::адреса, 0);
      ціль ю8 = виділити_ю8_з_накопичувача_ю8(накопичувач_ю8::адреса);
      звільнити_значення_накопичувача_ю8(накопичувач_ю8);
      надрукувати_ю8(ю8);
      звільнити(ю8);
      па += 1;
    }
  }
  вернути мавка::результат_успіх(пусто);
}

дія надрукувати_помилку(шлях: Ю8, рядок: п32, повідомлення: Ю8) {
  вивести_ю8(шлях);
  вивести_ю8(ю8":");
  вивести_п64(рядок як п64);
  вивести_ю8(ю8": ");
  надрукувати_ю8(повідомлення);
}

дія надрукувати_помилку(повідомлення: Ю8) {
  надрукувати_ю8(повідомлення);
}

дія надрукувати_падіння(В: адреса<мавка::Виконувач>, значення: адреса<мавка::Обʼєкт>, місцезнаходження_падіння: адреса<мавка::МісцезнаходженняПадіння>) {
  ціль накопичувач_ю8 = зробити_накопичувач_ю8();
  мавка::надрукувати_обʼєкт_в_накопичувач_ю8(значення, В, накопичувач_ю8::адреса, 0);
  ціль ю8 = виділити_ю8_з_накопичувача_ю8(накопичувач_ю8::адреса);
  звільнити_значення_накопичувача_ю8(накопичувач_ю8);
  якщо місцезнаходження_падіння != пусто {
    надрукувати_помилку(
      мавка::отримати_шлях_до_файлу_з_місцезнаходження_падіння(місцезнаходження_падіння),
      мавка::отримати_рядок_з_місцезнаходження_падіння(місцезнаходження_падіння),
      ю8
    );
  } інакше {
    надрукувати_помилку(ю8);
  }
  звільнити(ю8);
}

зовнішня дія стартувати_мавку(кількість_аргументів: ц32, аргументи: памʼять<Ю8>): ц32 {
//  ціль вихід_КД = виділити<п8>(8ц32 + 1);
//  ціль розмір_виходу_КД = КД::перекодувати_з_Ю8(ю8"привіт₴∑", 17, вихід_КД);
//  вихід_КД[розмір_виходу_КД] = 0;
//  якщо розмір_виходу_КД == 0 {
//    надрукувати_ю8(ю8"Не вдалось перекодувати в КД.");
//    вернути 1;
//  } інакше {
//    надрукувати_ю8(ю8"КД: ");
//    змінна ціль п: позитивне = 0;
//    поки вихід_КД[п] != 0 {
//      надрукувати_п64(вихід_КД[п] як п64);
//      п += 1;
//    }
//
//    ціль вихід_Ю8 = виділити<п8>((розмір_виходу_КД як ц32 * 2) + 1);
//    ціль розмір_виходу_Ю8 = КД::перекодувати_КД_в_Ю8(вихід_КД, розмір_виходу_КД, вихід_Ю8);
//    вихід_Ю8[розмір_виходу_Ю8] = 0;
//    якщо розмір_виходу_Ю8 == 0 {
//      надрукувати_ю8(ю8"Не вдалось перекодувати в Ю8.");
//      вернути 1;
//    } інакше {
//      надрукувати_ю8(ю8"Ю8: ");
//      змінна ціль п: позитивне = 0;
//      поки вихід_Ю8[п] != 0 {
//        ціль перший_байт = вихід_Ю8[п];
//        ціль розмір_символа_юнікоду = дізнатись_розмір_символа_юнікоду(перший_байт);
//        якщо розмір_символа_юнікоду == 1 {
//          надрукувати_п64(перший_байт як п64);
//        } інакше якщо розмір_символа_юнікоду == 2 {
//          ціль другий_байт = вихід_Ю8[п + 1];
//          надрукувати_п64(((п32(перший_байт & 31) << 6) | п32(другий_байт & 63)) як п64);
//          п += 1;
//        } інакше якщо розмір_символа_юнікоду == 3 {
//          ціль другий_байт = вихід_Ю8[п + 1];
//          ціль третій_байт = вихід_Ю8[п + 2];
//          надрукувати_п64(((п32(перший_байт & 15) << 12) | (п32(другий_байт & 63) << 6) | п32(третій_байт & 63)) як п64);
//          п += 2;
//        } інакше {
//          ціль другий_байт = вихід_Ю8[п + 1];
//          ціль третій_байт = вихід_Ю8[п + 2];
//          ціль четвертий_байт = вихід_Ю8[п + 3];
//          надрукувати_п64(((п32(перший_байт & 15) << 18) | (п32(другий_байт & 63) << 12) | (п32(третій_байт & 63) << 6) | п32(четвертий_байт & 63)) як п64);
//          п += 3;
//        }
//        п += 1;
//      }
//
//      надрукувати_ю8(вихід_Ю8);
//    }
//  }

  ціль В = мавка::створити_виконувач();
  ціль глобальне_середовище = мавка::отримати_глобальне_середовище(В);
  мавка::визначити_нативну_дію(В, глобальне_середовище, ю8"друк", нативна_дія_мавки_друк);
  ціль результат_взяття_модуля = мавка::взяти_модуль(В, ю8"привіт");
  якщо результат_взяття_модуля.успіх == ні {
    надрукувати_падіння(В, результат_взяття_модуля.значення, результат_взяття_модуля.місцезнаходження_падіння);
    вернути 1;
  }
  мавка::знищити_виконувач(В);
  вернути 0;
}