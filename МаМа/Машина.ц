взяти визначення МаМа;

секція МаМа {
  місцева дія виділити_машину(): адреса<Машина> {
    ціль М = виділити<Машина>();
    М.БН = зробити_базу_назв();
    М.стопка_виконання = зробити_стопку<адреса<Обʼєкт>>();
    М.стопка_накопичувачів_аргументів = зробити_стопку<адреса<Карта<адреса<Назва>, адреса<Обʼєкт>>>>();
    М.глобальне_середовище = виділити_середовище(пусто);
    М.стан_помилки = ні;
    М.місцезнаходження_помилки = пусто;
    М.обʼєкт_структури_обʼєкт = виділити_обʼєкт(М, пусто);
    М.обʼєкт_структури_обʼєкт.дані = ДаніОбʼєктаСтруктури {
      предок = пусто
    };
    М.обʼєкт_структури_структура = виділити_обʼєкт(М, пусто);
    М.обʼєкт_структури_структура.дані = ДаніОбʼєктаСтруктури {
      предок = М.обʼєкт_структури_обʼєкт
    };
    М.обʼєкт_структури_обʼєкт.обʼєкт_структури = М.обʼєкт_структури_структура;
    М.обʼєкт_структури_число = виділити_обʼєкт_структури(М, М.обʼєкт_структури_обʼєкт);
    М.обʼєкт_структури_текст = виділити_обʼєкт_структури(М, М.обʼєкт_структури_обʼєкт);
    М.обʼєкт_структури_Дія = виділити_обʼєкт_структури(М, М.обʼєкт_структури_обʼєкт);
    вернути М;
  }

  місцева дія увімкнути_стан_помилки(М: адреса<Машина>, місцезнаходження_помилки: адреса) {
    М.стан_помилки = так;
    М.місцезнаходження_помилки = місцезнаходження_помилки;
  }

  місцева дія вимкнути_стан_помилки(М: адреса<Машина>) {
    М.стан_помилки = ні;
    М.місцезнаходження_помилки = пусто;
  }

  місцева дія виконати_код(М: адреса<Машина>, код: адреса<Код>): адреса<Обʼєкт> {
    ціль середовище = М.глобальне_середовище;
    ціль позиція_вказівки: п32 = 0;
    поки позиція_вказівки < код.розмір_вказівок {
      ціль вказівка = код.вказівки[позиція_вказівки];
      якщо вказівка == ВВизначити {
        ціль значення = забрати_з_стопки<адреса<Обʼєкт>>(М.стопка_виконання::адреса);
        ціль позиція_назви = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль назва = код.назви[позиція_назви];
        змінити_в_середовищі(середовище, назва, значення);
      } інакше якщо вказівка == ВЗвернутись {
        ціль позиція_назви = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль назва = код.назви[позиція_назви];
        покласти_на_стопку<адреса<Обʼєкт>>(М.стопка_виконання::адреса, знайти_в_середовищі(середовище, назва));
      } інакше якщо вказівка == ВПокластиЧисло {
        ціль позиція_числа = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        покласти_на_стопку<адреса<Обʼєкт>>(М.стопка_виконання::адреса, виділити_обʼєкт_числа(М, код.числа[позиція_числа]));
      } інакше якщо вказівка == ВДодати {
        ціль обʼєкт_2 = забрати_з_стопки<адреса<Обʼєкт>>(М.стопка_виконання::адреса);
        ціль обʼєкт_1 = забрати_з_стопки<адреса<Обʼєкт>>(М.стопка_виконання::адреса);
        якщо обʼєкт_1 == пусто {
          надрукувати_ю8(ю8"Немає першого числа");
          вернути пусто;
        }
        якщо обʼєкт_1.додати == пусто {
          надрукувати_ю8(ю8"Неможливо додати");
          вернути пусто;
        }
        ціль результат_додавання = обʼєкт_1.додати(обʼєкт_1, М, середовище, обʼєкт_2);
        якщо М.стан_помилки {
          // потім: знайти місцезнаходження помилки якщо треба
          вернути результат_додавання;
        }
        покласти_на_стопку<адреса<Обʼєкт>>(М.стопка_виконання::адреса, результат_додавання);
      } інакше якщо вказівка == ВВиконати {
        ціль аргументи_з_назвами = забрати_з_стопки<адреса<Карта<адреса<Назва>, адреса<Обʼєкт>>>>(М.стопка_накопичувачів_аргументів::адреса);
        ціль кількість_аргументів = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль аргументи = виділити_вектор<адреса<Обʼєкт>>();
        змінна ціль па: п32 = 0;
        поки па < кількість_аргументів {
          ціль аргумент = забрати_з_стопки<адреса<Обʼєкт>>(М.стопка_виконання::адреса);
          додати_до_вектору<адреса<Обʼєкт>>(аргументи, аргумент);
          па = па + 1;
        }
        обернути_вектор<адреса<Обʼєкт>>(аргументи);
        ціль обʼєкт = забрати_з_стопки<адреса<Обʼєкт>>(М.стопка_виконання::адреса);
        якщо обʼєкт == пусто {
          надрукувати_ю8(ю8"Неможливо виконати пусто");
          покласти_на_стопку<адреса<Обʼєкт>>(М.стопка_виконання::адреса, пусто);
        } інакше {
          якщо обʼєкт.виконати_ == пусто {
            надрукувати_ю8(ю8"Неможливо виконати");
            покласти_на_стопку<адреса<Обʼєкт>>(М.стопка_виконання::адреса, пусто);
          } інакше {
            ціль результат_виконання = обʼєкт.виконати_(обʼєкт, М, середовище, аргументи, аргументи_з_назвами);
            якщо М.стан_помилки {
              // потім: знайти місцезнаходження помилки якщо треба
              вернути результат_виконання;
            }
            покласти_на_стопку<адреса<Обʼєкт>>(М.стопка_виконання::адреса, результат_виконання);
          }
        }
      } інакше якщо вказівка == ВПокластиНакопичувачАргументів {
        ціль аргументи_з_назвами = виділити_карту<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні);
        покласти_на_стопку<адреса<Карта<адреса<Назва>, адреса<Обʼєкт>>>>(М.стопка_накопичувачів_аргументів::адреса, аргументи_з_назвами);
      } інакше якщо вказівка == ВНакопичитиАргумент {
        ціль значення = забрати_з_стопки<адреса<Обʼєкт>>(М.стопка_виконання::адреса);
        ціль аргументи_з_назвами = М.стопка_накопичувачів_аргументів.дані[М.стопка_накопичувачів_аргументів.розмір - 1];
        ціль позиція_назви = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль назва = код.назви[позиція_назви];
        змінити_в_карті<адреса<Назва>, адреса<Обʼєкт>>(аргументи_з_назвами, назва, значення);
      } інакше {
        вивести_ю8(ю8"Невідома вказівка на позиції ");
        вивести_п64(позиція_вказівки як п64);
        вивести_ю8(ю8": ");
        надрукувати_п64(вказівка як п64);
        вернути пусто;
      }
      позиція_вказівки = позиція_вказівки + 1;
    }
  }
}