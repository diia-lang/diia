взяти визначення МаМа;

секція МаМа {
  місцева дія виділити_місцезнаходження_помилки(шлях_до_файлу: Ю8, рядок: п32, стовпець: п32): адреса<МісцезнаходженняПомилки> {
    ціль місцезнаходження_помилки = виділити<МісцезнаходженняПомилки>();
    місцезнаходження_помилки.шлях_до_файлу = виділити_копію_ю8(шлях_до_файлу);
    місцезнаходження_помилки.рядок = рядок;
    місцезнаходження_помилки.стовпець = стовпець;
    вернути місцезнаходження_помилки;
  }

  місцева дія виділити_машину(): адреса<Машина> {
    ціль М = виділити<Машина>();
    М.утилізатор = зробити_утилізатор();
    М.БН = зробити_базу_назв();
    М.накопичувач_виконання = зробити_накопичувач<адреса<Обʼєкт>>();
    М.накопичувач_реєстрів_аргументів = зробити_накопичувач<адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>>();
    М.накопичувач_реєстрів_параметрів = зробити_накопичувач<адреса<Реєстр<адреса<Назва>, Параметр>>>();
    М.глобальне_середовище = виділити_середовище(пусто);
    М.стан_помилки = ні;
    М.місцезнаходження_помилки = пусто;
    М.обʼєкт_структури_обʼєкт = виділити_обʼєкт(М, пусто);
    М.обʼєкт_структури_обʼєкт.дані = ДаніОбʼєктаСтруктури {
      назва = знайти_або_виділити_й_додати_назву(М.БН::адреса, ю8"обʼєкт"),
      предок = пусто,
      параметри = виділити_реєстр<адреса<Назва>, Параметр>(перевірити_чи_назви_рівні),
      методи = зробити_реєстр<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні),
      середовище_створення = пусто
    };
    М.обʼєкт_структури_Структура = виділити_обʼєкт_структури_Структура(М);
    М.обʼєкт_структури_обʼєкт.обʼєкт_структури = М.обʼєкт_структури_Структура;
    М.обʼєкт_структури_НативнаДія = виділити_обʼєкт_структури_назва_ю8(М, ю8"НативнаДія", М.обʼєкт_структури_обʼєкт);
    М.обʼєкт_структури_Дія = виділити_обʼєкт_структури_назва_ю8(М, ю8"Дія", М.обʼєкт_структури_обʼєкт);
    М.обʼєкт_структури_число = виділити_обʼєкт_структури_число(М);
    М.обʼєкт_структури_текст = виділити_обʼєкт_структури_назва_ю8(М, ю8"текст", М.обʼєкт_структури_обʼєкт);
    змінити_в_середовищі(М.глобальне_середовище, знайти_або_виділити_й_додати_назву(М.БН::адреса, ю8"обʼєкт"), М.обʼєкт_структури_обʼєкт);
    змінити_в_середовищі(М.глобальне_середовище, знайти_або_виділити_й_додати_назву(М.БН::адреса, ю8"Структура"), М.обʼєкт_структури_Структура);
    змінити_в_середовищі(М.глобальне_середовище, знайти_або_виділити_й_додати_назву(М.БН::адреса, ю8"НативнаДія"), М.обʼєкт_структури_НативнаДія);
    змінити_в_середовищі(М.глобальне_середовище, знайти_або_виділити_й_додати_назву(М.БН::адреса, ю8"Дія"), М.обʼєкт_структури_Дія);
    змінити_в_середовищі(М.глобальне_середовище, знайти_або_виділити_й_додати_назву(М.БН::адреса, ю8"число"), М.обʼєкт_структури_число);
    змінити_в_середовищі(М.глобальне_середовище, знайти_або_виділити_й_додати_назву(М.БН::адреса, ю8"текст"), М.обʼєкт_структури_текст);
    вернути М;
  }

  місцева дія увімкнути_стан_помилки(М: адреса<Машина>) {
    М.стан_помилки = так;
    М.місцезнаходження_помилки = пусто;
  }

  місцева дія вимкнути_стан_помилки(М: адреса<Машина>) {
    М.стан_помилки = ні;
    якщо М.місцезнаходження_помилки != пусто {
      звільнити(М.місцезнаходження_помилки);
    }
    М.місцезнаходження_помилки = пусто;
  }

  місцева дія виділити_місцезнаходження_помилки_з_вказівки_або_пусто(М: адреса<Машина>, код: адреса<Код>, позиція_вказівки: п32): адреса<МісцезнаходженняПомилки> {
    ціль місцезнаходження_вказівки = знайти_місцезнаходження_вказівки(код, позиція_вказівки);
    якщо місцезнаходження_вказівки != пусто {
      вернути виділити_місцезнаходження_помилки(код.шлях_до_файлу, місцезнаходження_вказівки.рядок, місцезнаходження_вказівки.стовпець);
    }
    вернути пусто;
  }

  місцева дія виконати_код(М: адреса<Машина>, середовище: адреса<Середовище>, код: адреса<Код>): адреса_або_стан_помилки<Обʼєкт> {
    ціль позиція_вказівки: п32 = 0;
    поки позиція_вказівки < код.розмір_вказівок {
      якщо М.утилізатор.кількість_обʼєктів >= М.утилізатор.кількість_обʼєктів_щоб_запустити_утилізацію {
        утилізувати(М);
      }
      якщо М.утилізатор.кількість_середовищ >= М.утилізатор.кількість_середовищ_щоб_запустити_утилізацію {
        утилізувати(М);
      }
      ціль вказівка = код.вказівки[позиція_вказівки];
      якщо вказівка == ВВизначити {
        ціль значення = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
        ціль позиція_назви = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль назва = код.назви[позиція_назви];
        змінити_в_середовищі(середовище, назва, значення);
      } інакше якщо вказівка == ВЗвернутись {
        ціль позиція_назви = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль назва = код.назви[позиція_назви];
        покласти_в_накопичувач<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса, знайти_в_середовищі(середовище, назва));
      } інакше якщо вказівка == ВПокластиЧисло {
        ціль позиція_числа = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        покласти_в_накопичувач<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса, виділити_обʼєкт_числа(М, код.числа[позиція_числа]));
      } інакше якщо вказівка == ВПокластиТекст {
        ціль позиція_тексту = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        покласти_в_накопичувач<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса, виділити_обʼєкт_тексту(М, код.тексти[позиція_тексту]));
      } інакше якщо вказівка == ВДодати {
        ціль обʼєкт_2 = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
        ціль обʼєкт_1 = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
        ціль результат_додавання = обʼєкт_додати(обʼєкт_1, М, середовище, обʼєкт_2);
        якщо М.стан_помилки {
          якщо М.місцезнаходження_помилки == пусто {
            М.місцезнаходження_помилки = виділити_місцезнаходження_помилки_з_вказівки_або_пусто(М, код, позиція_вказівки);
          }
          вернути результат_додавання;
        }
        покласти_в_накопичувач<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса, результат_додавання);
      } інакше якщо вказівка == ВВиконати {
        ціль позиція_цієї_вказівки = позиція_вказівки;
        ціль кількість_аргументів = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль аргументи = виділити_вектор<адреса<Обʼєкт>>();
        змінна ціль па: п32 = 0;
        поки па < кількість_аргументів {
          ціль аргумент = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
          додати_до_вектору<адреса<Обʼєкт>>(аргументи, аргумент);
          па = па + 1;
        }
        обернути_вектор<адреса<Обʼєкт>>(аргументи);
        ціль обʼєкт = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
        ціль результат_виконання = обʼєкт_виконати(обʼєкт, М, середовище, пусто, аргументи, пусто);
        якщо М.стан_помилки {
          якщо М.місцезнаходження_помилки == пусто {
            М.місцезнаходження_помилки = виділити_місцезнаходження_помилки_з_вказівки_або_пусто(М, код, позиція_цієї_вказівки);
          }
          вернути результат_виконання;
        }
        покласти_в_накопичувач<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса, результат_виконання);
      } інакше якщо вказівка == ВПопроситиВиконати {
        ціль позиція_цієї_вказівки = позиція_вказівки;
        ціль позиція_назви = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль назва = код.назви[позиція_назви];
        ціль кількість_аргументів = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль аргументи = виділити_вектор<адреса<Обʼєкт>>();
        змінна ціль па: п32 = 0;
        поки па < кількість_аргументів {
          ціль аргумент = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
          додати_до_вектору<адреса<Обʼєкт>>(аргументи, аргумент);
          па = па + 1;
        }
        обернути_вектор<адреса<Обʼєкт>>(аргументи);
        ціль обʼєкт = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
        ціль обʼєкт_властивості = отримати_властивість(обʼєкт, М, назва);
        ціль результат_виконання = обʼєкт_виконати(обʼєкт_властивості, М, середовище, обʼєкт, аргументи, пусто);
        якщо М.стан_помилки {
          якщо М.місцезнаходження_помилки == пусто {
            М.місцезнаходження_помилки = виділити_місцезнаходження_помилки_з_вказівки_або_пусто(М, код, позиція_цієї_вказівки);
          }
          вернути результат_виконання;
        }
        покласти_в_накопичувач<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса, результат_виконання);
      } інакше якщо вказівка == ВВиконатиЗНазвами {
        ціль позиція_цієї_вказівки = позиція_вказівки;
        ціль аргументи_з_назвами = забрати_з_накопичувача<адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>>(М.накопичувач_реєстрів_аргументів::адреса);
        ціль кількість_аргументів = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль аргументи = виділити_вектор<адреса<Обʼєкт>>();
        змінна ціль па: п32 = 0;
        поки па < кількість_аргументів {
          ціль аргумент = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
          додати_до_вектору<адреса<Обʼєкт>>(аргументи, аргумент);
          па = па + 1;
        }
        обернути_вектор<адреса<Обʼєкт>>(аргументи);
        ціль обʼєкт = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
        ціль результат_виконання = обʼєкт_виконати(обʼєкт, М, середовище, пусто, аргументи, аргументи_з_назвами);
        якщо М.стан_помилки {
          якщо М.місцезнаходження_помилки == пусто {
            М.місцезнаходження_помилки = виділити_місцезнаходження_помилки_з_вказівки_або_пусто(М, код, позиція_цієї_вказівки);
          }
          вернути результат_виконання;
        }
        покласти_в_накопичувач<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса, результат_виконання);
      } інакше якщо вказівка == ВПопроситиВиконатиЗНазвами {
        ціль позиція_цієї_вказівки = позиція_вказівки;
        ціль позиція_назви = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль назва = код.назви[позиція_назви];
        ціль аргументи_з_назвами = забрати_з_накопичувача<адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>>(М.накопичувач_реєстрів_аргументів::адреса);
        ціль кількість_аргументів = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль аргументи = виділити_вектор<адреса<Обʼєкт>>();
        змінна ціль па: п32 = 0;
        поки па < кількість_аргументів {
          ціль аргумент = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
          додати_до_вектору<адреса<Обʼєкт>>(аргументи, аргумент);
          па = па + 1;
        }
        обернути_вектор<адреса<Обʼєкт>>(аргументи);
        ціль обʼєкт = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
        ціль обʼєкт_властивості = отримати_властивість(обʼєкт, М, назва);
        ціль результат_виконання = обʼєкт_виконати(обʼєкт_властивості, М, середовище, обʼєкт, аргументи, аргументи_з_назвами);
        якщо М.стан_помилки {
          якщо М.місцезнаходження_помилки == пусто {
            М.місцезнаходження_помилки = виділити_місцезнаходження_помилки_з_вказівки_або_пусто(М, код, позиція_цієї_вказівки);
          }
          вернути результат_виконання;
        }
        покласти_в_накопичувач<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса, результат_виконання);
      } інакше якщо вказівка == ВПопроситиВластивість {
        ціль обʼєкт = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
        ціль позиція_назви = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль назва = код.назви[позиція_назви];
        покласти_в_накопичувач<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса, отримати_властивість(обʼєкт, М, назва));
      } інакше якщо вказівка == ВПопроситиЗмінитиВластивість {
        ціль значення = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
        ціль обʼєкт = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
        ціль позиція_назви = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль назва = код.назви[позиція_назви];
        змінити_властивість(обʼєкт, М, назва, значення);
      } інакше якщо вказівка == ВПокластиРеєстрАргументівЗНазвами {
        ціль аргументи_з_назвами = виділити_реєстр<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні);
        покласти_в_накопичувач<адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>>(М.накопичувач_реєстрів_аргументів::адреса, аргументи_з_назвами);
      } інакше якщо вказівка == ВЗареєструватиАргументЗНазвою {
        ціль значення = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
        ціль позиція_назви = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль назва = код.назви[позиція_назви];
        змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(М.накопичувач_реєстрів_аргументів.дані[М.накопичувач_реєстрів_аргументів.розмір - 1], назва, значення);
      } інакше якщо вказівка == ВПокластиПусто {
        покласти_в_накопичувач<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса, пусто);
      } інакше якщо вказівка == ВПокластиРеєстрПараметрів {
        ціль реєстр_параметрів = виділити_реєстр<адреса<Назва>, Параметр>(перевірити_чи_назви_рівні);
        покласти_в_накопичувач<адреса<Реєстр<адреса<Назва>, Параметр>>>(М.накопичувач_реєстрів_параметрів::адреса, реєстр_параметрів);
      } інакше якщо вказівка == ВЗареєструватиПараметр {
        ціль позиція_назви = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль назва = код.назви[позиція_назви];
        ціль кількість_типів = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль типи = зробити_накопичувач<адреса<Обʼєкт>>();
        змінна ціль пт: п32 = 0;
        поки пт < кількість_типів {
          ціль тип = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
          покласти_в_накопичувач<адреса<Обʼєкт>>(типи::адреса, тип);
          пт = пт + 1;
        }
        обернути_накопичувач<адреса<Обʼєкт>>(типи::адреса);
        ціль код_значення_за_замовчуванням = М.тримач_коду;
        М.тримач_коду = пусто;
        ціль параметр = Параметр {
          назва = назва,
          типи = типи,
          код_значення_за_замовчуванням = код_значення_за_замовчуванням,
        };
        змінити_в_реєстрі<адреса<Назва>, Параметр>(М.накопичувач_реєстрів_параметрів.дані[М.накопичувач_реєстрів_параметрів.розмір - 1], назва, параметр);
      } інакше якщо вказівка == ВСтворитиСтруктуру {
        ціль реєстр_параметрів = забрати_з_накопичувача<адреса<Реєстр<адреса<Назва>, Параметр>>>(М.накопичувач_реєстрів_параметрів::адреса);
        ціль обʼєкт_предка = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
        ціль позиція_назви = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль назва = код.назви[позиція_назви];
        ціль обʼєкт_структури = виділити_обʼєкт_структури(М, назва, обʼєкт_предка);
        синонім дані_структури = обʼєкт_структури.дані як ДаніОбʼєктаСтруктури;
        дані_структури.параметри = реєстр_параметрів;
        покласти_в_накопичувач<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса, обʼєкт_структури);
      } інакше якщо вказівка == ВСтворитиДію {
        ціль реєстр_параметрів = забрати_з_накопичувача<адреса<Реєстр<адреса<Назва>, Параметр>>>(М.накопичувач_реєстрів_параметрів::адреса);
        ціль позиція_назви = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль назва = код.назви[позиція_назви];
        ціль позиція_підкоду = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль підкод = код.підкоди[позиція_підкоду];
        ціль обʼєкт_дії = виділити_обʼєкт_дії(М, назва, середовище, підкод);
        синонім дані_дії = обʼєкт_дії.дані як ДаніОбʼєктаДії;
        дані_дії.параметри = реєстр_параметрів;
        покласти_в_накопичувач<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса, обʼєкт_дії);
      } інакше якщо вказівка == ВТриматиКод {
        ціль позиція_підкоду = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль підкод = код.підкоди[позиція_підкоду];
        М.тримач_коду = підкод;
      } інакше {
        увімкнути_стан_помилки(М);
        М.місцезнаходження_помилки = виділити_місцезнаходження_помилки_з_вказівки_або_пусто(М, код, позиція_вказівки);
        вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Виявлено невідому вказівку");
      }
      позиція_вказівки = позиція_вказівки + 1;
    }
    вернути пусто;
  }
}