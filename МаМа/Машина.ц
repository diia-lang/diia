взяти визначення МаМа;

секція МаМа {
  місцева дія надрукувати_обʼєкт(М: адреса<Машина>, обʼєкт: адреса<Обʼєкт>) {
    якщо обʼєкт == пусто {
      надрукувати_ю8(ю8"пусто");
    } інакше якщо обʼєкт.обʼєкт_структури == М.обʼєкт_структури_число {
      надрукувати_обʼєкт_число(М, обʼєкт);
    } інакше {
      надрукувати_ю8(ю8"Невідомий обʼєкт");
    }
  }

  місцева дія виділити_обʼєкт(М: адреса<Машина>, обʼєкт_структури: адреса<Обʼєкт>): адреса<Обʼєкт> {
    ціль обʼєкт = виділити<Обʼєкт>();
    обʼєкт.обʼєкт_структури = обʼєкт_структури;
    обʼєкт.властивості = зробити_карту<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні);
    обʼєкт.додати = пусто;
    обʼєкт.виконати_ = пусто;
    вернути обʼєкт;
  }

  місцева дія виділити_обʼєкт_структури(М: адреса<Машина>, предок: адреса<Обʼєкт>): адреса<Обʼєкт> {
    ціль обʼєкт_структури = виділити_обʼєкт(М, М.обʼєкт_структури_структура);
    ціль дані_обʼєкта_структури = ДаніОбʼєктаСтруктури {};
    якщо предок == пусто {
      дані_обʼєкта_структури.предок = М.обʼєкт_структури_обʼєкт;
    } інакше {
      дані_обʼєкта_структури.предок = предок;
    }
    обʼєкт_структури.дані = дані_обʼєкта_структури;
    вернути обʼєкт_структури;
  }

  місцева дія виділити_обʼєкт_дії(М: адреса<Машина>): адреса<Обʼєкт> {
    ціль обʼєкт_дії = виділити_обʼєкт(М, М.обʼєкт_структури_Дія);
    вернути обʼєкт_дії;
  }

  місцева дія виділити_машину(): адреса<Машина> {
    ціль М = виділити<Машина>();
    М.БН = зробити_базу_назв();
    М.стопка_виконання = зробити_стопку<адреса<Обʼєкт>>();
    М.стопка_накопичувачів_аргументів = зробити_стопку<адреса<Карта<адреса<Назва>, адреса<Обʼєкт>>>>();
    М.глобальне_середовище = виділити_середовище(пусто);
    М.обʼєкт_структури_обʼєкт = виділити_обʼєкт(М, пусто);
    М.обʼєкт_структури_обʼєкт.дані = ДаніОбʼєктаСтруктури {
      предок = пусто
    };
    М.обʼєкт_структури_структура = виділити_обʼєкт(М, пусто);
    М.обʼєкт_структури_структура.дані = ДаніОбʼєктаСтруктури {
      предок = М.обʼєкт_структури_обʼєкт
    };
    М.обʼєкт_структури_обʼєкт.обʼєкт_структури = М.обʼєкт_структури_структура;
    М.обʼєкт_структури_число = виділити_обʼєкт_структури(М, М.обʼєкт_структури_обʼєкт);
    М.обʼєкт_структури_Дія = виділити_обʼєкт_структури(М, М.обʼєкт_структури_обʼєкт);
    вернути М;
  }

  місцева дія увімкнути_стан_помилки(М: адреса<Машина>, позиція_місцезнаходження_помилки: п32) {
    М.помилка = так;
    М.позиція_місцезнаходження_помилки = позиція_місцезнаходження_помилки;
  }

  місцева дія вимкнути_стан_помилки(М: адреса<Машина>) {
    М.помилка = ні;
    М.позиція_місцезнаходження_помилки = 0;
  }

  місцева дія виконати_код(М: адреса<Машина>, код: адреса<Код>) {
    ціль середовище = М.глобальне_середовище;
    ціль позиція_вказівки: п32 = 0;
    поки позиція_вказівки < код.розмір_вказівок {
      ціль вказівка = код.вказівки[позиція_вказівки];
      якщо вказівка == ВВизначити {
        ціль значення = забрати_з_стопки<адреса<Обʼєкт>>(М.стопка_виконання::адреса);
        ціль позиція_назви = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль назва = код.назви[позиція_назви];
        змінити_в_середовищі(середовище, назва, значення);
      } інакше якщо вказівка == ВЗвернутись {
        ціль позиція_назви = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль назва = код.назви[позиція_назви];
        покласти_на_стопку<адреса<Обʼєкт>>(М.стопка_виконання::адреса, знайти_в_середовищі(середовище, назва));
      } інакше якщо вказівка == ВПокластиЧисло {
        ціль позиція_числа = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        покласти_на_стопку<адреса<Обʼєкт>>(М.стопка_виконання::адреса, виділити_обʼєкт_числа(М, код.числа[позиція_числа]));
      } інакше якщо вказівка == ВДодати {
        ціль обʼєкт_2 = забрати_з_стопки<адреса<Обʼєкт>>(М.стопка_виконання::адреса);
        ціль обʼєкт_1 = забрати_з_стопки<адреса<Обʼєкт>>(М.стопка_виконання::адреса);
        якщо обʼєкт_1 == пусто {
          надрукувати_ю8(ю8"Немає першого числа");
          вернути;
        }
        якщо обʼєкт_1.додати == пусто {
          надрукувати_ю8(ю8"Неможливо додати");
          вернути;
        }
        ціль результат_додавання = обʼєкт_1.додати(обʼєкт_1, М, середовище, обʼєкт_2);
        // потім: перевірити чи помилка
        покласти_на_стопку<адреса<Обʼєкт>>(М.стопка_виконання::адреса, результат_додавання);
      } інакше якщо вказівка == ВВиконати {
        ціль аргументи_з_назвами = забрати_з_стопки<адреса<Карта<адреса<Назва>, адреса<Обʼєкт>>>>(М.стопка_накопичувачів_аргументів::адреса);
        ціль кількість_аргументів = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль аргументи = виділити_вектор<адреса<Обʼєкт>>();
        змінна ціль па: п32 = 0;
        поки па < кількість_аргументів {
          ціль аргумент = забрати_з_стопки<адреса<Обʼєкт>>(М.стопка_виконання::адреса);
          додати_до_вектору<адреса<Обʼєкт>>(аргументи, аргумент);
          па = па + 1;
        }
        обернути_вектор<адреса<Обʼєкт>>(аргументи);
        ціль обʼєкт = забрати_з_стопки<адреса<Обʼєкт>>(М.стопка_виконання::адреса);
        якщо обʼєкт == пусто {
          надрукувати_ю8(ю8"Неможливо виконати пусто");
          покласти_на_стопку<адреса<Обʼєкт>>(М.стопка_виконання::адреса, пусто);
        } інакше {
          якщо обʼєкт.виконати_ == пусто {
            надрукувати_ю8(ю8"Неможливо виконати");
            покласти_на_стопку<адреса<Обʼєкт>>(М.стопка_виконання::адреса, пусто);
          } інакше {
            ціль результат_виконання = обʼєкт.виконати_(обʼєкт, М, середовище, аргументи, аргументи_з_назвами);
            покласти_на_стопку<адреса<Обʼєкт>>(М.стопка_виконання::адреса, результат_виконання);
          }
        }
      } інакше якщо вказівка == ВПокластиНакопичувачАргументів {
        ціль аргументи_з_назвами = виділити_карту<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні);
        покласти_на_стопку<адреса<Карта<адреса<Назва>, адреса<Обʼєкт>>>>(М.стопка_накопичувачів_аргументів::адреса, аргументи_з_назвами);
      } інакше якщо вказівка == ВНакопичитиАргумент {
        ціль значення = забрати_з_стопки<адреса<Обʼєкт>>(М.стопка_виконання::адреса);
        ціль аргументи_з_назвами = М.стопка_накопичувачів_аргументів.дані[М.стопка_накопичувачів_аргументів.розмір - 1];
        ціль позиція_назви = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        ціль назва = код.назви[позиція_назви];
        змінити_в_карті<адреса<Назва>, адреса<Обʼєкт>>(аргументи_з_назвами, назва, значення);
      } інакше {
        вивести_ю8(ю8"Невідома вказівка на позиції ");
        вивести_п64(позиція_вказівки як п64);
        вивести_ю8(ю8": ");
        надрукувати_п64(вказівка як п64);
        вернути;
      }
      позиція_вказівки = позиція_вказівки + 1;
    }
  }

  місцева дія зробити_базу_назв(): БазаНазв {
    ціль БН = БазаНазв {};
    БН._дані = зробити_вектор<адреса<Назва>>();
    БН.предок = знайти_або_виділити_й_додати_назву(БН::адреса, ю8"предок");
    вернути БН;
  }

  місцева дія знайти_або_виділити_й_додати_назву(БН: адреса<БазаНазв>, значення: Ю8): адреса<Назва> {
    змінна ціль позиція: позитивне = 0;
    поки позиція < БН._дані.довжина {
      ціль назва = БН._дані.дані[позиція];
      якщо перевірити_чи_ю8_рівні(назва.значення, значення) {
        вернути назва;
      }
      позиція = позиція + 1;
    }
    ціль назва = виділити_назву(значення);
    додати_до_вектору<адреса<Назва>>(БН._дані::адреса, назва);
    вернути назва;
  }

  місцева дія виділити_середовище(батьківське: адреса<Середовище>): адреса<Середовище> {
    ціль середовище = виділити<Середовище>();
    середовище.батьківське = батьківське;
    середовище.субʼєкти = зробити_карту<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні);
    вернути середовище;
  }

  місцева дія змінити_в_середовищі(середовище: адреса<Середовище>, назва: адреса<Назва>, обʼєкт: адреса<Обʼєкт>) {
    змінити_в_карті<адреса<Назва>, адреса<Обʼєкт>>(середовище.субʼєкти::адреса, назва, обʼєкт);
  }

  місцева дія знайти_в_середовищі(середовище: адреса<Середовище>, назва: адреса<Назва>): адреса<Обʼєкт> {
    змінна ціль поточне_середовище = середовище;
    поки поточне_середовище != пусто {
      ціль знайдений_елемент_карти = отримати_з_карти<адреса<Назва>, адреса<Обʼєкт>>(поточне_середовище.субʼєкти::адреса, назва);
      якщо знайдений_елемент_карти != пусто {
        вернути знайдений_елемент_карти.значення;
      }
      поточне_середовище = поточне_середовище.батьківське;
    }
    вернути пусто;
  }
}