////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  місцева дія створити_структуру_перебору(М: адреса<Машина>): адреса<ОбʼєктСтруктури> {
    ціль обʼєкт_структури = виділити_обʼєкт_структури(М, М.БН.С.перебір, М.обʼєкт_структури_обʼєкт);

    вернути обʼєкт_структури;
  }

  місцева дія виділити_обʼєкт_перебору(М: адреса<Машина>): адреса<ОбʼєктПеребору> {
    ціль обʼєкт_перебору = виділити_обʼєкт<ОбʼєктПеребору>(М, М.обʼєкт_структури_перебір);

    обʼєкт_перебору.властивості = зробити_реєстр<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні);

    вернути обʼєкт_перебору;
  }

  місцева дія звільнити_обʼєкт_перебору(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>) {
    звільнити_значення_реєстру<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_перебору.властивості);
    звільнити(обʼєкт_перебору);
  }

  місцева дія обʼєкт_перебору_виконати(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перебір") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_отримати_властивість(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    ціль елемент_реєстру = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_перебору.властивості::адреса, назва);
    якщо елемент_реєстру != пусто {
      вернути елемент_реєстру.значення;
    }
    змінна ціль тип = обʼєкт_перебору.тип;
    поки тип != пусто {
      ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(тип.методи::адреса, назва);
      якщо елемент_реєстру_методів != пусто {
        вернути елемент_реєстру_методів.значення;
      }
      тип = тип.предок;
    }
    вернути пусто;
  }

  місцева дія обʼєкт_перебору_змінити_властивість(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_перебору.властивості::адреса, назва, аргумент);
    вернути пусто;
  }

  місцева дія обʼєкт_перебору_виконати_властивість(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_властивості = обʼєкт_перебору_отримати_властивість(обʼєкт_перебору, М, назва_властивості);
    якщо М.стан_падіння {
      вернути обʼєкт_властивості;
    }
    вернути обʼєкт_виконати(обʼєкт_властивості, М, обʼєкт_перебору як адреса<Обʼєкт>, аргументи, іменовані_аргументи);
  }

  місцева дія обʼєкт_перебору_отримати_елемент(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати елемент з перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_змінити_елемент(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо змінити елемент в переборі") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_отримати_перебір(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати перебір з перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_додати(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати додавання для перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_відняти(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати віднімання для перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_помножити(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати множення для перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_поділити(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати ділення для перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_отримати_остачу_ділення(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати отримання остачі ділення для перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_отримати_частку_ділення(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати отримання часки ділення для перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_піднести_до_степеня(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати піднесення до степеня для перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_зсунути_вліво(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вліво для перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_зсунути_вправо(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо для перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_зсунути_вправо_зі_заповненням(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо зі заповненням для перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_двійкове_і(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове І для перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_двійкове_або(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове АБО для перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_двійкове_виключне_або(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове ВИКЛЮЧНЕ АБО для перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_двійкове_не(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове НЕ для перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_більше(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на більшість для перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_менше(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на меншість для перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_рівно(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо перевірити_чи_обʼєкт_перебору_рівно(обʼєкт_перебору, М, аргумент) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_містить(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на місткість для перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_є(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_Структура {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо перевірити_чи_обʼєкт_перебору_є(обʼєкт_перебору, М, аргумент як адреса<ОбʼєктСтруктури>) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_відʼємне(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати відʼємне для перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_числове(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати числове для перебору") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_перебору_заперечити(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_перебору == М.обʼєкт_логічного_так {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
  }

  місцева дія перевірити_чи_обʼєкт_перебору_рівно(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне {
    ціль обʼєкт = обʼєкт_перебору як адреса<Обʼєкт>;
    якщо обʼєкт == аргумент {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_обʼєкт_перебору_є(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне {
    якщо обʼєкт_структури == М.обʼєкт_структури_логічне {
      вернути так;
    }
    вернути ні;
  }

  місцева дія надрукувати_обʼєкт_перебору_в_накопичувач_ю8(обʼєкт_перебору: адреса<ОбʼєктПеребору>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"<перебір>");
  }
}