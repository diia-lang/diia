////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  місцева дія зробити_утилізатор(): Утилізатор {
    ціль утилізатор: Утилізатор;
    утилізатор.початок_обʼєктів = пусто;
    утилізатор.кількість_обʼєктів = 0;
    утилізатор.кількість_обʼєктів_щоб_запустити_утилізацію = 0;
    утилізатор.кількість_середовищ_щоб_запустити_утилізацію = 0;
    утилізатор.початок_середовищ = пусто;
    утилізатор.кількість_середовищ = 0;
    вернути утилізатор;
  }

  місцева дія позначити(М: адреса<Машина>) {
    змінна ціль п: позитивне = 0;
    поки п < М.сховище_констант.розмір {
      позначити_обʼєкт(М, М.сховище_констант.дані[п]);
      п += 1;
    }
    змінна ціль пів: позитивне = 0;
    поки пів < М.історія.розмір {
      позначити_обʼєкт_дії(М, М.історія.дані[пів].обʼєкт_дії);
      позначити_середовище(М, М.історія.дані[пів].середовище);
      пів += 1;
    }
    п = 0;
    поки п < М.НаО.розмір {
      позначити_обʼєкт(М, М.НаО.дані[п]);
      п += 1;
    }
    п = 0;
    поки п < М.НаРАрг.розмір {
      змінна ціль р: позитивне = 0;
      поки р < М.НаРАрг.дані[п].розмір {
        позначити_обʼєкт(М, М.НаРАрг.дані[п].елементи[р].значення);
        р += 1;
      }
      п += 1;
    }
    п = 0;
    поки п < М.НаРПар.розмір {
      змінна ціль р: позитивне = 0;
      поки р < М.НаРПар.дані[п].розмір {
        змінна ціль пр: позитивне = 0;
        поки пр < М.НаРПар.дані[п].елементи[р].значення.типи.розмір {
          позначити_обʼєкт_структури(М, М.НаРПар.дані[п].елементи[р].значення.типи.дані[пр]);
          пр = пр + 1;
        }
        р += 1;
      }
      п += 1;
    }
    п = 0;
    поки п < М.НаОТ.розмір {
      позначити_обʼєкт(М, М.НаОТ.дані[п]);
      п += 1;
    }
    п = 0;
    поки п < М.взяті_модулі.розмір {
      позначити_обʼєкт_модуля(М, М.взяті_модулі.елементи[п].значення);
      п += 1;
    }
    позначити_середовище(М, М.глобальне_середовище);
    позначити_обʼєкт_структури(М, М.обʼєкт_структури_обʼєкт);
    позначити_обʼєкт_структури(М, М.обʼєкт_структури_Структура);
    позначити_обʼєкт_структури(М, М.обʼєкт_структури_Дія);
    позначити_обʼєкт_структури(М, М.обʼєкт_структури_НативнаДія);
    позначити_обʼєкт_структури(М, М.обʼєкт_структури_число);
    позначити_обʼєкт_структури(М, М.обʼєкт_структури_текст);
    позначити_обʼєкт_структури(М, М.обʼєкт_структури_юнікод);
    позначити_обʼєкт_структури(М, М.обʼєкт_структури_Модуль);
    позначити_обʼєкт_структури(М, М.обʼєкт_структури_список);
    позначити_обʼєкт_структури(М, М.обʼєкт_структури_словник);
    позначити_обʼєкт_структури(М, М.обʼєкт_структури_логічне);
  }

  місцева дія утилізувати(М: адреса<Машина>) {
//    надрукувати_ю8(ю8"Починаємо утилізацію...");
//    надрукувати_п64(М.утилізатор.кількість_обʼєктів);
//    надрукувати_п64(М.утилізатор.кількість_середовищ);
//    надрукувати_п64(М.утилізатор.кількість_обʼєктів_щоб_запустити_утилізацію);
//    надрукувати_п64(М.утилізатор.кількість_середовищ_щоб_запустити_утилізацію);
    позначити(М);
    змінна ціль попередній_обʼєкт: адреса<Обʼєкт> = пусто;
    змінна ціль обʼєкт = М.утилізатор.початок_обʼєктів;
    поки обʼєкт != пусто {
      ціль наступний_обʼєкт = обʼєкт.наступний_обʼєкт;
      якщо обʼєкт.позначено == ні {
        якщо попередній_обʼєкт == пусто {
          М.утилізатор.початок_обʼєктів = наступний_обʼєкт;
        } інакше {
          попередній_обʼєкт.наступний_обʼєкт = наступний_обʼєкт;
        }
        звільнити_обʼєкт(обʼєкт, М);
        М.утилізатор.кількість_обʼєктів = М.утилізатор.кількість_обʼєктів - 1;
      } інакше {
        попередній_обʼєкт = обʼєкт;
      }
      обʼєкт = наступний_обʼєкт;
    }
    змінна ціль попереднє_середовище: адреса<Середовище> = пусто;
    змінна ціль середовище = М.утилізатор.початок_середовищ;
    поки середовище != пусто {
      ціль наступне_середовище = середовище.наступне_середовище;
      якщо середовище.позначено == ні {
        якщо попереднє_середовище == пусто {
          М.утилізатор.початок_середовищ = наступне_середовище;
        } інакше {
          попереднє_середовище.наступне_середовище = наступне_середовище;
        }
        звільнити_середовище(М, середовище);
        М.утилізатор.кількість_середовищ = М.утилізатор.кількість_середовищ - 1;
      } інакше {
        попереднє_середовище = середовище;
      }
      середовище = наступне_середовище;
    }
    обʼєкт = М.утилізатор.початок_обʼєктів;
    поки обʼєкт != пусто {
      обʼєкт.позначено = ні;
      обʼєкт = обʼєкт.наступний_обʼєкт;
    }
    середовище = М.утилізатор.початок_середовищ;
    поки середовище != пусто {
      середовище.позначено = ні;
      середовище = середовище.наступне_середовище;
    }
    М.утилізатор.кількість_обʼєктів_щоб_запустити_утилізацію = (М.утилізатор.кількість_обʼєктів * 5) + 1;
    М.утилізатор.кількість_середовищ_щоб_запустити_утилізацію = (М.утилізатор.кількість_середовищ * 5) + 1;
  }

  місцева дія позначити_властивості(М: адреса<Машина>, властивості: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>) {
    змінна ціль пв: позитивне = 0;
    поки пв < властивості.розмір {
      позначити_обʼєкт(М, властивості.елементи[пв].значення);
      пв += 1;
    }
  }

  місцева дія позначити_параметри(М: адреса<Машина>, параметри: адреса<Реєстр<адреса<Назва>, Параметр>>) {
    змінна ціль пп: позитивне = 0;
    поки пп < параметри.розмір {
      ціль параметр = параметри.елементи[пп].значення;
      змінна ціль птп: позитивне = 0;
      поки птп < параметр.типи.розмір {
        позначити_обʼєкт_структури(М, параметр.типи.дані[птп]);
        птп += 1;
      }
      пп += 1;
    }
  }

  місцева дія позначити_методи(М: адреса<Машина>, методи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>) {
    змінна ціль мп: позитивне = 0;
    поки мп < методи.розмір {
      позначити_обʼєкт(М, методи.елементи[мп].значення);
      мп += 1;
    }
  }

  // мітка: прохід по типах обʼєктів
  місцева дія позначити_обʼєкт(М: адреса<Машина>, обʼєкт: адреса<Обʼєкт>) {
    якщо обʼєкт == пусто {
      вернути;
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      позначити_обʼєкт_структури(М, обʼєкт як адреса<ОбʼєктСтруктури>);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      позначити_обʼєкт_дії(М, обʼєкт як адреса<ОбʼєктДії>);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      позначити_обʼєкт_нативної_дії(М, обʼєкт як адреса<ОбʼєктНативноїДії>);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      позначити_обʼєкт_числа(М, обʼєкт як адреса<ОбʼєктЧисла>);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      позначити_обʼєкт_тексту(М, обʼєкт як адреса<ОбʼєктТексту>);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      позначити_обʼєкт_юнікоду(М, обʼєкт як адреса<ОбʼєктЮнікоду>);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      позначити_обʼєкт_модуля(М, обʼєкт як адреса<ОбʼєктМодуля>);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      позначити_обʼєкт_списку(М, обʼєкт як адреса<ОбʼєктСписку>);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      позначити_обʼєкт_словника(М, обʼєкт як адреса<ОбʼєктСловника>);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      позначити_обʼєкт_логічного(М, обʼєкт як адреса<ОбʼєктЛогічного>);
    } інакше {
      позначити_складений_обʼєкт(М, обʼєкт як адреса<СкладенийОбʼєкт>);
    }
  }

  місцева дія позначити_обʼєкт_структури(М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>) {
    якщо обʼєкт_структури == пусто {
      вернути;
    }
    якщо обʼєкт_структури.позначено == так {
      вернути;
    }
    обʼєкт_структури.позначено = так;
    позначити_обʼєкт_структури(М, обʼєкт_структури.тип);
    позначити_обʼєкт_структури(М, обʼєкт_структури.предок);
    позначити_параметри(М, обʼєкт_структури.параметри);
    позначити_методи(М, обʼєкт_структури.методи::адреса);
    позначити_властивості(М, обʼєкт_структури.властивості::адреса);
    позначити_середовище(М, обʼєкт_структури.середовище_створення);
  }

  місцева дія позначити_обʼєкт_дії(М: адреса<Машина>, обʼєкт_дії: адреса<ОбʼєктДії>) {
    якщо обʼєкт_дії == пусто {
      вернути;
    }
    якщо обʼєкт_дії.позначено == так {
      вернути;
    }
    обʼєкт_дії.позначено = так;
    позначити_обʼєкт_структури(М, обʼєкт_дії.тип);
    позначити_параметри(М, обʼєкт_дії.параметри);
    позначити_властивості(М, обʼєкт_дії.властивості::адреса);
    позначити_середовище(М, обʼєкт_дії.середовище_створення);
  }

  місцева дія позначити_обʼєкт_нативної_дії(М: адреса<Машина>, обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>) {
    якщо обʼєкт_нативної_дії == пусто {
      вернути;
    }
    якщо обʼєкт_нативної_дії.позначено == так {
      вернути;
    }
    обʼєкт_нативної_дії.позначено = так;
    позначити_обʼєкт_структури(М, обʼєкт_нативної_дії.тип);
    позначити_властивості(М, обʼєкт_нативної_дії.властивості::адреса);
  }

  місцева дія позначити_обʼєкт_числа(М: адреса<Машина>, обʼєкт_числа: адреса<ОбʼєктЧисла>) {
    якщо обʼєкт_числа == пусто {
      вернути;
    }
    якщо обʼєкт_числа.позначено == так {
      вернути;
    }
    обʼєкт_числа.позначено = так;
    позначити_обʼєкт_структури(М, обʼєкт_числа.тип);
  }

  місцева дія позначити_обʼєкт_тексту(М: адреса<Машина>, обʼєкт_тексту: адреса<ОбʼєктТексту>) {
    якщо обʼєкт_тексту == пусто {
      вернути;
    }
    якщо обʼєкт_тексту.позначено == так {
      вернути;
    }
    обʼєкт_тексту.позначено = так;
    позначити_обʼєкт_структури(М, обʼєкт_тексту.тип);
  }

  місцева дія позначити_обʼєкт_юнікоду(М: адреса<Машина>, обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>) {
    якщо обʼєкт_юнікоду == пусто {
      вернути;
    }
    якщо обʼєкт_юнікоду.позначено == так {
      вернути;
    }
    обʼєкт_юнікоду.позначено = так;
    позначити_обʼєкт_структури(М, обʼєкт_юнікоду.тип);
  }

  місцева дія позначити_обʼєкт_модуля(М: адреса<Машина>, обʼєкт_модуля: адреса<ОбʼєктМодуля>) {
    якщо обʼєкт_модуля == пусто {
      вернути;
    }
    якщо обʼєкт_модуля.позначено == так {
      вернути;
    }
    обʼєкт_модуля.позначено = так;
    позначити_обʼєкт_структури(М, обʼєкт_модуля.тип);
    позначити_властивості(М, обʼєкт_модуля.властивості::адреса);
  }

  місцева дія позначити_обʼєкт_списку(М: адреса<Машина>, обʼєкт_списку: адреса<ОбʼєктСписку>) {
    якщо обʼєкт_списку == пусто {
      вернути;
    }
    якщо обʼєкт_списку.позначено == так {
      вернути;
    }
    обʼєкт_списку.позначено = так;
    позначити_обʼєкт_структури(М, обʼєкт_списку.тип);
    позначити_властивості(М, обʼєкт_списку.властивості::адреса);
    змінна ціль п: позитивне = 0;
    поки п < обʼєкт_списку.елементи.розмір {
      позначити_обʼєкт(М, обʼєкт_списку.елементи.дані[п]);
      п += 1;
    }
  }

  місцева дія позначити_обʼєкт_словника(М: адреса<Машина>, обʼєкт_словника: адреса<ОбʼєктСловника>) {
    якщо обʼєкт_словника == пусто {
      вернути;
    }
    якщо обʼєкт_словника.позначено == так {
      вернути;
    }
    обʼєкт_словника.позначено = так;
    позначити_обʼєкт_структури(М, обʼєкт_словника.тип);
    позначити_властивості(М, обʼєкт_словника.властивості::адреса);
    змінна ціль п: позитивне = 0;
    поки п < обʼєкт_словника.елементи.розмір {
      позначити_обʼєкт(М, обʼєкт_словника.елементи.елементи[п].ключ);
      позначити_обʼєкт(М, обʼєкт_словника.елементи.елементи[п].значення);
      п += 1;
    }
  }

  місцева дія позначити_обʼєкт_логічного(М: адреса<Машина>, обʼєкт_логічного: адреса<ОбʼєктЛогічного>) {
    якщо обʼєкт_логічного == пусто {
      вернути;
    }
    якщо обʼєкт_логічного.позначено == так {
      вернути;
    }
    позначити_обʼєкт_структури(М, обʼєкт_логічного.тип);
    обʼєкт_логічного.позначено = так;
  }

  місцева дія позначити_складений_обʼєкт(М: адреса<Машина>, складений_обʼєкт: адреса<СкладенийОбʼєкт>) {
    якщо складений_обʼєкт == пусто {
      вернути;
    }
    якщо складений_обʼєкт.позначено == так {
      вернути;
    }
    складений_обʼєкт.позначено = так;
    позначити_обʼєкт_структури(М, складений_обʼєкт.тип);
    позначити_властивості(М, складений_обʼєкт.властивості::адреса);
  }

  місцева дія позначити_середовище(М: адреса<Машина>, середовище: адреса<Середовище>) {
    якщо середовище == пусто {
      вернути;
    }
    якщо середовище.позначено == так {
      вернути;
    }
    середовище.позначено = так;
    змінна ціль пс: позитивне = 0;
    поки пс < середовище.субʼєкти.розмір {
      позначити_обʼєкт(М, середовище.субʼєкти.елементи[пс].значення);
      пс += 1;
    }
    позначити_середовище(М, середовище.батьківське);
  }
}