////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  місцева дія створити_структуру_модуля(М: адреса<Машина>): адреса<ОбʼєктСтруктури> {
    ціль обʼєкт_структури = виділити_обʼєкт_структури(М, М.БН.С.Модуль, М.обʼєкт_структури_обʼєкт);

    вернути обʼєкт_структури;
  }

  місцева дія виділити_обʼєкт_модуля(М: адреса<Машина>, назва: адреса<Назва>): адреса<ОбʼєктМодуля> {
    ціль обʼєкт_модуля = виділити_обʼєкт<ОбʼєктМодуля>(М, М.обʼєкт_структури_Модуль);

    обʼєкт_модуля.властивості = зробити_реєстр<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні);
    обʼєкт_модуля.назва = назва;
    обʼєкт_модуля.назва_паку = пусто;

    вернути обʼєкт_модуля;
  }

  місцева дія звільнити_обʼєкт_модуля(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>) {
   звільнити_значення_реєстру<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_модуля.властивості);
   звільнити(обʼєкт_модуля.назва_паку);
   звільнити(обʼєкт_модуля);
  }

  місцева дія обʼєкт_модуля_виконати(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати модуль") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_отримати_властивість(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    ціль елемент_реєстру = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_модуля.властивості::адреса, назва);
    якщо елемент_реєстру != пусто {
      вернути елемент_реєстру.значення;
    }
    змінна ціль тип = обʼєкт_модуля.тип;
    поки тип != пусто {
      ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(тип.методи::адреса, назва);
      якщо елемент_реєстру_методів != пусто {
        вернути елемент_реєстру_методів.значення;
      }
      тип = тип.предок;
    }
    вернути пусто;
  }

  місцева дія обʼєкт_модуля_змінити_властивість(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_модуля.властивості::адреса, назва, аргумент);
    вернути пусто;
  }

  місцева дія обʼєкт_модуля_виконати_властивість(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_властивості = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, назва_властивості);
    якщо М.стан_падіння {
      вернути обʼєкт_властивості;
    }
    вернути обʼєкт_виконати(обʼєкт_властивості, М, обʼєкт_модуля як адреса<Обʼєкт>, аргументи, іменовані_аргументи);
  }

  місцева дія обʼєкт_модуля_отримати_елемент(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати елемент з модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_змінити_елемент(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати елемент в модулі") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_отримати_перебір(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати перебір з модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_додати(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати додавання для модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_відняти(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати віднімання для модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_помножити(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати множення для модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_поділити(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати ділення для модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_отримати_остачу_ділення(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати отримання остачі ділення для модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_отримати_частку_ділення(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати отримання частки ділення для модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_піднести_до_степеня(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати піднесення до степеня для модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_зсунути_вліво(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вліво для модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_зсунути_вправо(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо для модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_зсунути_вправо_зі_заповненням(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо зі заповненням для модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_двійкове_і(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове І для модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_двійкове_або(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове АБО для модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_двійкове_виключне_або(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове ВИКЛЮЧНЕ АБО для модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_двійкове_не(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове НЕ для модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_більше(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на більшість для модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_менше(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на меншість для модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_рівно(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо перевірити_чи_обʼєкт_модуля_рівно(обʼєкт_модуля, М, аргумент) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_містить(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на місткість для модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_є(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_Структура {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо перевірити_чи_обʼєкт_модуля_є(обʼєкт_модуля, М, аргумент як адреса<ОбʼєктСтруктури>) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_відʼємне(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати відʼємне для модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_числове(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати числове для модуля") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_заперечити(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_збільшити(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо збільшити модуль") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_зменшити(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо зменшити модуль") як адреса<Обʼєкт>;
  }

  місцева дія перевірити_чи_обʼєкт_модуля_рівно(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне {
    ціль обʼєкт = обʼєкт_модуля як адреса<Обʼєкт>;
    якщо обʼєкт == аргумент {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_обʼєкт_модуля_є(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне {
    якщо обʼєкт_структури == М.обʼєкт_структури_Модуль {
      вернути так;
    }
    вернути ні;
  }

  місцева дія надрукувати_обʼєкт_модуля_в_накопичувач_ю8(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"<модуль>");
  }
}