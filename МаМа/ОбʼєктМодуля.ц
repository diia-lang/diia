взяти визначення МаМа;

секція МаМа {
  місцева дія створити_структуру_модуля(М: адреса<Машина>): адреса<ОбʼєктСтруктури> {
    ціль обʼєкт_структури = виділити_обʼєкт_структури(М, М.БН.С.Модуль, М.обʼєкт_структури_обʼєкт);

    вернути обʼєкт_структури;
  }

  місцева дія виділити_обʼєкт_модуля(М: адреса<Машина>, назва: адреса<Назва>): адреса<ОбʼєктМодуля> {
    ціль обʼєкт_модуля = виділити_обʼєкт<ОбʼєктМодуля>(М, М.обʼєкт_структури_Модуль);

    обʼєкт_модуля.властивості = зробити_реєстр<адреса<Назва>, адреса<Обʼєкт>>(М, перевірити_чи_назви_рівні);
    обʼєкт_модуля.назва = назва;
    обʼєкт_модуля.назва_паку = пусто;

    вернути обʼєкт_модуля;
  }

  місцева дія звільнити_обʼєкт_модуля(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>) {
   звільнити_значення_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, обʼєкт_модуля.властивості);
   звільнити(М, обʼєкт_модуля.назва_паку);
   звільнити(М, обʼєкт_модуля);
  }

  місцева дія обʼєкт_модуля_виконати(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії_виконати = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_виконати);
    якщо обʼєкт_чародії_виконати == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_виконати, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    вернути обʼєкт_виконати(обʼєкт_чародії_виконати, М, обʼєкт_я, аргументи, іменовані_аргументи);
  }

  місцева дія обʼєкт_модуля_отримати_властивість(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    ціль елемент_реєстру = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, обʼєкт_модуля.властивості::адреса, назва);
    якщо елемент_реєстру != пусто {
      вернути елемент_реєстру.значення;
    }
    змінна ціль тип = обʼєкт_модуля.тип;
    поки тип != пусто {
      ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, тип.методи::адреса, назва);
      якщо елемент_реєстру_методів != пусто {
        вернути елемент_реєстру_методів.значення;
      }
      тип = тип.предок;
    }
    вернути пусто;
  }

  місцева дія обʼєкт_модуля_змінити_властивість(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(М, обʼєкт_модуля.властивості::адреса, назва, аргумент);
    вернути пусто;
  }

  місцева дія обʼєкт_модуля_видалити_властивість(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    якщо видалити_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, обʼєкт_модуля.властивості::адреса, назва) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_виконати_властивість(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_властивості = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, назва_властивості);
    якщо М.стан_падіння == позитивне(так) {
      вернути обʼєкт_властивості;
    }
    вернути обʼєкт_виконати(обʼєкт_властивості, М, обʼєкт_модуля як адреса<Обʼєкт>, аргументи, іменовані_аргументи);
  }

  місцева дія обʼєкт_модуля_отримати_елемент(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль аргументи = виділити_накопичувач<адреса<Обʼєкт>>(М);
    покласти_в_накопичувач<адреса<Обʼєкт>>(М, аргументи, ключ);
    ціль результат = обʼєкт_модуля_виконати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_отримати_елемент, аргументи, пусто);
    звільнити_накопичувач<адреса<Обʼєкт>>(М, аргументи);
    вернути результат;
  }

  місцева дія обʼєкт_модуля_змінити_елемент(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль аргументи = виділити_накопичувач<адреса<Обʼєкт>>(М);
    покласти_в_накопичувач<адреса<Обʼєкт>>(М, аргументи, ключ);
    покласти_в_накопичувач<адреса<Обʼєкт>>(М, аргументи, значення);
    ціль результат = обʼєкт_модуля_виконати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_змінити_елемент, аргументи, пусто);
    звільнити_накопичувач<адреса<Обʼєкт>>(М, аргументи);
    вернути результат;
  }

  місцева дія обʼєкт_модуля_видалити_елемент(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль аргументи = виділити_накопичувач<адреса<Обʼєкт>>(М);
    покласти_в_накопичувач<адреса<Обʼєкт>>(М, аргументи, ключ);
    ціль результат = обʼєкт_модуля_виконати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_видалити_елемент, аргументи, пусто);
    звільнити_накопичувач<адреса<Обʼєкт>>(М, аргументи);
    вернути результат;
  }

  місцева дія обʼєкт_модуля_отримати_перебір(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    ціль результат = обʼєкт_модуля_виконати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_перебір, пусто, пусто);
    вернути результат;
  }

  місцева дія обʼєкт_модуля_додати(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_додати);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_додати, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>(М);
    покласти_в_накопичувач<адреса<Обʼєкт>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_модуля_відняти(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_відняти);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_відняти, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>(М);
    покласти_в_накопичувач<адреса<Обʼєкт>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_модуля_помножити(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_помножити);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_помножити, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>(М);
    покласти_в_накопичувач<адреса<Обʼєкт>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_модуля_поділити(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_поділити);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_поділити, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>(М);
    покласти_в_накопичувач<адреса<Обʼєкт>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_модуля_отримати_остачу_ділення(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_остача);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_остача, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>(М);
    покласти_в_накопичувач<адреса<Обʼєкт>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_модуля_отримати_частку_ділення(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_неповна_частка);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_неповна_частка, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>(М);
    покласти_в_накопичувач<адреса<Обʼєкт>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_модуля_піднести_до_степеня(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_степінь);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_степінь, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>(М);
    покласти_в_накопичувач<адреса<Обʼєкт>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_модуля_зсунути_вліво(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_вліво);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_вліво, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>(М);
    покласти_в_накопичувач<адреса<Обʼєкт>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_модуля_зсунути_вправо(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_вправо);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_вправо, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>(М);
    покласти_в_накопичувач<адреса<Обʼєкт>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_модуля_зсунути_вправо_зі_заповненням(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_вправо_зі_заповненням);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_вправо_зі_заповненням, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>(М);
    покласти_в_накопичувач<адреса<Обʼєкт>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_модуля_двійкове_і(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_двійкове_і);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_двійкове_і, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>(М);
    покласти_в_накопичувач<адреса<Обʼєкт>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_модуля_двійкове_або(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_двійкове_або);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_двійкове_і, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>(М);
    покласти_в_накопичувач<адреса<Обʼєкт>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_модуля_двійкове_виключне_або(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_двійкове_виключне_або);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_двійкове_виключне_або, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>(М);
    покласти_в_накопичувач<адреса<Обʼєкт>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_модуля_двійкове_не(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_двійкове_не);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_двійкове_не, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, пусто, пусто);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_модуля_більше(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_більше);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_більше, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>(М);
    покласти_в_накопичувач<адреса<Обʼєкт>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_модуля_менше(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_менше);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_менше, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>(М);
    покласти_в_накопичувач<адреса<Обʼєкт>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_модуля_рівно(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо перевірити_чи_обʼєкт_модуля_рівно(обʼєкт_модуля, М, аргумент) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_містить(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_містить);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_містить, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>(М);
    покласти_в_накопичувач<адреса<Обʼєкт>>(М, аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(М, аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_модуля_є(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_Структура {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо перевірити_чи_обʼєкт_модуля_є(обʼєкт_модуля, М, аргумент як адреса<ОбʼєктСтруктури>) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_відʼємне(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_відʼємне);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_відʼємне, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, пусто, пусто);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_модуля_числове(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_число);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_число, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, пусто, пусто);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_модуля_заперечити(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_модуля_збільшити(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_збільшити);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_збільшити, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, пусто, пусто);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_модуля_зменшити(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = обʼєкт_модуля_отримати_властивість(обʼєкт_модуля, М, М.БН.С.чародія_зменшити);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_зменшити, обʼєкт_модуля як адреса<Обʼєкт>);
    }
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт_модуля як адреса<Обʼєкт>, пусто, пусто);
    вернути результат_виконання;
  }

  місцева дія перевірити_чи_обʼєкт_модуля_рівно(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне {
    ціль обʼєкт = обʼєкт_модуля як адреса<Обʼєкт>;
    якщо обʼєкт == аргумент {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_обʼєкт_модуля_є(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне {
    якщо обʼєкт_структури == М.обʼєкт_структури_Модуль {
      вернути так;
    }
    вернути ні;
  }

  місцева дія надрукувати_обʼєкт_модуля_в_накопичувач_ю8(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    покласти_в_накопичувач_ю8(М, накопичувач_ю8, ю8"<модуль>");
  }
}