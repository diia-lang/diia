////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  дія нативна_дія_списку_додати(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): адреса<Обʼєкт> {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт пусто не може виконати дію списку \"додати\"") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_список {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт не є списком") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_списку = обʼєкт_я як адреса<ОбʼєктСписку>;
    якщо іменовані_аргументи != пусто {
      ціль елемент_аргумента_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_аргумента_значення != пусто {
        покласти_в_накопичувач<адреса<Обʼєкт>>(обʼєкт_списку.елементи::адреса, елемент_аргумента_значення.значення);
        вернути пусто;
      }
    }
    якщо аргументи != пусто {
      якщо аргументи.розмір > 0 {
        ціль аргумент = аргументи.дані[0];
        покласти_в_накопичувач<адреса<Обʼєкт>>(обʼєкт_списку.елементи::адреса, аргумент);
        вернути пусто;
      }
    }
    покласти_в_накопичувач<адреса<Обʼєкт>>(обʼєкт_списку.елементи::адреса, пусто);
    вернути пусто;
  }

  дія нативна_дія_списку_забрати(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): адреса<Обʼєкт> {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт пусто не може виконати дію списку \"забрати\"") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_список {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт не є списком") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_списку = обʼєкт_я як адреса<ОбʼєктСписку>;
    якщо обʼєкт_списку.елементи.розмір != 0 {
      обʼєкт_списку.елементи.розмір = обʼєкт_списку.елементи.розмір - 1;
    }
    вернути пусто;
  }

  дія нативна_дія_списку_фільтр(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): адреса<Обʼєкт> {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт пусто не може виконати дію списку \"фільтр\"") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_список {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт не є списком") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_списку = обʼєкт_я як адреса<ОбʼєктСписку>;
    якщо іменовані_аргументи != пусто {
      ціль елемент_аргумента_д = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.д);
      якщо елемент_аргумента_д != пусто {
        ціль тимч_середовище = покласти_тимчасове_середовище(М);
        ціль д = елемент_аргумента_д.значення;
        ціль новий_список = виділити_обʼєкт_списку(М, 0);
        змінити_в_середовищі(М, тимч_середовище, М.БН.С.д, д);
        змінити_в_середовищі(М, тимч_середовище, М.БН.С.новий_список, новий_список як адреса<Обʼєкт>);
        змінна ціль позиція: позитивне = 0;
        поки позиція < обʼєкт_списку.елементи.розмір {
          ціль елемент = обʼєкт_списку.елементи.дані[позиція];
          ціль аргументи = виділити_накопичувач<адреса<Обʼєкт>>();
          покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи, елемент);
          ціль результат_д = обʼєкт_виконати(д, М, пусто, аргументи, пусто);
          звільнити_накопичувач<адреса<Обʼєкт>>(аргументи);
          якщо М.стан_падіння {
            забрати_тимчасове_середовище(М);
            вернути результат_д;
          }
          якщо перевірити_чи_обʼєкт_виражається_логічним_так(результат_д, М) {
            покласти_в_накопичувач<адреса<Обʼєкт>>(новий_список.елементи::адреса, елемент);
          }
          позиція += 1;
        }
        забрати_тимчасове_середовище(М);
        вернути новий_список як адреса<Обʼєкт>;
      }
    }
    якщо аргументи != пусто {
      якщо аргументи.розмір > 0 {
        ціль тимч_середовище = покласти_тимчасове_середовище(М);
        ціль д = аргументи.дані[0];
        ціль новий_список = виділити_обʼєкт_списку(М, 0);
        змінити_в_середовищі(М, тимч_середовище, М.БН.С.д, д);
        змінити_в_середовищі(М, тимч_середовище, М.БН.С.новий_список, новий_список як адреса<Обʼєкт>);
        змінна ціль позиція: позитивне = 0;
        поки позиція < обʼєкт_списку.елементи.розмір {
          ціль елемент = обʼєкт_списку.елементи.дані[позиція];
          ціль аргументи = виділити_накопичувач<адреса<Обʼєкт>>();
          покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи, елемент);
          ціль результат_д = обʼєкт_виконати(д, М, пусто, аргументи, пусто);
          звільнити_накопичувач<адреса<Обʼєкт>>(аргументи);
          якщо М.стан_падіння {
            забрати_тимчасове_середовище(М);
            вернути результат_д;
          }
          якщо перевірити_чи_обʼєкт_виражається_логічним_так(результат_д, М) {
            покласти_в_накопичувач<адреса<Обʼєкт>>(новий_список.елементи::адреса, елемент);
          }
          позиція += 1;
        }
        забрати_тимчасове_середовище(М);
        вернути новий_список як адреса<Обʼєкт>;
      }
    }
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Недостатньо аргументів для виконання дії \"фільтр\"") як адреса<Обʼєкт>;
  }

  місцева дія створити_структуру_списку(М: адреса<Машина>): адреса<ОбʼєктСтруктури> {
    ціль обʼєкт_структури = виділити_обʼєкт_структури(М, М.БН.С.список, М.обʼєкт_структури_обʼєкт);

    ціль обʼєкт_нативної_дії_додати = виділити_обʼєкт_нативної_дії(М, М.БН.С.додати, нативна_дія_списку_додати, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.додати, обʼєкт_нативної_дії_додати як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_забрати = виділити_обʼєкт_нативної_дії(М, М.БН.С.забрати, нативна_дія_списку_забрати, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.забрати, обʼєкт_нативної_дії_забрати як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_фільтр = виділити_обʼєкт_нативної_дії(М, М.БН.С.фільтр, нативна_дія_списку_фільтр, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.фільтр, обʼєкт_нативної_дії_фільтр як адреса<Обʼєкт>);

    вернути обʼєкт_структури;
  }

  місцева дія виділити_обʼєкт_списку(М: адреса<Машина>, розмір: п32): адреса<ОбʼєктСписку> {
    ціль обʼєкт_списку = виділити_обʼєкт<ОбʼєктСписку>(М, М.обʼєкт_структури_список);

    обʼєкт_списку.властивості = зробити_реєстр<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні);
    обʼєкт_списку.елементи = зробити_накопичувач<адреса<Обʼєкт>>();

    вернути обʼєкт_списку;
  }

  місцева дія звільнити_обʼєкт_списку(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>) {
    звільнити(обʼєкт_списку);
  }

  місцева дія обʼєкт_списку_виконати(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати список") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_отримати_властивість(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    якщо назва == М.БН.С.довжина {
      вернути виділити_обʼєкт_числа(М, д64(обʼєкт_списку.елементи.розмір)) як адреса<Обʼєкт>;
    }
    ціль елемент_реєстру = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_списку.властивості::адреса, назва);
    якщо елемент_реєстру != пусто {
      вернути елемент_реєстру.значення;
    }
    змінна ціль тип = обʼєкт_списку.тип;
    поки тип != пусто {
      ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(тип.методи::адреса, назва);
      якщо елемент_реєстру_методів != пусто {
        вернути елемент_реєстру_методів.значення;
      }
      тип = тип.предок;
    }
    вернути пусто;
  }

  місцева дія обʼєкт_списку_змінити_властивість(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо назва == М.БН.С.довжина {
      вернути пусто;
    }
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_списку.властивості::адреса, назва, аргумент);
    вернути пусто;
  }

  місцева дія обʼєкт_списку_виконати_властивість(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_властивості = обʼєкт_списку_отримати_властивість(обʼєкт_списку, М, назва_властивості);
    якщо М.стан_падіння {
      вернути обʼєкт_властивості;
    }
    вернути обʼєкт_виконати(обʼєкт_властивості, М, обʼєкт_списку як адреса<Обʼєкт>, аргументи, іменовані_аргументи);
  }

  місцева дія обʼєкт_списку_отримати_елемент(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо ключ == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Ключ отримання елемента зі списку має бути числом") як адреса<Обʼєкт>;
    }
    якщо ключ.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Ключ отримання елемента зі списку має бути числом") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = ключ як адреса<ОбʼєктЧисла>;
    ціль позиція = позитивне(обʼєкт_числа.значення);
    якщо обʼєкт_списку.елементи.розмір > позиція {
      вернути обʼєкт_списку.елементи.дані[позиція];
    }
    вернути пусто;
  }

  місцева дія обʼєкт_списку_змінити_елемент(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо ключ == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Ключ для зміни елемента списку має бути числом") як адреса<Обʼєкт>;
    }
    якщо ключ.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Ключ для зміни елемента списку має бути числом") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа_ключа = ключ як адреса<ОбʼєктЧисла>;
    ціль позиція = позитивне(обʼєкт_числа_ключа.значення);
    якщо обʼєкт_списку.елементи.розмір > позиція {
      обʼєкт_списку.елементи.дані[позиція] = значення;
    } інакше {
      розширити_накопичувач<адреса<Обʼєкт>>(обʼєкт_списку.елементи::адреса, позиція + 1, пусто);
      обʼєкт_списку.елементи.дані[позиція] = значення;
    }
    вернути пусто;
  }

  місцева дія обʼєкт_списку_отримати_перебір(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    // потім: втілити
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати перебір зі списку") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_додати(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати додавання для списку") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_відняти(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати віднімання для списку") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_помножити(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати множення для списку") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_поділити(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати ділення для списку") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_отримати_остачу_ділення(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати отримання остачі ділення для списку") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_отримати_частку_ділення(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати отримання частки ділення для списку") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_піднести_до_степеня(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати піднесення до степеня для списку") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_зсунути_вліво(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вліво для списку") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_зсунути_вправо(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо для списку") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_зсунути_вправо_зі_заповненням(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо зі заповненням для списку") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_двійкове_і(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове І для списку") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_двійкове_або(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове АБО для списку") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_двійкове_виключне_або(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове виключне АБО для списку") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_двійкове_не(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове НЕ для списку") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_більше(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на більшість для списку") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_менше(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на меншість для списку") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_рівно(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо перевірити_чи_обʼєкт_списку_рівно(обʼєкт_списку, М, аргумент) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_містить(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    змінна ціль п: позитивне = 0;
    поки п < обʼєкт_списку.елементи.розмір {
      якщо перевірити_чи_обʼєкт_рівно(обʼєкт_списку.елементи.дані[п], М, аргумент) {
        вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
      }
      п += 1;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_є(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_Структура {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо перевірити_чи_обʼєкт_списку_є(обʼєкт_списку, М, аргумент як адреса<ОбʼєктСтруктури>) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_відʼємне(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати відʼємне для списку") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_додатнє(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати додатнє для списку") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_заперечити(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія перевірити_чи_обʼєкт_списку_рівно(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне {
    ціль обʼєкт = обʼєкт_списку як адреса<Обʼєкт>;
    якщо обʼєкт == аргумент {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_обʼєкт_списку_є(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне {
    якщо обʼєкт_структури == М.обʼєкт_структури_список {
      вернути так;
    }
    вернути ні;
  }

  місцева дія надрукувати_обʼєкт_списку_в_накопичувач_ю8(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"[");
    змінна ціль п: позитивне = 0;
    поки п < обʼєкт_списку.елементи.розмір {
      якщо п > 0 {
        покласти_в_накопичувач_ю8(накопичувач_ю8, ю8", ");
      }
      ціль елемент = обʼєкт_списку.елементи.дані[п];
      надрукувати_обʼєкт_в_накопичувач_ю8(елемент, М, накопичувач_ю8, глибина + 1);
      п += 1;
    }
    покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"]");
  }
}