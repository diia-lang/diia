////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  місцева дія надрукувати_обʼєкт_списку_в_накопичувач_ю8(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"[");
    змінна ціль п: позитивне = 0;
    поки п < обʼєкт_списку.елементи.розмір {
      якщо п > 0 {
        покласти_в_накопичувач_ю8(накопичувач_ю8, ю8", ");
      }
      ціль елемент = обʼєкт_списку.елементи.дані[п];
      надрукувати_обʼєкт_в_накопичувач_ю8(елемент, М, накопичувач_ю8, глибина + 1);
      п += 1;
    }
    покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"]");
  }

  дія нативна_дія_списку_додати(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): адреса<Обʼєкт> {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт пусто не може виконати дію списку \"додати\"") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_список {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт не є списком") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_списку = обʼєкт_я як адреса<ОбʼєктСписку>;
    якщо іменовані_аргументи != пусто {
      ціль елемент_аргумента_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_аргумента_значення != пусто {
        покласти_в_накопичувач<адреса<Обʼєкт>>(обʼєкт_списку.елементи::адреса, елемент_аргумента_значення.значення);
        вернути пусто;
      }
    }
    якщо аргументи != пусто {
      якщо аргументи.розмір > 0 {
        ціль аргумент = аргументи.дані[0];
        покласти_в_накопичувач<адреса<Обʼєкт>>(обʼєкт_списку.елементи::адреса, аргумент);
      }
    }
    вернути пусто; // може помилку?
  }

  дія нативна_дія_списку_забрати(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): адреса<Обʼєкт> {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт пусто не може виконати дію списку \"забрати\"") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_список {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт не є списком") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_списку = обʼєкт_я як адреса<ОбʼєктСписку>;
    якщо обʼєкт_списку.елементи.розмір != 0 {
      обʼєкт_списку.елементи.розмір = обʼєкт_списку.елементи.розмір - 1;
    }
    вернути пусто;
  }

  дія нативна_дія_списку_чародія_отримати_елемент(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): адреса<Обʼєкт> {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт пусто не може виконати дію списку \"чародія_отримати_елемент\"") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_список {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт не є списком") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_списку = обʼєкт_я як адреса<ОбʼєктСписку>;
    змінна ціль ключ_знайдено = ні;
    змінна ціль ключ: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_аргумента_ключа = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.ключ);
      якщо елемент_аргумента_ключа == пусто {
        ключ_знайдено = так;
        ключ = елемент_аргумента_ключа.значення;
      }
    }
    якщо аргументи != пусто {
      якщо аргументи.розмір > 0 {
        якщо ключ_знайдено == ні {
          ключ_знайдено = так;
          ключ = аргументи.дані[0];
        }
      }
    }
    якщо ключ_знайдено == ні {
      вернути пусто; // помилка
    }
    якщо ключ == пусто {
      вернути пусто; // помилка
    }
    якщо ключ.тип != М.обʼєкт_структури_число {
      вернути пусто; // помилка
    }
    ціль обʼєкт_числа = ключ як адреса<ОбʼєктЧисла>;
    ціль позиція = позитивне(обʼєкт_числа.значення);
    якщо обʼєкт_списку.елементи.розмір > позиція {
      вернути обʼєкт_списку.елементи.дані[позиція];
    }
    вернути пусто; // може помилку?
  }

  дія нативна_дія_списку_чародія_змінити_елемент(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): адреса<Обʼєкт> {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт пусто не може виконати дію списку \"чародія_змінити_елемент\"") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_список {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт не є списком") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_списку = обʼєкт_я як адреса<ОбʼєктСписку>;
    змінна ціль ключ_знайдено = ні;
    змінна ціль ключ: адреса<Обʼєкт> = пусто;
    змінна ціль значення_знайдено = ні;
    змінна ціль значення: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_аргумента_ключа = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.ключ);
      якщо елемент_аргумента_ключа == пусто {
        ключ_знайдено = так;
        ключ = елемент_аргумента_ключа.значення;
      }
      ціль елемент_аргумента_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_аргумента_значення == пусто {
        значення_знайдено = так;
        значення = елемент_аргумента_значення.значення;
      }
    }
    якщо аргументи != пусто {
      якщо аргументи.розмір > 0 {
        якщо ключ_знайдено == ні {
          ключ_знайдено = так;
          ключ = аргументи.дані[0];
        }
      }
      якщо аргументи.розмір > 1 {
        якщо значення_знайдено == ні {
          значення_знайдено = так;
          значення = аргументи.дані[1];
        }
      }
    }
    якщо ключ == пусто {
      вернути пусто; // помилка
    }
    якщо ключ.тип != М.обʼєкт_структури_число {
      вернути пусто; // помилка
    }
    ціль обʼєкт_числа_ключа = ключ як адреса<ОбʼєктЧисла>;
    ціль позиція = позитивне(обʼєкт_числа_ключа.значення);
    якщо обʼєкт_списку.елементи.розмір > позиція {
      обʼєкт_списку.елементи.дані[позиція] = значення;
    } інакше {
      розширити_накопичувач<адреса<Обʼєкт>>(обʼєкт_списку.елементи::адреса, позиція + 1, пусто);
      обʼєкт_списку.елементи.дані[позиція] = значення;
    }
    вернути пусто;
  }

  місцева дія створити_структуру_списку(М: адреса<Машина>): адреса<ОбʼєктСтруктури> {
    ціль обʼєкт_структури = виділити_обʼєкт_структури(М, М.БН.С.список, М.обʼєкт_структури_обʼєкт);

    ціль обʼєкт_нативної_дії_додати = виділити_обʼєкт_нативної_дії(М, М.БН.С.додати, нативна_дія_списку_додати, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.додати, обʼєкт_нативної_дії_додати як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_забрати = виділити_обʼєкт_нативної_дії(М, М.БН.С.забрати, нативна_дія_списку_забрати, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.забрати, обʼєкт_нативної_дії_забрати як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_чародія_отримати_елемент = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_отримати_елемент, нативна_дія_списку_чародія_отримати_елемент, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_отримати_елемент, обʼєкт_нативної_дії_чародія_отримати_елемент як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_чародія_змінити_елемент = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_змінити_елемент, нативна_дія_списку_чародія_змінити_елемент, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_змінити_елемент, обʼєкт_нативної_дії_чародія_змінити_елемент як адреса<Обʼєкт>);

    вернути обʼєкт_структури;
  }

  місцева дія виділити_обʼєкт_списку(М: адреса<Машина>, розмір: п32): адреса<ОбʼєктСписку> {
    ціль обʼєкт_списку = виділити_обʼєкт<ОбʼєктСписку>(М, М.обʼєкт_структури_список);

    обʼєкт_списку.властивості = зробити_реєстр<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні);
    обʼєкт_списку.елементи = зробити_накопичувач<адреса<Обʼєкт>>();

    вернути обʼєкт_списку;
  }

  місцева дія звільнити_обʼєкт_списку(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>) {
    звільнити(обʼєкт_списку);
  }

  місцева дія обʼєкт_списку_додати(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто; // потім: помилка
  }

  місцева дія обʼєкт_списку_відняти(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто; // потім: помилка
  }

  місцева дія обʼєкт_списку_помножити(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто; // потім: помилка
  }

  місцева дія обʼєкт_списку_поділити(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто; // потім: помилка
  }

  місцева дія обʼєкт_списку_отримати_остачу_ділення(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто; // потім: помилка
  }

  місцева дія обʼєкт_списку_отримати_частку_ділення(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто; // потім: помилка
  }

  місцева дія обʼєкт_списку_піднести_до_степеня(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто; // потім: помилка
  }

  місцева дія обʼєкт_списку_зсунути_вліво(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто; // потім: помилка
  }

  місцева дія обʼєкт_списку_зсунути_вправо(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто; // потім: помилка
  }

  місцева дія обʼєкт_списку_зсунути_вправо_зі_заповненням(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто; // потім: помилка
  }

  місцева дія обʼєкт_списку_двійкове_і(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто; // потім: помилка
  }

  місцева дія обʼєкт_списку_двійкове_або(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто; // потім: помилка
  }

  місцева дія обʼєкт_списку_двійкове_виключне_або(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто; // потім: помилка
  }

  місцева дія обʼєкт_списку_двійкове_не(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
  }

  місцева дія обʼєкт_списку_більше(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто; // потім: помилка
  }

  місцева дія обʼєкт_списку_менше(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто; // потім: помилка
  }

  місцева дія обʼєкт_списку_рівно(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто; // потім: помилка
  }

  місцева дія обʼєкт_списку_містить(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    змінна ціль п: позитивне = 0;
    поки п < обʼєкт_списку.елементи.розмір {
      якщо перевірити_чи_обʼєкт_рівно(обʼєкт_списку.елементи.дані[п], М, аргумент) {
        вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
      }
      п += 1;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_списку_є(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто; // потім: помилка
  }

  місцева дія обʼєкт_списку_відʼємне(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
  }

  місцева дія обʼєкт_списку_додатнє(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
  }

  місцева дія обʼєкт_списку_заперечити(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
  }
}