////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  місцева дія виділити_місцезнаходження_помилки(шлях_до_файлу: Ю8, рядок: п32, стовпець: п32): адреса<МісцезнаходженняПомилки> {
    ціль місцезнаходження_помилки = виділити<МісцезнаходженняПомилки>();
    місцезнаходження_помилки.шлях_до_файлу = виділити_копію_ю8(шлях_до_файлу);
    місцезнаходження_помилки.рядок = рядок;
    місцезнаходження_помилки.стовпець = стовпець;
    вернути місцезнаходження_помилки;
  }

  місцева дія виділити_місцезнаходження_помилки_з_вказівки_або_пусто(М: адреса<Машина>, код: адреса<Код>, позиція_вказівки: п32): адреса<МісцезнаходженняПомилки> {
    ціль місцезнаходження_вказівки = знайти_місцезнаходження_вказівки(код, позиція_вказівки);
    якщо місцезнаходження_вказівки != пусто {
      вернути виділити_місцезнаходження_помилки(код.шлях_до_файлу, місцезнаходження_вказівки.рядок, місцезнаходження_вказівки.стовпець);
    }
    вернути пусто;
  }

  місцева дія виділити_обʼєкт_тексту_помилки_чародію_не_знайдено(М: адреса<Машина>, назва_чародії: Ю8, обʼєкт: адреса<Обʼєкт>): адреса<Обʼєкт> {
    ціль буфер_ю8 = зробити_буфер_ю8();
    додати_до_буфера_ю8(буфер_ю8::адреса, ю8"Дію \"");
    додати_до_буфера_ю8(буфер_ю8::адреса, назва_чародії);
    додати_до_буфера_ю8(буфер_ю8::адреса, ю8"\" не втілено для обʼєкта структури \"");
    якщо обʼєкт == пусто {
      додати_до_буфера_ю8(буфер_ю8::адреса, ю8"пусто");
    } інакше {
      якщо обʼєкт.тип != пусто {
        додати_до_буфера_ю8(буфер_ю8::адреса, обʼєкт.тип.назва.значення);
      }
    }
    додати_до_буфера_ю8(буфер_ю8::адреса, ю8"\"");
    ціль ю8 = виділити_ю8_з_буфера(буфер_ю8::адреса);
    звільнити_значення_буфера_ю8(буфер_ю8);
    ціль обʼєкт_тексу = створити_текст_з_ю8(М, ю8);
    звільнити(ю8);
    вернути обʼєкт_тексу як адреса<Обʼєкт>;
  }

  місцева дія виділити_обʼєкт_тексту_помилки_пропущено_аргумент(М: адреса<Машина>, назва: Ю8): адреса<Обʼєкт> {
    ціль буфер_ю8 = зробити_буфер_ю8();
    додати_до_буфера_ю8(буфер_ю8::адреса, ю8"Пропущено аргумент \"");
    додати_до_буфера_ю8(буфер_ю8::адреса, назва);
    додати_до_буфера_ю8(буфер_ю8::адреса, ю8"\"");
    ціль ю8 = виділити_ю8_з_буфера(буфер_ю8::адреса);
    звільнити_значення_буфера_ю8(буфер_ю8);
    ціль обʼєкт_тексу = створити_текст_з_ю8(М, ю8);
    звільнити(ю8);
    вернути обʼєкт_тексу як адреса<Обʼєкт>;
  }

  місцева дія виділити_обʼєкт_тексту_помилки_невірний_тип_аргумента(М: адреса<Машина>, назва: Ю8, очікується: Накопичувач<адреса<ОбʼєктСтруктури>>, отримано: адреса<ОбʼєктСтруктури>): адреса<Обʼєкт> {
    ціль буфер_ю8 = зробити_буфер_ю8();
    додати_до_буфера_ю8(буфер_ю8::адреса, ю8"Невірний тип аргумента \"");
    додати_до_буфера_ю8(буфер_ю8::адреса, назва);
    додати_до_буфера_ю8(буфер_ю8::адреса, ю8"\"");
    додати_до_буфера_ю8(буфер_ю8::адреса, ю8": очікується ");
    змінна ціль пп: позитивне = 0;
    поки пп < очікується.розмір {
      ціль тип = очікується.дані[пп];
      якщо тип == пусто {
        додати_до_буфера_ю8(буфер_ю8::адреса, ю8"\"пусто\"");
      } інакше {
        якщо тип.назва == пусто {
          додати_до_буфера_ю8(буфер_ю8::адреса, ю8"<структура без назви>");
        } інакше {
          додати_до_буфера_ю8(буфер_ю8::адреса, ю8"\"");
          додати_до_буфера_ю8(буфер_ю8::адреса, тип.назва.значення);
          додати_до_буфера_ю8(буфер_ю8::адреса, ю8"\"");
        }
      }
      якщо пп < очікується.розмір - 1 {
        додати_до_буфера_ю8(буфер_ю8::адреса, ю8" або ");
      }
      пп += 1;
    }
    додати_до_буфера_ю8(буфер_ю8::адреса, ю8", отримано ");
    якщо отримано == пусто {
      додати_до_буфера_ю8(буфер_ю8::адреса, ю8"\"пусто\"");
    } інакше {
      якщо отримано.назва == пусто {
        додати_до_буфера_ю8(буфер_ю8::адреса, ю8"<структура без назви>");
      } інакше {
        додати_до_буфера_ю8(буфер_ю8::адреса, ю8"\"");
        додати_до_буфера_ю8(буфер_ю8::адреса, отримано.назва.значення);
        додати_до_буфера_ю8(буфер_ю8::адреса, ю8"\"");
      }
    }
    ціль ю8 = виділити_ю8_з_буфера(буфер_ю8::адреса);
    звільнити_значення_буфера_ю8(буфер_ю8);
    ціль обʼєкт_тексу = створити_текст_з_ю8(М, ю8);
    звільнити(ю8);
    вернути обʼєкт_тексу як адреса<Обʼєкт>;
  }
}