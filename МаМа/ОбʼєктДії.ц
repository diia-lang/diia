////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  місцева дія надрукувати_обʼєкт_дії_в_накопичувач_ю8(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"<дія");
    якщо обʼєкт_дії.назва != пусто {
      покласти_в_накопичувач_ю8(накопичувач_ю8, ю8" ");
      ціль назва = отримати_ю8_з_назви(обʼєкт_дії.назва);
      покласти_в_накопичувач_ю8(накопичувач_ю8, назва);
      звільнити(назва);
    }
    покласти_в_накопичувач_ю8(накопичувач_ю8, ю8">");
  }

  місцева дія виділити_обʼєкт_дії(М: адреса<Машина>, назва: адреса<Назва>, параметри: адреса<Реєстр<адреса<Назва>, Параметр>>, середовище_створення: адреса<Середовище>, код: адреса<Код>, типи_результату: Накопичувач<адреса<ОбʼєктСтруктури>>): адреса<ОбʼєктДії> {
    ціль обʼєкт_дії = виділити_обʼєкт<ОбʼєктДії>(М, М.обʼєкт_структури_Дія);

    обʼєкт_дії.властивості = зробити_реєстр<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні);
    обʼєкт_дії.назва = назва;
    обʼєкт_дії.параметри = параметри;
    обʼєкт_дії.середовище_створення = середовище_створення;
    обʼєкт_дії.код = код;
    обʼєкт_дії.типи_результату = типи_результату;

    вернути обʼєкт_дії;
  }

  місцева дія обʼєкт_дії_виконати(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль середовище_виконання_дії = виділити_середовище(М, обʼєкт_дії.середовище_створення);
    покласти_в_накопичувач<ЕлементІсторіїВиконання>(М.історія::адреса, ЕлементІсторіїВиконання {
      обʼєкт_дії = обʼєкт_дії,
      середовище = середовище_виконання_дії,
    });
    змінна ціль пп: позитивне = 0;
    поки пп < обʼєкт_дії.параметри.розмір {
      ціль елемент_параметра = обʼєкт_дії.параметри.елементи[пп];
      змінна ціль аргумент: адреса<Обʼєкт> = пусто;
      // потім: перевірити чи аргументи не пусто
      якщо аргументи.розмір > пп {
        аргумент = аргументи.дані[пп];
      } інакше {
        якщо іменовані_аргументи == пусто {
          якщо елемент_параметра.значення.код_значення_за_замовчуванням != пусто {
            ціль результат_виконання_значення_за_замовчуванням = виконати_код_в_середовищі(М, середовище_виконання_дії, елемент_параметра.значення.код_значення_за_замовчуванням);
            якщо М.стан_падіння {
              вернути результат_виконання_значення_за_замовчуванням;
            }
            ціль значення_за_замовчуванням = забрати_з_накопичувача<адреса<Обʼєкт>>(М.НаО::адреса);
            аргумент = значення_за_замовчуванням;
          }
        } інакше {
          ціль елемент_аргумента_з_назвою = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, елемент_параметра.ключ);
          якщо елемент_аргумента_з_назвою == пусто {
            якщо елемент_параметра.значення.код_значення_за_замовчуванням != пусто {
              ціль результат_виконання_значення_за_замовчуванням = виконати_код_в_середовищі(М, середовище_виконання_дії, елемент_параметра.значення.код_значення_за_замовчуванням);
              якщо М.стан_падіння {
                вернути результат_виконання_значення_за_замовчуванням;
              }
              ціль значення_за_замовчуванням = забрати_з_накопичувача<адреса<Обʼєкт>>(М.НаО::адреса);
              аргумент = значення_за_замовчуванням;
            }
          } інакше {
            аргумент = елемент_аргумента_з_назвою.значення;
          }
        }
      }
      якщо елемент_параметра.значення.типи.розмір > 0 {
        змінна ціль пп: позитивне = 0;
        змінна ціль знайдено_тип: логічне = ні;
        поки пп < елемент_параметра.значення.типи.розмір {
          якщо обʼєкт_є_прямо(аргумент, М, елемент_параметра.значення.типи.дані[пп]) {
            знайдено_тип = так;
          }
          пп += 1;
        }
        якщо знайдено_тип == ні {
          увімкнути_стан_падіння(М, пусто);
          якщо аргумент == пусто {
            вернути виділити_обʼєкт_тексту_помилки_невірний_тип_аргумента(М, елемент_параметра.ключ.значення, елемент_параметра.значення.типи, пусто);
          } інакше {
            вернути виділити_обʼєкт_тексту_помилки_невірний_тип_аргумента(М, елемент_параметра.ключ.значення, елемент_параметра.значення.типи, аргумент.тип);
          }
        }
      }
      змінити_в_середовищі(М, середовище_виконання_дії, елемент_параметра.ключ, аргумент);
      пп += 1;
    }
    ціль результат_виконання = виконати_код_в_середовищі(М, середовище_виконання_дії, обʼєкт_дії.код);
    якщо М.стан_падіння {
      вернути результат_виконання;
    }
    забрати_з_накопичувача<ЕлементІсторіїВиконання>(М.історія::адреса);
    вернути результат_виконання;
  }

  місцева дія звільнити_обʼєкт_дії(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>) {
    звільнити_значення_реєстру<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_дії.властивості);
    звільнити_реєстр<адреса<Назва>, Параметр>(обʼєкт_дії.параметри);
    звільнити(обʼєкт_дії);
  }
}