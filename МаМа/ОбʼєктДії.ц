////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  місцева дія надрукувати_обʼєкт_дії_в_накопичувач_ю8(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"<дія");
    якщо обʼєкт_дії.назва != пусто {
      покласти_в_накопичувач_ю8(накопичувач_ю8, ю8" ");
      ціль назва_ю8: Ю8 = пусто;
      якщо виділити_ю8_з_назви(М, обʼєкт_дії.назва, назва_ю8::адреса) == ні {
        // потім: помилка
      }
      покласти_в_накопичувач_ю8(накопичувач_ю8, назва_ю8);
      звільнити(назва_ю8);
    }
    покласти_в_накопичувач_ю8(накопичувач_ю8, ю8">");
  }

  місцева дія виділити_обʼєкт_дії(М: адреса<Машина>, назва: адреса<Назва>, параметри: адреса<Реєстр<адреса<Назва>, Параметр>>, середовище_створення: адреса<Середовище>, код: адреса<Код>, типи_результату: Накопичувач<адреса<ОбʼєктСтруктури>>): адреса<ОбʼєктДії> {
    ціль обʼєкт_дії = виділити_обʼєкт<ОбʼєктДії>(М, М.обʼєкт_структури_Дія);

    обʼєкт_дії.властивості = зробити_реєстр<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні);
    обʼєкт_дії.назва = назва;
    обʼєкт_дії.параметри = параметри;
    обʼєкт_дії.середовище_створення = середовище_створення;
    обʼєкт_дії.код = код;
    обʼєкт_дії.типи_результату = типи_результату;

    вернути обʼєкт_дії;
  }

  місцева дія звільнити_обʼєкт_дії(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>) {
    звільнити_значення_реєстру<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_дії.властивості);
    звільнити_реєстр<адреса<Назва>, Параметр>(обʼєкт_дії.параметри);
    звільнити(обʼєкт_дії);
  }

  місцева дія обʼєкт_дії_виконати(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль середовище_виконання_дії = виділити_середовище(М, обʼєкт_дії.середовище_створення);
    середовище_виконання_дії.обʼєкт_я = обʼєкт_я;
    покласти_в_накопичувач<ЕлементІсторіїВиконання>(М.історія::адреса, ЕлементІсторіїВиконання {
      обʼєкт_дії = обʼєкт_дії,
      середовище = середовище_виконання_дії,
    });
    змінна ціль пп: позитивне = 0;
    поки пп < обʼєкт_дії.параметри.розмір {
      ціль елемент_параметра = обʼєкт_дії.параметри.елементи[пп];
      змінна ціль аргумент: адреса<Обʼєкт> = пусто;
      // потім: перевірити чи аргументи не пусто
      якщо аргументи.розмір > пп {
        аргумент = аргументи.дані[пп];
      } інакше {
        якщо іменовані_аргументи == пусто {
          якщо елемент_параметра.значення.код_значення_за_замовчуванням != пусто {
            ціль результат_виконання_значення_за_замовчуванням = виконати_код_в_середовищі(М, середовище_виконання_дії, елемент_параметра.значення.код_значення_за_замовчуванням);
            якщо М.стан_падіння {
              вернути результат_виконання_значення_за_замовчуванням;
            }
            ціль значення_за_замовчуванням = забрати_з_накопичувача<адреса<Обʼєкт>>(М.НаО::адреса);
            аргумент = значення_за_замовчуванням;
          }
        } інакше {
          ціль елемент_аргумента_з_назвою = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, елемент_параметра.ключ);
          якщо елемент_аргумента_з_назвою == пусто {
            якщо елемент_параметра.значення.код_значення_за_замовчуванням != пусто {
              ціль результат_виконання_значення_за_замовчуванням = виконати_код_в_середовищі(М, середовище_виконання_дії, елемент_параметра.значення.код_значення_за_замовчуванням);
              якщо М.стан_падіння {
                вернути результат_виконання_значення_за_замовчуванням;
              }
              ціль значення_за_замовчуванням = забрати_з_накопичувача<адреса<Обʼєкт>>(М.НаО::адреса);
              аргумент = значення_за_замовчуванням;
            }
          } інакше {
            аргумент = елемент_аргумента_з_назвою.значення;
          }
        }
      }
      якщо елемент_параметра.значення.типи.розмір > 0 {
        змінна ціль пп: позитивне = 0;
        змінна ціль знайдено_тип: логічне = ні;
        поки пп < елемент_параметра.значення.типи.розмір {
          якщо перевірити_чи_обʼєкт_є(аргумент, М, елемент_параметра.значення.типи.дані[пп]) {
            знайдено_тип = так;
          }
          пп += 1;
        }
        якщо знайдено_тип == ні {
          увімкнути_стан_падіння(М, пусто);
          якщо аргумент == пусто {
            вернути виділити_обʼєкт_тексту_помилки_невірний_тип_аргумента(М, елемент_параметра.ключ.значення, елемент_параметра.значення.типи, пусто);
          } інакше {
            вернути виділити_обʼєкт_тексту_помилки_невірний_тип_аргумента(М, елемент_параметра.ключ.значення, елемент_параметра.значення.типи, аргумент.тип);
          }
        }
      }
      змінити_в_середовищі(М, середовище_виконання_дії, елемент_параметра.ключ, аргумент);
      пп += 1;
    }
    ціль результат_виконання = виконати_код_в_середовищі(М, середовище_виконання_дії, обʼєкт_дії.код);
    якщо М.стан_падіння {
      вернути результат_виконання;
    }
    забрати_з_накопичувача<ЕлементІсторіїВиконання>(М.історія::адреса);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_дії_отримати_властивість(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    якщо назва == М.БН.С.назва {
      якщо обʼєкт_дії.назва == пусто {
        вернути пусто;
      }
      вернути виділити_обʼєкт_з_назви(М, обʼєкт_дії.назва);
    }
    ціль елемент_реєстру = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_дії.властивості::адреса, назва);
    якщо елемент_реєстру != пусто {
      вернути елемент_реєстру.значення;
    }
    змінна ціль тип = обʼєкт_дії.тип;
    поки тип != пусто {
      ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(тип.методи::адреса, назва);
      якщо елемент_реєстру_методів != пусто {
        вернути елемент_реєстру_методів.значення;
      }
      тип = тип.предок;
    }
    вернути пусто;
  }

  місцева дія обʼєкт_дії_змінити_властивість(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо назва == М.БН.С.назва {
      вернути пусто;
    }
    якщо перевірити_чи_назва_чародія(М, назва) {
      вернути пусто;
    }
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_дії.властивості::адреса, назва, аргумент);
    вернути пусто;
  }

  місцева дія обʼєкт_дії_виконати_властивість(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_властивості = обʼєкт_дії_отримати_властивість(обʼєкт_дії, М, назва_властивості);
    якщо М.стан_падіння {
      вернути обʼєкт_властивості;
    }
    вернути обʼєкт_виконати(обʼєкт_властивості, М, обʼєкт_дії як адреса<Обʼєкт>, аргументи, іменовані_аргументи);
  }

  місцева дія обʼєкт_дії_отримати_елемент(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати елемент з дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_змінити_елемент(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо змінити елемент в дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_отримати_перебір(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати перебір з дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_додати(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати додавання для дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_відняти(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати віднімання для дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_помножити(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати множення для дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_поділити(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати ділення для дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_отримати_остачу_ділення(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати отримання остачі ділення для дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_отримати_частку_ділення(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати отримання частки ділення для дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_піднести_до_степеня(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати піднесення до степеня для дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_зсунути_вліво(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вліво для дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_зсунути_вправо(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо для дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_зсунути_вправо_зі_заповненням(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо зі заповненням для дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_двійкове_і(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове І для дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_двійкове_або(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове АБО для дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_двійкове_виключне_або(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове ВИКЛЮЧНЕ АБО для дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_двійкове_не(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове НЕ для дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_більше(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на більшість для дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_менше(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на меншість для дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_рівно(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо перевірити_чи_обʼєкт_дії_рівно(обʼєкт_дії, М, аргумент) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_містить(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на місткість для дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_є(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_Структура {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо перевірити_чи_обʼєкт_дії_є(обʼєкт_дії, М, аргумент як адреса<ОбʼєктСтруктури>) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_відʼємне(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати відʼємне для дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_додатнє(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати додатнє для дії") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_дії_заперечити(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія перевірити_чи_обʼєкт_дії_рівно(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне {
    ціль обʼєкт = обʼєкт_дії як адреса<Обʼєкт>;
    якщо обʼєкт == аргумент {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_обʼєкт_дії_є(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне {
    якщо обʼєкт_структури == М.обʼєкт_структури_Дія {
      вернути так;
    }
    вернути ні;
  }
}