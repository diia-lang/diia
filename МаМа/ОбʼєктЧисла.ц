взяти визначення МаМа;

секція МаМа {
  дія нативна_дія_числа_чародія_додати(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_додати\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_додати\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_числа_додати(обʼєкт_числа, М, обʼєкт_аргумента);
  }

  дія нативна_дія_числа_чародія_відняти(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_відняти\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_відняти\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_числа_відняти(обʼєкт_числа, М, обʼєкт_аргумента);
  }

  дія нативна_дія_числа_чародія_помножити(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_помножити\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_помножити\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_числа_помножити(обʼєкт_числа, М, обʼєкт_аргумента);
  }

  дія нативна_дія_числа_чародія_поділити(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_поділити\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_поділити\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_числа_поділити(обʼєкт_числа, М, обʼєкт_аргумента);
  }

  дія нативна_дія_числа_чародія_остача(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_остача\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_остача\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_числа_отримати_остачу_ділення(обʼєкт_числа, М, обʼєкт_аргумента);
  }

  дія нативна_дія_числа_чародія_неповна_частка(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_неповна_частка\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_неповна_частка\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_числа_отримати_частку_ділення(обʼєкт_числа, М, обʼєкт_аргумента);
  }

  дія нативна_дія_числа_чародія_степінь(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_степінь\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_степінь\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_числа_піднести_до_степеня(обʼєкт_числа, М, обʼєкт_аргумента);
  }

  дія нативна_дія_числа_чародія_вліво(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_вліво\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_вліво\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_числа_зсунути_вліво(обʼєкт_числа, М, обʼєкт_аргумента);
  }

  дія нативна_дія_числа_чародія_вправо(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_вправо\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_вправо\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_числа_зсунути_вправо(обʼєкт_числа, М, обʼєкт_аргумента);
  }

  дія нативна_дія_числа_чародія_вправо_зі_заповненням(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_вправо_зі_заповненням\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_вправо_зі_заповненням\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_числа_зсунути_вправо_зі_заповненням(обʼєкт_числа, М, обʼєкт_аргумента);
  }

  дія нативна_дія_числа_чародія_двійкове_і(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_двійкове_і\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_двійкове_і\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_числа_двійкове_і(обʼєкт_числа, М, обʼєкт_аргумента);
  }

  дія нативна_дія_числа_чародія_двійкове_або(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_двійкове_або\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_двійкове_або\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_числа_двійкове_або(обʼєкт_числа, М, обʼєкт_аргумента);
  }

  дія нативна_дія_числа_чародія_двійкове_виключне_або(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_двійкове_виключне_або\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_двійкове_виключне_або\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_числа_двійкове_виключне_або(обʼєкт_числа, М, обʼєкт_аргумента);
  }

  дія нативна_дія_числа_чародія_двійкове_не(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_двійкове_не\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_двійкове_не\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    вернути обʼєкт_числа_двійкове_не(обʼєкт_числа, М);
  }

  дія нативна_дія_числа_чародія_більше(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_більше\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_більше\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_числа_більше(обʼєкт_числа, М, обʼєкт_аргумента);
  }

  дія нативна_дія_числа_чародія_менше(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_менше\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_менше\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_числа_менше(обʼєкт_числа, М, обʼєкт_аргумента);
  }

  дія нативна_дія_числа_чародія_відʼємне(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_відʼємне\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_відʼємне\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    вернути обʼєкт_числа_відʼємне(обʼєкт_числа, М);
  }

  дія нативна_дія_числа_чародія_число(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_число\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_число\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    вернути обʼєкт_числа_числове(обʼєкт_числа, М);
  }

  дія нативна_дія_числа_чародія_текст(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_текст\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_текст\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    // потім: втілити
    вернути пусто;
  }

  дія нативна_дія_числа_чародія_юнікод(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_юнікод\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_юнікод\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    // потім: втілити
    вернути пусто;
  }

  дія нативна_дія_числа_чародія_збільшити(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_збільшити\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_збільшити\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    вернути обʼєкт_числа_збільшити(обʼєкт_числа, М);
  }

  дія нативна_дія_числа_чародія_зменшити(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_зменшити\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію числа \"чародія_зменшити\" можна виконувати лише від числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = обʼєкт_я як адреса<ОбʼєктЧисла>;
    вернути обʼєкт_числа_зменшити(обʼєкт_числа, М);
  }

  місцева дія створити_структуру_числа(М: адреса<Машина>): адреса<ОбʼєктСтруктури> {
    ціль обʼєкт_структури = виділити_обʼєкт_структури(М, М.БН.С.число, М.обʼєкт_структури_обʼєкт);

    ціль обʼєкт_нативної_дії_числа_чародія_додати = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_додати, нативна_дія_числа_чародія_додати, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_додати, обʼєкт_нативної_дії_числа_чародія_додати як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_відняти = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_відняти, нативна_дія_числа_чародія_відняти, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_відняти, обʼєкт_нативної_дії_числа_чародія_відняти як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_помножити = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_помножити, нативна_дія_числа_чародія_помножити, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_помножити, обʼєкт_нативної_дії_числа_чародія_помножити як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_поділити = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_поділити, нативна_дія_числа_чародія_поділити, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_поділити, обʼєкт_нативної_дії_числа_чародія_поділити як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_остача = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_остача, нативна_дія_числа_чародія_остача, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_остача, обʼєкт_нативної_дії_числа_чародія_остача як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_неповна_частка = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_неповна_частка, нативна_дія_числа_чародія_неповна_частка, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_неповна_частка, обʼєкт_нативної_дії_числа_чародія_неповна_частка як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_степінь = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_степінь, нативна_дія_числа_чародія_степінь, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_степінь, обʼєкт_нативної_дії_числа_чародія_степінь як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_вліво = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_вліво, нативна_дія_числа_чародія_вліво, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_вліво, обʼєкт_нативної_дії_числа_чародія_вліво як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_вправо = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_вправо, нативна_дія_числа_чародія_вправо, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_вправо, обʼєкт_нативної_дії_числа_чародія_вправо як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_вправо_зі_заповненням = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_вправо_зі_заповненням, нативна_дія_числа_чародія_вправо_зі_заповненням, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_вправо_зі_заповненням, обʼєкт_нативної_дії_числа_чародія_вправо_зі_заповненням як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_двійкове_і = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_двійкове_і, нативна_дія_числа_чародія_двійкове_і, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_двійкове_і, обʼєкт_нативної_дії_числа_чародія_двійкове_і як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_двійкове_або = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_двійкове_або, нативна_дія_числа_чародія_двійкове_або, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_двійкове_або, обʼєкт_нативної_дії_числа_чародія_двійкове_або як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_двійкове_виключне_або = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_двійкове_виключне_або, нативна_дія_числа_чародія_двійкове_виключне_або, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_двійкове_виключне_або, обʼєкт_нативної_дії_числа_чародія_двійкове_виключне_або як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_двійкове_не = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_двійкове_не, нативна_дія_числа_чародія_двійкове_не, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_двійкове_не, обʼєкт_нативної_дії_числа_чародія_двійкове_не як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_більше = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_більше, нативна_дія_числа_чародія_більше, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_більше, обʼєкт_нативної_дії_числа_чародія_більше як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_менше = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_менше, нативна_дія_числа_чародія_менше, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_менше, обʼєкт_нативної_дії_числа_чародія_менше як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_відʼємне = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_відʼємне, нативна_дія_числа_чародія_відʼємне, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_відʼємне, обʼєкт_нативної_дії_числа_чародія_відʼємне як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_число = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_число, нативна_дія_числа_чародія_число, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_число, обʼєкт_нативної_дії_числа_чародія_число як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_текст = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_текст, нативна_дія_числа_чародія_текст, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_текст, обʼєкт_нативної_дії_числа_чародія_текст як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_юнікод = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_юнікод, нативна_дія_числа_чародія_юнікод, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_юнікод, обʼєкт_нативної_дії_числа_чародія_юнікод як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_збільшити = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_збільшити, нативна_дія_числа_чародія_збільшити, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_збільшити, обʼєкт_нативної_дії_числа_чародія_збільшити як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_числа_чародія_зменшити = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_зменшити, нативна_дія_числа_чародія_зменшити, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_зменшити, обʼєкт_нативної_дії_числа_чародія_зменшити як адреса<Обʼєкт>);

    вернути обʼєкт_структури;
  }

  місцева дія виділити_обʼєкт_числа(М: адреса<Машина>, значення: д64): адреса<ОбʼєктЧисла> {
    ціль обʼєкт_числа = виділити_обʼєкт<ОбʼєктЧисла>(М, М.обʼєкт_структури_число);

    обʼєкт_числа.значення = значення;

    вернути обʼєкт_числа;
  }

  місцева дія звільнити_обʼєкт_числа(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>) {
    звільнити(обʼєкт_числа);
  }

  місцева дія обʼєкт_числа_виконати(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати число") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_отримати_властивість(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    змінна ціль тип = обʼєкт_числа.тип;
    поки тип != пусто {
      ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(тип.методи::адреса, назва);
      якщо елемент_реєстру_методів != пусто {
        вернути елемент_реєстру_методів.значення;
      }
      тип = тип.предок;
    }
    вернути пусто;
  }

  місцева дія обʼєкт_числа_змінити_властивість(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто;
  }

  місцева дія обʼєкт_числа_видалити_властивість(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_виконати_властивість(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_властивості = обʼєкт_числа_отримати_властивість(обʼєкт_числа, М, назва_властивості);
    якщо М.стан_падіння {
      вернути обʼєкт_властивості;
    }
    вернути обʼєкт_виконати(обʼєкт_властивості, М, обʼєкт_числа як адреса<Обʼєкт>, аргументи, іменовані_аргументи);
  }

  місцева дія обʼєкт_числа_отримати_елемент(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати елемент з числа") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_змінити_елемент(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо змінити елемент в числі") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_видалити_елемент(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо видалити елемент з числа") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_отримати_перебір(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати перебір з числа") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_додати(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо додати до числа пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"До числа можна додати лише число") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, обʼєкт_числа.значення + обʼєкт_аргумента.значення) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_відняти(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо відняти від числа пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Від числа можна відняти лише число") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, обʼєкт_числа.значення - обʼєкт_аргумента.значення) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_помножити(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо помножити на число пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Число можна помножити лише на число") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, обʼєкт_числа.значення * обʼєкт_аргумента.значення) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_поділити(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо поділити на число пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Число можна поділити лише на число") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, обʼєкт_числа.значення / обʼєкт_аргумента.значення) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_отримати_остачу_ділення(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати остачу ділення числа і пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Отримати остачу ділення числа можна лише з числом") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, обʼєкт_числа.значення % обʼєкт_аргумента.значення) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_отримати_частку_ділення(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати частку ділення числа і пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Отримати частку ділення числа можна лише з числом") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, mama_floor(обʼєкт_числа.значення / обʼєкт_аргумента.значення)) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_піднести_до_степеня(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо підняти число до степеня пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Число можна піднести до степеня лише числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, mama_pow(обʼєкт_числа.значення, обʼєкт_аргумента.значення)) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_зсунути_вліво(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо зсунути вліво число на пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Число можна зсунути вліво лише на число") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, д64(ц32(обʼєкт_числа.значення) << ц32(обʼєкт_аргумента.значення))) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_зсунути_вправо(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо зсунути вправо число на пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Число можна зсунути вправо лише на число") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, д64(ц32(обʼєкт_числа.значення) >> ц32(обʼєкт_аргумента.значення))) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_зсунути_вправо_зі_заповненням(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо зсунути вправо зі заповненням число на пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Число можна зсунути вправо зі заповненням лише на число") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, д64(ц32(обʼєкт_числа.значення) >>> ц32(обʼєкт_аргумента.значення))) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_двійкове_і(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове І числа і пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Виконати двійкове І для числа можна лише з числом") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, д64(ц32(обʼєкт_числа.значення) & ц32(обʼєкт_аргумента.значення))) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_двійкове_або(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове АБО числа і пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Виконати двійкове АБО для числа можна лише з числом") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, д64(ц32(обʼєкт_числа.значення) | ц32(обʼєкт_аргумента.значення))) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_двійкове_виключне_або(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове ВИКЛЮЧНЕ АБО числа і пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Виконати двійкове ВИКЛЮЧНЕ АБО для числа можна лише з числом") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, д64(ц32(обʼєкт_числа.значення) ^ ц32(обʼєкт_аргумента.значення))) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_двійкове_не(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    вернути виділити_обʼєкт_числа(М, д64(mama_bitnot(long(обʼєкт_числа.значення)))) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_більше(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо перевірити чи пусто більше числа") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Перевірити чи число більше можна лише числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    якщо обʼєкт_числа.значення > обʼєкт_аргумента.значення {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_менше(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо перевірити чи пусто менше числа") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Перевірити чи число менше можна лише числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    якщо обʼєкт_числа.значення < обʼєкт_аргумента.значення {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_рівно(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо перевірити_чи_обʼєкт_числа_рівно(обʼєкт_числа, М, аргумент) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_містить(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на місткість для числа") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_є(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_Структура {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо перевірити_чи_обʼєкт_числа_є(обʼєкт_числа, М, аргумент як адреса<ОбʼєктСтруктури>) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_відʼємне(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    вернути виділити_обʼєкт_числа(М, mama_negate(обʼєкт_числа.значення)) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_числове(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    вернути обʼєкт_числа як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_заперечити(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_числа.значення == 0.0 {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_збільшити(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    вернути виділити_обʼєкт_числа(М, обʼєкт_числа.значення + 1.0) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_зменшити(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    вернути виділити_обʼєкт_числа(М, обʼєкт_числа.значення - 1.0) як адреса<Обʼєкт>;
  }

  місцева дія перевірити_чи_обʼєкт_числа_рівно(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне {
    ціль обʼєкт = обʼєкт_числа як адреса<Обʼєкт>;
    якщо обʼєкт == аргумент {
      вернути так;
    }
    якщо аргумент == пусто {
      вернути ні;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      вернути ні;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    якщо обʼєкт_числа.значення == обʼєкт_аргумента.значення {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_обʼєкт_числа_є(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне {
    якщо обʼєкт_структури == М.обʼєкт_структури_число {
      вернути так;
    }
    вернути ні;
  }

  місцева дія надрукувати_обʼєкт_числа_в_накопичувач_ю8(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    ціль д64ю8: Ю8 = пусто;
    якщо перетворити_д64_в_Ю8(обʼєкт_числа.значення, д64ю8::адреса) == 0 {
      ПОМЕРТИ(ю8"Помилка при конвертації дійсного числа в рядок");
    }
    покласти_в_накопичувач_ю8(накопичувач_ю8, д64ю8);
    звільнити(д64ю8 як адреса);
  }
}