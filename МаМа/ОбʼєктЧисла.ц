////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  місцева дія створити_структуру_числа(М: адреса<Машина>): адреса<ОбʼєктСтруктури> {
    ціль обʼєкт_структури = виділити_обʼєкт_структури(М, М.БН.С.число, М.обʼєкт_структури_обʼєкт);

    вернути обʼєкт_структури;
  }

  місцева дія виділити_обʼєкт_числа(М: адреса<Машина>, значення: д64): адреса<ОбʼєктЧисла> {
    ціль обʼєкт_числа = виділити_обʼєкт<ОбʼєктЧисла>(М, М.обʼєкт_структури_число);

    обʼєкт_числа.значення = значення;

    вернути обʼєкт_числа;
  }

  місцева дія звільнити_обʼєкт_числа(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>) {
    звільнити(обʼєкт_числа);
  }

  місцева дія обʼєкт_числа_виконати(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати число") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_отримати_властивість(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    змінна ціль тип = обʼєкт_числа.тип;
    поки тип != пусто {
      ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(тип.методи::адреса, назва);
      якщо елемент_реєстру_методів != пусто {
        вернути елемент_реєстру_методів.значення;
      }
      тип = тип.предок;
    }
    вернути пусто;
  }

  місцева дія обʼєкт_числа_змінити_властивість(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто;
  }

  місцева дія обʼєкт_числа_виконати_властивість(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_властивості = обʼєкт_числа_отримати_властивість(обʼєкт_числа, М, назва_властивості);
    якщо М.стан_падіння {
      вернути обʼєкт_властивості;
    }
    вернути обʼєкт_виконати(обʼєкт_властивості, М, обʼєкт_числа як адреса<Обʼєкт>, аргументи, іменовані_аргументи);
  }

  місцева дія обʼєкт_числа_отримати_елемент(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати елемент з числа") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_змінити_елемент(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо змінити елемент в числі") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_отримати_перебір(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати перебір з числа") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_додати(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо додати до числа пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"До числа можна додати лише число") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, обʼєкт_числа.значення + обʼєкт_аргумента.значення) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_відняти(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо відняти від числа пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Від числа можна відняти лише число") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, обʼєкт_числа.значення - обʼєкт_аргумента.значення) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_помножити(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо помножити на число пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Число можна помножити лише на число") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, обʼєкт_числа.значення * обʼєкт_аргумента.значення) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_поділити(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо поділити на число пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Число можна поділити лише на число") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, обʼєкт_числа.значення / обʼєкт_аргумента.значення) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_отримати_остачу_ділення(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати остачу ділення числа і пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Отримати остачу ділення числа можна лише з числом") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, обʼєкт_числа.значення % обʼєкт_аргумента.значення) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_отримати_частку_ділення(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати частку ділення числа і пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Отримати частку ділення числа можна лише з числом") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, floor(обʼєкт_числа.значення / обʼєкт_аргумента.значення)) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_піднести_до_степеня(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо підняти число до степеня пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Число можна піднести до степеня лише числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, pow(обʼєкт_числа.значення, обʼєкт_аргумента.значення)) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_зсунути_вліво(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо зсунути вліво число на пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Число можна зсунути вліво лише на число") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, д64(п64(обʼєкт_числа.значення) << п64(обʼєкт_аргумента.значення))) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_зсунути_вправо(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо зсунути вправо число на пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Число можна зсунути вправо лише на число") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, д64(п64(обʼєкт_числа.значення) >> п64(обʼєкт_аргумента.значення))) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_зсунути_вправо_зі_заповненням(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо зсунути вправо зі заповненням число на пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Число можна зсунути вправо зі заповненням лише на число") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, д64(п64(обʼєкт_числа.значення) >>> п64(обʼєкт_аргумента.значення))) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_двійкове_і(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове І числа і пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Виконати двійкове І для числа можна лише з числом") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, д64(п64(обʼєкт_числа.значення) & п64(обʼєкт_аргумента.значення))) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_двійкове_або(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове АБО числа і пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Виконати двійкове АБО для числа можна лише з числом") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, д64(п64(обʼєкт_числа.значення) | п64(обʼєкт_аргумента.значення))) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_двійкове_виключне_або(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове ВИКЛЮЧНЕ АБО числа і пусто") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Виконати двійкове ВИКЛЮЧНЕ АБО для числа можна лише з числом") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    вернути виділити_обʼєкт_числа(М, д64(п64(обʼєкт_числа.значення) ^ п64(обʼєкт_аргумента.значення))) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_двійкове_не(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    вернути виділити_обʼєкт_числа(М, д64(mama_bitnot(позитивне(обʼєкт_числа.значення)))) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_більше(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо перевірити чи пусто більше числа") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Перевірити чи число більше можна лише числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    якщо обʼєкт_числа.значення > обʼєкт_аргумента.значення {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_менше(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо перевірити чи пусто менше числа") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Перевірити чи число менше можна лише числа") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    якщо обʼєкт_числа.значення < обʼєкт_аргумента.значення {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_рівно(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо перевірити_чи_обʼєкт_числа_рівно(обʼєкт_числа, М, аргумент) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_містить(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на місткість для числа") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_є(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_Структура {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо перевірити_чи_обʼєкт_числа_є(обʼєкт_числа, М, аргумент як адреса<ОбʼєктСтруктури>) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_відʼємне(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    вернути виділити_обʼєкт_числа(М, mama_negate(обʼєкт_числа.значення)) як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_числове(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    вернути обʼєкт_числа як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_числа_заперечити(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_числа.значення == 0.0 {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія перевірити_чи_обʼєкт_числа_рівно(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне {
    ціль обʼєкт = обʼєкт_числа як адреса<Обʼєкт>;
    якщо обʼєкт == аргумент {
      вернути так;
    }
    якщо аргумент == пусто {
      вернути ні;
    }
    якщо аргумент.тип != М.обʼєкт_структури_число {
      вернути ні;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктЧисла>;
    якщо обʼєкт_числа.значення == обʼєкт_аргумента.значення {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_обʼєкт_числа_є(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне {
    якщо обʼєкт_структури == М.обʼєкт_структури_число {
      вернути так;
    }
    вернути ні;
  }

  місцева дія надрукувати_обʼєкт_числа_в_накопичувач_ю8(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    ціль д64ю8 = перетворити_д64_в_ю8(обʼєкт_числа.значення);
    покласти_в_накопичувач_ю8(накопичувач_ю8, д64ю8);
    звільнити(д64ю8);
  }
}