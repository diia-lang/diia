////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  місцева дія надрукувати_складений_обʼєкт_в_накопичувач_ю8(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"СкладенийОбʼєкт");
  }

  місцева дія виділити_складений_обʼєкт(М: адреса<Машина>, тип: адреса<ОбʼєктСтруктури>): адреса<СкладенийОбʼєкт> {
    ціль складений_обʼєкт = виділити_обʼєкт<СкладенийОбʼєкт>(М, тип);

    складений_обʼєкт.властивості = зробити_реєстр<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні);

    вернути складений_обʼєкт;
  }

  місцева дія звільнити_складений_обʼєкт(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>) {
    звільнити_значення_реєстру<адреса<Назва>, адреса<Обʼєкт>>(складений_обʼєкт.властивості);
    звільнити(складений_обʼєкт);
  }

  місцева дія складений_обʼєкт_виконати(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії_виконати = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, М.БН.С.чародія_виконати);
    якщо обʼєкт_чародії_виконати == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_виконати, складений_обʼєкт як адреса<Обʼєкт>);
    }
    вернути обʼєкт_виконати(обʼєкт_чародії_виконати, М, обʼєкт_я, аргументи, іменовані_аргументи);
  }

  місцева дія складений_обʼєкт_отримати_властивість(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    ціль елемент_реєстру = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(складений_обʼєкт.властивості::адреса, назва);
    якщо елемент_реєстру != пусто {
      вернути елемент_реєстру.значення;
    }
    змінна ціль тип = складений_обʼєкт.тип;
    поки тип != пусто {
      ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(тип.методи::адреса, назва);
      якщо елемент_реєстру_методів != пусто {
        вернути елемент_реєстру_методів.значення;
      }
      тип = тип.предок;
    }
    вернути пусто;
  }

  місцева дія складений_обʼєкт_змінити_властивість(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо складений_обʼєкт.тип != пусто {
      змінна ціль елемент_параметра: адреса<ЕлементРеєстру<адреса<Назва>, Параметр>> = пусто;
      змінна ціль пп: позитивне = 0;
      поки пп < складений_обʼєкт.тип.параметри.розмір {
        якщо складений_обʼєкт.тип.параметри.елементи[пп].ключ == назва == 0 {
          елемент_параметра = складений_обʼєкт.тип.параметри.елементи[пп]::адреса;
        }
        пп += 1;
      }
      якщо елемент_параметра != пусто {
        змінна ціль знайдено = ні;
        змінна ціль пт: позитивне = 0;
        поки пт < елемент_параметра.значення.типи.розмір {
          ціль тип = елемент_параметра.значення.типи.дані[пт];
          якщо перевірити_чи_обʼєкт_є(аргумент, М, тип) {
            знайдено = так;
          }
          пт += 1;
        }
        якщо знайдено == ні {
          увімкнути_стан_падіння(М, пусто);
          якщо аргумент == пусто {
            вернути виділити_обʼєкт_тексту_помилки_невірний_тип_аргумента(М, елемент_параметра.ключ.значення, елемент_параметра.значення.типи, пусто);
          } інакше {
            вернути виділити_обʼєкт_тексту_помилки_невірний_тип_аргумента(М, елемент_параметра.ключ.значення, елемент_параметра.значення.типи, аргумент.тип);
          }
        }
      }
    }
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(складений_обʼєкт.властивості::адреса, назва, аргумент);
    вернути пусто;
  }

  місцева дія складений_обʼєкт_виконати_властивість(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_властивості = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, назва_властивості);
    якщо М.стан_падіння {
      вернути обʼєкт_властивості;
    }
    вернути обʼєкт_виконати(обʼєкт_властивості, М, складений_обʼєкт як адреса<Обʼєкт>, аргументи, іменовані_аргументи);
  }

  місцева дія складений_обʼєкт_отримати_елемент(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль аргументи = виділити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи, ключ);
    ціль результат = складений_обʼєкт_виконати_властивість(складений_обʼєкт, М, М.БН.С.чародія_отримати_елемент, аргументи, пусто);
    звільнити_накопичувач<адреса<Обʼєкт>>(аргументи);
    вернути результат;
  }

  місцева дія складений_обʼєкт_змінити_елемент(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль аргументи = виділити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи, ключ);
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи, значення);
    ціль результат = складений_обʼєкт_виконати_властивість(складений_обʼєкт, М, М.БН.С.чародія_змінити_елемент, аргументи, пусто);
    звільнити_накопичувач<адреса<Обʼєкт>>(аргументи);
    вернути результат;
  }

  місцева дія складений_обʼєкт_отримати_перебір(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    ціль результат = складений_обʼєкт_виконати_властивість(складений_обʼєкт, М, М.БН.С.чародія_перебір, пусто, пусто);
    вернути результат;
  }

  місцева дія складений_обʼєкт_додати(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, М.БН.С.чародія_додати);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_додати, складений_обʼєкт як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, складений_обʼєкт як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_обʼєкт_відняти(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, М.БН.С.чародія_відняти);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_відняти, складений_обʼєкт як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, складений_обʼєкт як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_обʼєкт_помножити(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, М.БН.С.чародія_помножити);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_помножити, складений_обʼєкт як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, складений_обʼєкт як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_обʼєкт_поділити(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, М.БН.С.чародія_поділити);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_поділити, складений_обʼєкт як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, складений_обʼєкт як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_обʼєкт_отримати_остачу_ділення(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, М.БН.С.чародія_отримати_остачу_ділення);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_отримати_остачу_ділення, складений_обʼєкт як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, складений_обʼєкт як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_обʼєкт_отримати_частку_ділення(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, М.БН.С.чародія_отримати_частку_ділення);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_отримати_частку_ділення, складений_обʼєкт як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, складений_обʼєкт як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_обʼєкт_піднести_до_степеня(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, М.БН.С.чародія_піднести_до_степеня);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_піднести_до_степеня, складений_обʼєкт як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, складений_обʼєкт як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_обʼєкт_зсунути_вліво(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, М.БН.С.чародія_зсунути_вліво);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_зсунути_вліво, складений_обʼєкт як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, складений_обʼєкт як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_обʼєкт_зсунути_вправо(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, М.БН.С.чародія_зсунути_вправо);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_зсунути_вправо, складений_обʼєкт як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, складений_обʼєкт як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_обʼєкт_зсунути_вправо_зі_заповненням(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, М.БН.С.чародія_зсунути_вправо_зі_заповненням);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_зсунути_вправо_зі_заповненням, складений_обʼєкт як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, складений_обʼєкт як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_обʼєкт_двійкове_і(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, М.БН.С.чародія_двійкове_і);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_двійкове_і, складений_обʼєкт як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, складений_обʼєкт як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_обʼєкт_двійкове_або(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, М.БН.С.чародія_двійкове_або);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_двійкове_або, складений_обʼєкт як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, складений_обʼєкт як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_обʼєкт_двійкове_виключне_або(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, М.БН.С.чародія_двійкове_виключне_або);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_двійкове_виключне_або, складений_обʼєкт як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, складений_обʼєкт як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_обʼєкт_двійкове_не(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, М.БН.С.чародія_двійкове_не);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_двійкове_не, складений_обʼєкт як адреса<Обʼєкт>);
    }
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, складений_обʼєкт як адреса<Обʼєкт>, пусто, пусто);
    вернути результат_виконання;
  }

  місцева дія складений_обʼєкт_більше(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, М.БН.С.чародія_більше);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_більше, складений_обʼєкт як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, складений_обʼєкт як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_обʼєкт_менше(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, М.БН.С.чародія_менше);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_менше, складений_обʼєкт як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, складений_обʼєкт як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_обʼєкт_рівно(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо перевірити_чи_складений_обʼєкт_рівно(складений_обʼєкт, М, аргумент) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія складений_обʼєкт_містить(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, М.БН.С.чародія_містить);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_містить, складений_обʼєкт як адреса<Обʼєкт>);
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, складений_обʼєкт як адреса<Обʼєкт>, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія складений_обʼєкт_є(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент != пусто {
      якщо аргумент.тип != М.обʼєкт_структури_Структура {
        вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
      }
    }
    якщо перевірити_чи_обʼєкт_є(складений_обʼєкт як адреса<Обʼєкт>, М, аргумент як адреса<ОбʼєктСтруктури>) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія складений_обʼєкт_відʼємне(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, М.БН.С.чародія_відʼємне);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_відʼємне, складений_обʼєкт як адреса<Обʼєкт>);
    }
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, складений_обʼєкт як адреса<Обʼєкт>, пусто, пусто);
    вернути результат_виконання;
  }

  місцева дія складений_обʼєкт_додатнє(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_чародії = складений_обʼєкт_отримати_властивість(складений_обʼєкт, М, М.БН.С.чародія_додатнє);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М, М.БН.С.чародія_додатнє, складений_обʼєкт як адреса<Обʼєкт>);
    }
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, складений_обʼєкт як адреса<Обʼєкт>, пусто, пусто);
    вернути результат_виконання;
  }

  місцева дія складений_обʼєкт_заперечити(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія перевірити_чи_складений_обʼєкт_рівно(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне {
    ціль обʼєкт = складений_обʼєкт як адреса<Обʼєкт>;
    якщо обʼєкт == аргумент {
      вернути так;
    }
    вернути ні;
  }
}