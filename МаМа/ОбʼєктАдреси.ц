взяти визначення МаМа;

секція МаМа {
  місцева дія створити_структуру_адреси(М: адреса<Машина>): адреса<ОбʼєктСтруктури> {
    ціль обʼєкт_структури = виділити_обʼєкт_структури(М, М.БН.С.адреса, М.обʼєкт_структури_обʼєкт);

    вернути обʼєкт_структури;
  }

  місцева дія виділити_обʼєкт_адреси(М: адреса<Машина>, значення: адреса): адреса<ОбʼєктАдреси> {
    ціль обʼєкт_адреси = виділити_обʼєкт<ОбʼєктАдреси>(М, М.обʼєкт_структури_адреса);

    обʼєкт_адреси.значення = значення;

    вернути обʼєкт_адреси;
  }

  місцева дія звільнити_обʼєкт_адреси(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>) {
    звільнити(М, обʼєкт_адреси);
  }

  місцева дія обʼєкт_адреси_виконати(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати адресу") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_отримати_властивість(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    змінна ціль тип = обʼєкт_адреси.тип;
    поки тип != пусто {
      ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, тип.методи::адреса, назва);
      якщо елемент_реєстру_методів != пусто {
        вернути елемент_реєстру_методів.значення;
      }
      тип = тип.предок;
    }
    вернути пусто;
  }

  місцева дія обʼєкт_адреси_змінити_властивість(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто;
  }

  місцева дія обʼєкт_адреси_видалити_властивість(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_виконати_властивість(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_властивості = обʼєкт_адреси_отримати_властивість(обʼєкт_адреси, М, назва_властивості);
    якщо М.стан_падіння == позитивне(так) {
      вернути обʼєкт_властивості;
    }
    вернути обʼєкт_виконати(обʼєкт_властивості, М, обʼєкт_адреси як адреса<Обʼєкт>, аргументи, іменовані_аргументи);
  }

  місцева дія обʼєкт_адреси_отримати_елемент(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати елемент з адреси") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_змінити_елемент(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо змінити елемент в адресі") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_видалити_елемент(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо видалити елемент з адреси") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_отримати_перебір(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати перебір з адреси") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_додати(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо додати до адреси") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_відняти(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо відняти від адреси") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_помножити(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо помножити адресу") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_поділити(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо поділити адресу") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_отримати_остачу_ділення(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати остачу ділення адреси") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_отримати_частку_ділення(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати частку ділення адреси") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_піднести_до_степеня(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо піднести до степеня адресу") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_зсунути_вліво(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо зсунути вліво адресу") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_зсунути_вправо(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо зсунути вправо адресу") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_зсунути_вправо_зі_заповненням(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо зсунути вправо зі заповненням адресу") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_двійкове_і(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове І для адреси") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_двійкове_або(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове АБО для адреси") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_двійкове_виключне_або(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове виключне АБО для адреси") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_двійкове_не(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове НЕ для адреси") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_більше(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати більше для адреси") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_менше(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати менше для адреси") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_рівно(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо перевірити_чи_обʼєкт_адреси_рівно(обʼєкт_адреси, М, аргумент) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_містить(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на місткість для адреси") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_є(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_Структура {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо перевірити_чи_обʼєкт_адреси_є(обʼєкт_адреси, М, аргумент як адреса<ОбʼєктСтруктури>) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_відʼємне(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо перетворити адресу на відʼємне") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_числове(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо перетворити адресу на число") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_заперечити(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_адреси.значення == пусто {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_збільшити(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо збільшити адресу") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_адреси_зменшити(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо зменшити адресу") як адреса<Обʼєкт>;
  }

  місцева дія перевірити_чи_обʼєкт_адреси_рівно(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне {
    ціль обʼєкт = обʼєкт_адреси як адреса<Обʼєкт>;
    якщо обʼєкт == аргумент {
      вернути так;
    }
    якщо аргумент == пусто {
      вернути ні;
    }
    якщо аргумент.тип != М.обʼєкт_структури_адреса {
      вернути ні;
    }
    ціль обʼєкт_аргумента = аргумент як адреса<ОбʼєктАдреси>;
    якщо обʼєкт_адреси.значення == обʼєкт_аргумента.значення {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_обʼєкт_адреси_є(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне {
    якщо обʼєкт_структури == М.обʼєкт_структури_адреса {
      вернути так;
    }
    вернути ні;
  }

  місцева дія надрукувати_обʼєкт_адреси_в_накопичувач_ю8(обʼєкт_адреси: адреса<ОбʼєктАдреси>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    ціль д64ю8: Ю8 = пусто;
    якщо перетворити_д64_в_Ю8(М, д64(п64(обʼєкт_адреси.значення)), д64ю8::адреса) == 0 {
      ПОМЕРТИ(М, ю8"Помилка при конвертації дійсного адреси в рядок");
    }
    покласти_в_накопичувач_ю8(М, накопичувач_ю8, д64ю8);
    звільнити(М, д64ю8 як адреса);
  }
}