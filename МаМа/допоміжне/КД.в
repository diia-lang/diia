взяти визначення МаМа/допоміжне/біб;

секція КД {
  секція символи {
    синонім НІЩО = 1;
    синонім СПЕЦ_СИМВОЛ_1 = 2;
    синонім СПЕЦ_СИМВОЛ_2 = 3;
    синонім СПЕЦ_СИМВОЛ_3 = 4;
    синонім СПЕЦ_СИМВОЛ_4 = 5;
    синонім МІЖРЯД = 6;
    синонім МІЖСЛОВО = 7;
    синонім ЗНАК_ОКЛИКУ = 8;
    синонім ДВОЛАПКА = 9;
    синонім РЕШІТКА = 10;
    синонім МАТЕРІЯ = 11;
    синонім ГРИВНЯ = 12;
    синонім ВІДСОТОК = 13;
    синонім АМПЕРСАНТ = 14;
    синонім ОДНОЛАПКА = 15;
    синонім ВІДКРИТА_ДУГА = 16;
    синонім ЗАКРИТА_ДУГА = 17;
    синонім ЗІРОЧКА = 18;
    синонім ПЛЮС = 19;
    синонім КОМА = 20;
    синонім МІНУС = 21;
    синонім КРАПКА = 22;
    синонім КОСА = 23;
    синонім НУЛЬ = 24;
    синонім ОДИН = 25;
    синонім ДВА = 26;
    синонім ТРИ = 27;
    синонім ЧОТИРИ = 28;
    синонім ПʼЯТЬ = 29;
    синонім ШІСТЬ = 30;
    синонім СІМ = 31;
    синонім ВІСІМ = 32;
    синонім ДЕВʼЯТЬ = 33;
    синонім ДВОКРАПКА = 34;
    синонім МЕНШЕ = 35;
    синонім РІВНО = 36;
    синонім БІЛЬШЕ = 37;
    синонім ЗНАК_ПИТАННЯ = 38;
    синонім РАВЛИК = 39;
    синонім ВІДКРИТА_КВАДРАТНА_ДУГА = 40;
    синонім ЗАКРИТА_КВАДРАТНА_ДУГА = 41;
    синонім ПІРАМІДКА = 42;
    синонім ВІДКРИТА_ФІГУРНА_ДУГА = 43;
    синонім ПРЯМА = 44;
    синонім ЗАКРИТА_ФІГУРНА_ДУГА = 45;
    синонім ТИЛЬДА = 46;
    синонім ПАРАГРАФ = 47;
    синонім АПОСТРОФ = 48;
    синонім ВЕЛИКА_БУКВА_А = 49;
    синонім ВЕЛИКА_БУКВА_Б = 50;
    синонім ВЕЛИКА_БУКВА_В = 51;
    синонім ВЕЛИКА_БУКВА_Г = 52;
    синонім ВЕЛИКА_БУКВА_Д = 53;
    синонім ВЕЛИКА_БУКВА_Е = 54;
    синонім ВЕЛИКА_БУКВА_Є = 55;
    синонім ВЕЛИКА_БУКВА_Ж = 56;
    синонім ВЕЛИКА_БУКВА_З = 57;
    синонім ВЕЛИКА_БУКВА_И = 58;
    синонім ВЕЛИКА_БУКВА_І = 59;
    синонім ВЕЛИКА_БУКВА_Ї = 60;
    синонім ВЕЛИКА_БУКВА_Й = 61;
    синонім ВЕЛИКА_БУКВА_К = 62;
    синонім ВЕЛИКА_БУКВА_Л = 63;
    синонім ВЕЛИКА_БУКВА_М = 64;
    синонім ВЕЛИКА_БУКВА_Н = 65;
    синонім ВЕЛИКА_БУКВА_О = 66;
    синонім ВЕЛИКА_БУКВА_П = 67;
    синонім ВЕЛИКА_БУКВА_Р = 68;
    синонім ВЕЛИКА_БУКВА_С = 69;
    синонім ВЕЛИКА_БУКВА_Т = 70;
    синонім ВЕЛИКА_БУКВА_У = 71;
    синонім ВЕЛИКА_БУКВА_Ф = 72;
    синонім ВЕЛИКА_БУКВА_Х = 73;
    синонім ВЕЛИКА_БУКВА_Ц = 74;
    синонім ВЕЛИКА_БУКВА_Ч = 75;
    синонім ВЕЛИКА_БУКВА_Ш = 76;
    синонім ВЕЛИКА_БУКВА_Щ = 77;
    синонім ВЕЛИКА_БУКВА_Ь = 78;
    синонім ВЕЛИКА_БУКВА_Ю = 79;
    синонім ВЕЛИКА_БУКВА_Я = 80;
    синонім МАЛА_БУКВА_а = 81;
    синонім МАЛА_БУКВА_б = 82;
    синонім МАЛА_БУКВА_в = 83;
    синонім МАЛА_БУКВА_г = 84;
    синонім МАЛА_БУКВА_д = 85;
    синонім МАЛА_БУКВА_е = 86;
    синонім МАЛА_БУКВА_є = 87;
    синонім МАЛА_БУКВА_ж = 88;
    синонім МАЛА_БУКВА_з = 89;
    синонім МАЛА_БУКВА_и = 90;
    синонім МАЛА_БУКВА_і = 91;
    синонім МАЛА_БУКВА_ї = 92;
    синонім МАЛА_БУКВА_й = 93;
    синонім МАЛА_БУКВА_к = 94;
    синонім МАЛА_БУКВА_л = 95;
    синонім МАЛА_БУКВА_м = 96;
    синонім МАЛА_БУКВА_н = 97;
    синонім МАЛА_БУКВА_о = 98;
    синонім МАЛА_БУКВА_п = 99;
    синонім МАЛА_БУКВА_р = 100;
    синонім МАЛА_БУКВА_с = 101;
    синонім МАЛА_БУКВА_т = 102;
    синонім МАЛА_БУКВА_у = 103;
    синонім МАЛА_БУКВА_ф = 104;
    синонім МАЛА_БУКВА_х = 105;
    синонім МАЛА_БУКВА_ц = 106;
    синонім МАЛА_БУКВА_ч = 107;
    синонім МАЛА_БУКВА_ш = 108;
    синонім МАЛА_БУКВА_щ = 109;
    синонім МАЛА_БУКВА_ь = 110;
    синонім МАЛА_БУКВА_ю = 111;
    синонім МАЛА_БУКВА_я = 112;
    синонім ВЕЛИКА_СПЕЦ_БУКВА_Ґ = 113;
    синонім ВЕЛИКА_СПЕЦ_БУКВА_Ё = 114;
    синонім ВЕЛИКА_СПЕЦ_БУКВА_Ъ = 115;
    синонім ВЕЛИКА_СПЕЦ_БУКВА_Ы = 116;
    синонім ВЕЛИКА_СПЕЦ_БУКВА_Э = 117;
    синонім МАЛА_СПЕЦ_БУКВА_ґ = 118;
    синонім МАЛА_СПЕЦ_БУКВА_ё = 119;
    синонім МАЛА_СПЕЦ_БУКВА_ъ = 120;
    синонім МАЛА_СПЕЦ_БУКВА_ы = 121;
    синонім МАЛА_СПЕЦ_БУКВА_э = 122;
  }

  секція символи_юнікоду {
    синонім NEWLINE = 10;
    синонім SPACE = 32;
    синонім EXCLAMATION_MARK = 33;
    синонім DOUBLE_QUOTE = 34;
    синонім HASH = 35;
    синонім HRYVNA = 0; // потім: записати
    синонім PERCENT = 37;
    синонім AMPERSAND = 38;
    синонім SINGLE_QUOTE = 39;
    синонім OPEN_PARENTHESIS = 40;
    синонім CLOSE_PARENTHESIS = 41;
    синонім ASTERISK = 42;
    синонім PLUS = 43;
    синонім COMMA = 44;
    синонім MINUS = 45;
    синонім DOT = 46;
    синонім SLASH = 47;
    синонім ZERO = 48;
    синонім ONE = 49;
    синонім TWO = 50;
    синонім THREE = 51;
    синонім FOUR = 52;
    синонім FIVE = 53;
    синонім SIX = 54;
    синонім SEVEN = 55;
    синонім EIGHT = 56;
    синонім NINE = 57;
    синонім COLON = 58;
    синонім LESS = 60;
    синонім EQUAL = 61;
    синонім GREATER = 62;
    синонім QUESTION_MARK = 63;
    синонім AT = 64;
    синонім OPEN_SQUARE_BRACKET = 91;
    синонім BACKSLASH = 92;
    синонім CLOSE_SQUARE_BRACKET = 93;
    синонім CARET = 94;
    синонім UNDERSCORE = 95;
    синонім GRAVE = 96;
    синонім OPEN_CURLY_BRACKET = 123;
    синонім VERTICAL_BAR = 124;
    синонім CLOSE_CURLY_BRACKET = 125;
    синонім TILDE = 126;
    синонім GREAT_LETTER_А = 1040;
    синонім GREAT_LETTER_Б = 1041;
    синонім GREAT_LETTER_В = 1042;
    синонім GREAT_LETTER_Г = 1043;
    синонім GREAT_LETTER_Д = 1044;
    синонім GREAT_LETTER_Е = 1045;
    синонім GREAT_LETTER_Є = 1028;
    синонім GREAT_LETTER_Ж = 1046;
    синонім GREAT_LETTER_З = 1047;
    синонім GREAT_LETTER_И = 1048;
    синонім GREAT_LETTER_І = 1030;
    синонім GREAT_LETTER_Ї = 1031;
    синонім GREAT_LETTER_Й = 1049;
    синонім GREAT_LETTER_К = 1050;
    синонім GREAT_LETTER_Л = 1051;
    синонім GREAT_LETTER_М = 1052;
    синонім GREAT_LETTER_Н = 1053;
    синонім GREAT_LETTER_О = 1054;
    синонім GREAT_LETTER_П = 1055;
    синонім GREAT_LETTER_Р = 1056;
    синонім GREAT_LETTER_С = 1057;
    синонім GREAT_LETTER_Т = 1058;
    синонім GREAT_LETTER_У = 1059;
    синонім GREAT_LETTER_Ф = 1060;
    синонім GREAT_LETTER_Х = 1061;
    синонім GREAT_LETTER_Ц = 1062;
    синонім GREAT_LETTER_Ч = 1063;
    синонім GREAT_LETTER_Ш = 1064;
    синонім GREAT_LETTER_Щ = 1065;
    синонім GREAT_LETTER_Ь = 1066;
    синонім GREAT_LETTER_Ю = 1067;
    синонім GREAT_LETTER_Я = 1068;
    синонім SMALL_LETTER_а = 1072;
    синонім SMALL_LETTER_б = 1073;
    синонім SMALL_LETTER_в = 1074;
    синонім SMALL_LETTER_г = 1075;
    синонім SMALL_LETTER_д = 1076;
    синонім SMALL_LETTER_е = 1077;
    синонім SMALL_LETTER_є = 1108;
    синонім SMALL_LETTER_ж = 1078;
    синонім SMALL_LETTER_з = 1079;
    синонім SMALL_LETTER_и = 1080;
    синонім SMALL_LETTER_і = 1110;
    синонім SMALL_LETTER_ї = 1111;
    синонім SMALL_LETTER_й = 1081;
    синонім SMALL_LETTER_к = 1082;
    синонім SMALL_LETTER_л = 1083;
    синонім SMALL_LETTER_м = 1084;
    синонім SMALL_LETTER_н = 1085;
    синонім SMALL_LETTER_о = 1086;
    синонім SMALL_LETTER_п = 1087;
    синонім SMALL_LETTER_р = 1088;
    синонім SMALL_LETTER_с = 1089;
    синонім SMALL_LETTER_т = 1090;
    синонім SMALL_LETTER_у = 1091;
    синонім SMALL_LETTER_ф = 1092;
    синонім SMALL_LETTER_х = 1093;
    синонім SMALL_LETTER_ц = 1094;
    синонім SMALL_LETTER_ч = 1095;
    синонім SMALL_LETTER_ш = 1096;
    синонім SMALL_LETTER_щ = 1097;
    синонім SMALL_LETTER_ь = 1098;
    синонім SMALL_LETTER_ю = 1099;
    синонім SMALL_LETTER_я = 1100;
    синонім GREAT_SPECIAL_LETTER_Ґ = 1168;
    синонім GREAT_SPECIAL_LETTER_Ё = 1025;
    синонім GREAT_SPECIAL_LETTER_Ъ = 1066;
    синонім GREAT_SPECIAL_LETTER_Ы = 1067;
    синонім GREAT_SPECIAL_LETTER_Э = 1069;
    синонім SMALL_SPECIAL_LETTER_ґ = 1169;
    синонім SMALL_SPECIAL_LETTER_ё = 1105;
    синонім SMALL_SPECIAL_LETTER_ъ = 1106;
    синонім SMALL_SPECIAL_LETTER_ы = 1107;
    синонім SMALL_SPECIAL_LETTER_э = 1109;
  }

  дія отримати_символ_КД_з_Ю32(символ_32: п32, вихід: адреса<п8>): логічне {
    якщо символ_32 == символи_юнікоду::NEWLINE {
      вихід[0] = символи::МІЖРЯД;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SPACE {
      вихід[0] = символи::МІЖСЛОВО;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::EXCLAMATION_MARK {
      вихід[0] = символи::ЗНАК_ОКЛИКУ;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::DOUBLE_QUOTE {
      вихід[0] = символи::ДВОЛАПКА;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::HASH {
      вихід[0] = символи::РЕШІТКА;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::HRYVNA {
      вихід[0] = символи::ГРИВНЯ;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::PERCENT {
      вихід[0] = символи::ВІДСОТОК;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::AMPERSAND {
      вихід[0] = символи::АМПЕРСАНТ;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SINGLE_QUOTE {
      вихід[0] = символи::ОДНОЛАПКА;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::OPEN_PARENTHESIS {
      вихід[0] = символи::ВІДКРИТА_ДУГА;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::CLOSE_PARENTHESIS {
      вихід[0] = символи::ЗАКРИТА_ДУГА;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::ASTERISK {
      вихід[0] = символи::ЗІРОЧКА;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::PLUS {
      вихід[0] = символи::ПЛЮС;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::COMMA {
      вихід[0] = символи::КОМА;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::MINUS {
      вихід[0] = символи::МІНУС;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::DOT {
      вихід[0] = символи::КРАПКА;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SLASH {
      вихід[0] = символи::КОСА;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::ZERO {
      вихід[0] = символи::НУЛЬ;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::ONE {
      вихід[0] = символи::ОДИН;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::TWO {
      вихід[0] = символи::ДВА;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::THREE {
      вихід[0] = символи::ТРИ;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::FOUR {
      вихід[0] = символи::ЧОТИРИ;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::FIVE {
      вихід[0] = символи::ПʼЯТЬ;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SIX {
      вихід[0] = символи::ШІСТЬ;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SEVEN {
      вихід[0] = символи::СІМ;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::EIGHT {
      вихід[0] = символи::ВІСІМ;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::NINE {
      вихід[0] = символи::ДЕВʼЯТЬ;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::COLON {
      вихід[0] = символи::ДВОКРАПКА;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::LESS {
      вихід[0] = символи::МЕНШЕ;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::EQUAL {
      вихід[0] = символи::РІВНО;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREATER {
      вихід[0] = символи::БІЛЬШЕ;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::QUESTION_MARK {
      вихід[0] = символи::ЗНАК_ПИТАННЯ;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::AT {
      вихід[0] = символи::РАВЛИК;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::OPEN_SQUARE_BRACKET {
      вихід[0] = символи::ВІДКРИТА_КВАДРАТНА_ДУГА;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::BACKSLASH {
      вихід[0] = символи::КОСА;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::CLOSE_SQUARE_BRACKET {
      вихід[0] = символи::ЗАКРИТА_КВАДРАТНА_ДУГА;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::CARET {
      вихід[0] = символи::ПІРАМІДКА;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::UNDERSCORE {
      вихід[0] = символи::ПІРАМІДКА;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GRAVE {
      вихід[0] = символи::АПОСТРОФ;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::OPEN_CURLY_BRACKET {
      вихід[0] = символи::ВІДКРИТА_ФІГУРНА_ДУГА;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::VERTICAL_BAR {
      вихід[0] = символи::ПРЯМА;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::CLOSE_CURLY_BRACKET {
      вихід[0] = символи::ЗАКРИТА_ФІГУРНА_ДУГА;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::TILDE {
      вихід[0] = символи::ТИЛЬДА;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_А {
      вихід[0] = символи::ВЕЛИКА_БУКВА_А;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Б {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Б;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_В {
      вихід[0] = символи::ВЕЛИКА_БУКВА_В;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Г {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Г;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Д {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Д;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Е {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Е;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Є {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Є;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Ж {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Ж;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_З {
      вихід[0] = символи::ВЕЛИКА_БУКВА_З;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_И {
      вихід[0] = символи::ВЕЛИКА_БУКВА_И;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_І {
      вихід[0] = символи::ВЕЛИКА_БУКВА_І;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Ї {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Ї;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Й {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Й;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_К {
      вихід[0] = символи::ВЕЛИКА_БУКВА_К;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Л {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Л;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_М {
      вихід[0] = символи::ВЕЛИКА_БУКВА_М;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Н {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Н;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_О {
      вихід[0] = символи::ВЕЛИКА_БУКВА_О;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_П {
      вихід[0] = символи::ВЕЛИКА_БУКВА_П;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Р {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Р;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_С {
      вихід[0] = символи::ВЕЛИКА_БУКВА_С;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Т {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Т;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_У {
      вихід[0] = символи::ВЕЛИКА_БУКВА_У;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Ф {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Ф;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Х {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Х;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Ц {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Ц;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Ч {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Ч;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Ш {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Ш;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Щ {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Щ;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Ь {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Ь;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Ю {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Ю;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::GREAT_LETTER_Я {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Я;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_а {
      вихід[0] = символи::МАЛА_БУКВА_а;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_б {
      вихід[0] = символи::МАЛА_БУКВА_б;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_в {
      вихід[0] = символи::МАЛА_БУКВА_в;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_г {
      вихід[0] = символи::МАЛА_БУКВА_г;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_д {
      вихід[0] = символи::МАЛА_БУКВА_д;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_е {
      вихід[0] = символи::МАЛА_БУКВА_е;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_є {
      вихід[0] = символи::МАЛА_БУКВА_є;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_ж {
      вихід[0] = символи::МАЛА_БУКВА_ж;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_з {
      вихід[0] = символи::МАЛА_БУКВА_з;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_и {
      вихід[0] = символи::МАЛА_БУКВА_и;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_і {
      вихід[0] = символи::МАЛА_БУКВА_і;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_ї {
      вихід[0] = символи::МАЛА_БУКВА_ї;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_й {
      вихід[0] = символи::МАЛА_БУКВА_й;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_к {
      вихід[0] = символи::МАЛА_БУКВА_к;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_л {
      вихід[0] = символи::МАЛА_БУКВА_л;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_м {
      вихід[0] = символи::МАЛА_БУКВА_м;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_н {
      вихід[0] = символи::МАЛА_БУКВА_н;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_о {
      вихід[0] = символи::МАЛА_БУКВА_о;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_п {
      вихід[0] = символи::МАЛА_БУКВА_п;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_р {
      вихід[0] = символи::МАЛА_БУКВА_р;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_с {
      вихід[0] = символи::МАЛА_БУКВА_с;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_т {
      вихід[0] = символи::МАЛА_БУКВА_т;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_у {
      вихід[0] = символи::МАЛА_БУКВА_у;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_ф {
      вихід[0] = символи::МАЛА_БУКВА_ф;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_х {
      вихід[0] = символи::МАЛА_БУКВА_х;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_ц {
      вихід[0] = символи::МАЛА_БУКВА_ц;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_ч {
      вихід[0] = символи::МАЛА_БУКВА_ч;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_ш {
      вихід[0] = символи::МАЛА_БУКВА_ш;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_щ {
      вихід[0] = символи::МАЛА_БУКВА_щ;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_ь {
      вихід[0] = символи::МАЛА_БУКВА_ь;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_ю {
      вихід[0] = символи::МАЛА_БУКВА_ю;
      вернути так;
    } інакше якщо символ_32 == символи_юнікоду::SMALL_LETTER_я {
      вихід[0] = символи::МАЛА_БУКВА_я;
      вернути так;
    }
    вернути ні;
  }

  дія перекодувати_Ю8_в_КД(вхід: Ю8, розмір: п32, вихід: памʼять<п8>): п32 {
    змінна ціль розмір_виходу: п32 = 0;
    змінна ціль п: п32 = 0;
    поки п < розмір {
      ціль перший_байт = вхід[п];
      ціль розмір_символа = дізнатись_розмір_символа_юнікоду(перший_байт);
      якщо розмір_символа == 2 {
        п += 1;
        ціль другий_байт = вхід[п];
        ціль символ_Ю16 = п16((п16(перший_байт & 31) << 6) | п16(другий_байт & 63));
        ціль символ_КД: п8 = 0;
        ціль успіх_отримання_КД_з_Ю32 = отримати_символ_КД_з_Ю32(символ_Ю16 як п32, символ_КД::адреса);
        якщо успіх_отримання_КД_з_Ю32 == ні {
          вернути 0;
        }
        вихід[розмір_виходу] = символ_КД;
        розмір_виходу += 1;
      } інакше {
        вернути 0;
      }
      п += 1;
    }
    вернути розмір_виходу;
  }

  дія отримати_Ю8_з_КД(символ_КД: п8, перший_байт: адреса<п8>, другий_байт: адреса<п8>): логічне {
    перший_байт[0] = 0;
    другий_байт[0] = 0;
    вернути так;
  }

  дія перекодувати_КД_в_Ю8(вхід: памʼять<п8>, розмір: п32, вихід: Ю8): п32 {
    змінна ціль розмір_виходу: п32 = 0;
    змінна ціль п: п32 = 0;
    поки п < розмір {
      ціль символ_КД = вхід[п];
      ціль перший_байт: п8;
      ціль другий_байт: п8;
      ціль успіх_отримання_Ю8_з_КД = отримати_Ю8_з_КД(символ_КД, перший_байт::адреса, другий_байт::адреса);
      якщо успіх_отримання_Ю8_з_КД == ні {
        вернути 0;
      }
      вихід[розмір_виходу] = перший_байт;
      розмір_виходу += 1;
      вихід[розмір_виходу] = другий_байт;
      розмір_виходу += 1;
      п += 1;
    }
    вернути розмір_виходу;
  }

  синонім ПЕРШИЙ_СИМВОЛ_ВИДИМХ = 6;
  синонім ОСТАННІЙ_СИМВОЛ_ВИДИМХ = 122;
}