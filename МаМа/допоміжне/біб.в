////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

зовнішня дія mama_malloc(size: size_t): адреса;
зовнішня дія mama_free(ptr: адреса);
зовнішня дія mama_realloc(ptr: адреса, size: size_t): адреса;
зовнішня дія mama_exit(status: int);
зовнішня дія mama_floor(value: double): double;
зовнішня дія mama_pow(base: double, exponent: double): double;
зовнішня дія mama_convert_utf32_to_utf8(input: адреса<unsigned_int>): адреса<unsigned_char>;
зовнішня дія mama_print_utf8(value: адреса<unsigned_char>);
зовнішня дія mama_println_utf8(value: адреса<unsigned_char>);
зовнішня дія mama_bitnot(value: long): long;
зовнішня дія mama_negate(value: double): double;
зовнішня дія mama_double_to_string(value: double, buffer: адреса): size_t;

секція МаМа {
  синонім памʼять = адреса;

  дія виділити<Т>(): адреса<Т>;
  дія виділити<Т>(кількість: ц32): памʼять<Т>;
  дія перевиділити<Т>(значення: адреса<Т>, кількість: ц32): памʼять<Т>;
  дія звільнити(значення: адреса);

  дія виділити<Т>(): адреса<Т> {
    вернути mama_malloc(Т.розмір як size_t) як адреса<Т>;
  }

  дія виділити<Т>(кількість: ц32): памʼять<Т> {
    вернути mama_malloc(кількість як size_t * Т.розмір) як памʼять<Т>;
  }

  дія перевиділити<Т>(значення: адреса<Т>, кількість: ц32): памʼять<Т> {
    вернути mama_realloc(значення, кількість як size_t * Т.розмір) як памʼять<Т>;
  }

  дія звільнити(значення: адреса) {
    mama_free(значення);
  }

  дія порахувати_розмір_КД(значення: адреса<п8>): позитивне {
    змінна ціль довжина: позитивне = 0;
    поки значення[довжина] != 0 {
      довжина += 1;
    }
    вернути довжина;
  }

  дія порахувати_розмір_Ю8(значення: адреса<п8>): позитивне {
    змінна ціль довжина: позитивне = 0;
    поки значення[довжина] != 0 {
      довжина += 1;
    }
    вернути довжина;
  }

  дія порахувати_розмір_Ю32(значення: адреса<п32>): позитивне {
    змінна ціль довжина: позитивне = 0;
    поки значення[довжина] != 0 {
      довжина += 1;
    }
    вернути довжина;
  }

  синонім Ю8 = памʼять<п8>;
  синонім Ю16 = памʼять<п16>;
  синонім Ю32 = памʼять<п32>;

  місцева дія порівняти_КД(а: памʼять<п8>, б: памʼять<п8>): ціле;
  місцева дія порівняти_Ю8(а: Ю8, б: Ю8): ціле;
  місцева дія порівняти_Ю32(а: Ю32, б: Ю32): ціле;

  місцева дія вивести_ю8(значення: Ю8);
  місцева дія надрукувати_ю8(значення: Ю8);

  місцева дія перетворити_д64_в_Ю8(значення: д64, вихід: адреса<Ю8>): позитивне;
  місцева дія перетворити_п64_в_ю8(значення: п64): Ю8;

  дія ПОМЕРТИ(повідомлення: Ю8) {
    вивести_ю8(ю8"ПРИЧИНА СМЕРТІ: ");
    надрукувати_ю8(повідомлення);
    mama_exit(1);
  }

  дія перетворити_д64_в_ю8(значення: д64): Ю8 {
    вернути перетворити_п64_в_ю8(п64(значення)); // потім: пофіксати
  }

  дія вивести_п64(значення: п64) {
    ціль п64ю8 = перетворити_п64_в_ю8(значення);
    вивести_ю8(п64ю8);
    звільнити(п64ю8);
  }

  дія надрукувати_п64(значення: п64) {
    ціль п64ю8 = перетворити_п64_в_ю8(значення);
    надрукувати_ю8(п64ю8);
    звільнити(п64ю8);
  }

  дія вивести_д64(значення: д64) {
    ціль д64ю8: Ю8 = пусто;
    якщо перетворити_д64_в_Ю8(значення, д64ю8::адреса) == 0 {
      ПОМЕРТИ(ю8"Помилка при конвертації дійсного числа в рядок");
    }
    вивести_ю8(д64ю8);
    звільнити(д64ю8);
  }

  дія надрукувати_д64(значення: д64) {
    ціль д64ю8: Ю8 = пусто;
    якщо перетворити_д64_в_Ю8(значення, д64ю8::адреса) == 0 {
      ПОМЕРТИ(ю8"Помилка при конвертації дійсного числа в рядок");
    }
    надрукувати_ю8(д64ю8);
    звільнити(д64ю8);
  }

  дія fmod(a: д64, b: д64): д64 {
    вернути a - (a / b) * b;
  }

  місцева дія перевірити_чи_ю8_рівні(а: Ю8, б: Ю8): логічне;
  місцева дія виділити_копію_КД(вхід: памʼять<п8>, розмір_входу: позитивне, вихід: адреса<памʼять<п8>>): логічне;
  місцева дія виділити_копію_Ю8(вхід: Ю8, розмір_входу: позитивне, вихід: адреса<Ю8>): логічне;
  місцева дія виділити_копію_Ю32(вхід: Ю32, розмір_входу: позитивне, вихід: адреса<Ю32>): логічне;
  місцева дія дізнатись_розмір_символа_юнікоду(перший_байт: п8): п8;
  місцева дія перекодувати_Ю8_в_Ю32(вхід: Ю8, розмір_входу: позитивне, адреса_виходу: адреса<Ю32>): позитивне;
  місцева дія перекодувати_Ю32_в_Ю8(вхід: Ю32, розмір_входу: позитивне, адреса_виходу: адреса<Ю8>): позитивне;
}