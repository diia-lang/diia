////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  місцева дія надрукувати_обʼєкт(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, глибина: позитивне) {
    ціль накопичувач_ю8 = зробити_накопичувач_ю8();
    надрукувати_обʼєкт_в_накопичувач_ю8(обʼєкт, М, накопичувач_ю8::адреса, глибина);
    ціль ю8 = виділити_ю8_з_накопичувача_ю8(накопичувач_ю8::адреса);
    звільнити_значення_накопичувача_ю8(накопичувач_ю8);
    надрукувати_ю8(ю8);
    звільнити(ю8);
  }

  місцева дія надрукувати_обʼєкт_в_накопичувач_ю8(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    якщо обʼєкт == пусто {
      покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"пусто");
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      надрукувати_обʼєкт_числа_в_накопичувач_ю8(обʼєкт як адреса<ОбʼєктЧисла>, М, накопичувач_ю8, глибина);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      надрукувати_обʼєкт_тексту_в_накопичувач_ю8(обʼєкт як адреса<ОбʼєктТексту>, М, накопичувач_ю8, глибина);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      надрукувати_обʼєкт_дії_в_накопичувач_ю8(обʼєкт як адреса<ОбʼєктДії>, М, накопичувач_ю8, глибина);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      надрукувати_обʼєкт_нативної_дії_в_накопичувач_ю8(обʼєкт як адреса<ОбʼєктНативноїДії>, М, накопичувач_ю8, глибина);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      надрукувати_обʼєкт_структури_в_накопичувач_ю8(обʼєкт як адреса<ОбʼєктСтруктури>, М, накопичувач_ю8, глибина);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      надрукувати_обʼєкт_модуля_в_накопичувач_ю8(обʼєкт як адреса<ОбʼєктМодуля>, М, накопичувач_ю8, глибина);
    } інакше {
      покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"обʼєкт");
//      якщо обʼєкт.тип != пусто {
//        якщо обʼєкт.тип.назва != пусто {
//          покласти_в_накопичувач_ю8(накопичувач_ю8, обʼєкт.тип.назва.значення);
//        }
//      }
//      покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"(");
//      змінна ціль пв: позитивне = 0;
//      поки пв < обʼєкт.властивості.розмір {
//        покласти_в_накопичувач_ю8(накопичувач_ю8, обʼєкт.властивості.елементи[пв].ключ.значення);
//        покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"=");
//        надрукувати_обʼєкт_в_накопичувач_ю8(М, накопичувач_ю8, обʼєкт.властивості.елементи[пв].значення, глибина + 1);
//        якщо пв + 1 < обʼєкт.властивості.розмір {
//          покласти_в_накопичувач_ю8(накопичувач_ю8, ю8", ");
//        }
//        пв = пв + 1;
//      }
//      покласти_в_накопичувач_ю8(накопичувач_ю8, ю8")");
    }
  }

  місцева дія звільнити_обʼєкт(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>) {
    вивести_ю8(ю8"[МАВКА] звільнюємо обʼєкт ");
    надрукувати_обʼєкт(обʼєкт, М, 0);
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      звільнити_обʼєкт_структури(обʼєкт як адреса<ОбʼєктСтруктури>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      звільнити_обʼєкт_дії(обʼєкт як адреса<ОбʼєктДії>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      звільнити_обʼєкт_нативної_дії(обʼєкт як адреса<ОбʼєктНативноїДії>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      звільнити_обʼєкт_числа(обʼєкт як адреса<ОбʼєктЧисла>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      звільнити_обʼєкт_тексту(обʼєкт як адреса<ОбʼєктТексту>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
//      звільнити_обʼєкт_модуля(обʼєкт як адреса<ОбʼєктМодуля>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
//      звільнити_обʼєкт_списку(обʼєкт як адреса<ОбʼєктСписку>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
//      звільнити_обʼєкт_словника(обʼєкт як адреса<ОбʼєктСловника>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
//      звільнити_обʼєкт_логічного(обʼєкт як адреса<ОбʼєктЛогічного>, М);
    } інакше {
      звільнити_складений_обʼєкт(обʼєкт як адреса<СкладенийОбʼєкт>, М);
    }
  }

  місцева дія обʼєкт_є(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне {
    якщо обʼєкт == пусто {
      якщо обʼєкт_структури == пусто {
        вернути так;
      }
      вернути ні;
    }
    якщо обʼєкт_структури == пусто {
      вернути ні;
    }
    змінна ціль тип = обʼєкт.тип;
    поки тип != пусто {
      якщо тип == обʼєкт_структури {
        вернути так;
      }
      тип = тип.предок;
    }
    вернути ні;
  }

  місцева дія обʼєкт_може_бути_так(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): логічне {
    якщо обʼєкт == пусто {
      вернути ні;
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_число {
      ціль обʼєкт_числа = обʼєкт як адреса<ОбʼєктЧисла>;
      якщо обʼєкт_числа.значення == 0.0 {
        вернути ні;
      }
    }
    // потім: перевірити ще логічне і можливо текст
    вернути так;
  }

  місцева дія обʼєкт_отримати_властивість(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, назва: адреса<Назва>): адреса<Обʼєкт> {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Намагаються отримати властивість з пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      ціль обʼєкт_структури = обʼєкт як адреса<ОбʼєктСтруктури>;
      ціль елемент_реєстру = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.властивості::адреса, назва);
      якщо елемент_реєстру != пусто {
        вернути елемент_реєстру.значення;
      }
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      ціль обʼєкт_дії = обʼєкт як адреса<ОбʼєктДії>;
      ціль елемент_реєстру = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_дії.властивості::адреса, назва);
      якщо елемент_реєстру != пусто {
        вернути елемент_реєстру.значення;
      }
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      ціль обʼєкт_нативної_дії = обʼєкт як адреса<ОбʼєктНативноїДії>;
      ціль елемент_реєстру = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_нативної_дії.властивості::адреса, назва);
      якщо елемент_реєстру != пусто {
        вернути елемент_реєстру.значення;
      }
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      ціль обʼєкт_числа = обʼєкт як адреса<ОбʼєктЧисла>;
      змінна ціль тип = обʼєкт_числа.тип;
      поки тип != пусто {
        ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(тип.методи::адреса, назва);
        якщо елемент_реєстру_методів != пусто {
          вернути елемент_реєстру_методів.значення;
        }
        тип = тип.предок;
      }
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      ціль обʼєкт_тексту = обʼєкт як адреса<ОбʼєктТексту>;
      змінна ціль тип = обʼєкт_тексту.тип;
      поки тип != пусто {
        ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(тип.методи::адреса, назва);
        якщо елемент_реєстру_методів != пусто {
          вернути елемент_реєстру_методів.значення;
        }
        тип = тип.предок;
      }
    } інакше {
      ціль складений_обʼєкт = обʼєкт як адреса<СкладенийОбʼєкт>;
      ціль елемент_реєстру = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(складений_обʼєкт.властивості::адреса, назва);
      якщо елемент_реєстру != пусто {
        вернути елемент_реєстру.значення;
      }
      змінна ціль тип = складений_обʼєкт.тип;
      поки тип != пусто {
        ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(тип.методи::адреса, назва);
        якщо елемент_реєстру_методів != пусто {
          вернути елемент_реєстру_методів.значення;
        }
        тип = тип.предок;
      }
    }
    вернути пусто;
  }

  місцева дія обʼєкт_змінити_властивість(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо змінити властивість пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      ціль обʼєкт_структури = обʼєкт як адреса<ОбʼєктСтруктури>;
      змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.властивості::адреса, назва, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      ціль обʼєкт_дії = обʼєкт як адреса<ОбʼєктДії>;
      змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_дії.властивості::адреса, назва, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      ціль обʼєкт_нативної_дії = обʼєкт як адреса<ОбʼєктНативноїДії>;
      змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_нативної_дії.властивості::адреса, назва, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
    } інакше {
      ціль складений_обʼєкт = обʼєкт як адреса<СкладенийОбʼєкт>;
      якщо складений_обʼєкт.тип != пусто {
        змінна ціль елемент_параметра: адреса<ЕлементРеєстру<адреса<Назва>, Параметр>> = пусто;
        змінна ціль пп: позитивне = 0;
        поки пп < складений_обʼєкт.тип.параметри.розмір {
          якщо strcmp(складений_обʼєкт.тип.параметри.елементи[пп].ключ.значення, назва.значення) == 0 {
            елемент_параметра = складений_обʼєкт.тип.параметри.елементи[пп]::адреса;
          }
          пп += 1;
        }
        якщо елемент_параметра != пусто {
          змінна ціль знайдено = ні;
          змінна ціль пт: позитивне = 0;
          поки пт < елемент_параметра.значення.типи.розмір {
            ціль тип = елемент_параметра.значення.типи.дані[пт];
            якщо обʼєкт_є(аргумент, М, тип) {
              знайдено = так;
            }
            пт += 1;
          }
          якщо знайдено == ні {
            увімкнути_стан_падіння(М, пусто);
            якщо аргумент == пусто {
              вернути виділити_обʼєкт_тексту_помилки_невірний_тип_аргумента(М, елемент_параметра.ключ.значення, елемент_параметра.значення.типи, пусто);
            } інакше {
              вернути виділити_обʼєкт_тексту_помилки_невірний_тип_аргумента(М, елемент_параметра.ключ.значення, елемент_параметра.значення.типи, аргумент.тип);
            }
          }
        }
      }
      змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(складений_обʼєкт.властивості::адреса, назва, аргумент);
    }
    вернути пусто;
  }

  місцева дія обʼєкт_додати(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо додати пусто") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_чародії = обʼєкт_отримати_властивість(обʼєкт, М, М.БН.С.чародія_додати);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Вітання ви не можете додати це") як адреса<Обʼєкт>;
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_відняти(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо відняти пусто") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_чародії = обʼєкт_отримати_властивість(обʼєкт, М, М.БН.С.чародія_відняти);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Вітання ви не можете відняти це") як адреса<Обʼєкт>;
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_помножити(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо помножити пусто") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_чародії = обʼєкт_отримати_властивість(обʼєкт, М, М.БН.С.чародія_помножити);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Вітання ви не можете помножити це") як адреса<Обʼєкт>;
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_поділити(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо поділити пусто") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_чародії = обʼєкт_отримати_властивість(обʼєкт, М, М.БН.С.чародія_поділити);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Вітання ви не можете поділити це") як адреса<Обʼєкт>;
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_поділити_за_модулем(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо поділити за модулем пусто") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_чародії = обʼєкт_отримати_властивість(обʼєкт, М, М.БН.С.чародія_поділити_за_модулем);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Вітання ви не можете поділити за модулем це") як адреса<Обʼєкт>;
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_зсунути_вліво(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо зсунути вліво пусто") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_чародії = обʼєкт_отримати_властивість(обʼєкт, М, М.БН.С.чародія_зсунути_вліво);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Вітання ви не можете зсунути вліво це") як адреса<Обʼєкт>;
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_зсунути_вправо(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо зсунути вправо пусто") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_чародії = обʼєкт_отримати_властивість(обʼєкт, М, М.БН.С.чародія_зсунути_вправо);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Вітання ви не можете зсунути вправо це") як адреса<Обʼєкт>;
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_зсунути_вправо_знаково(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо зсунути вправо знаково пусто") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_чародії = обʼєкт_отримати_властивість(обʼєкт, М, М.БН.С.чародія_зсунути_вправо_знаково);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Вітання ви не можете зсунути вправо знаково це") як адреса<Обʼєкт>;
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_більше(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо більше пусто") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_чародії = обʼєкт_отримати_властивість(обʼєкт, М, М.БН.С.чародія_більше);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Вітання ви не можете більше це") як адреса<Обʼєкт>;
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_менше(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо менше пусто") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_чародії = обʼєкт_отримати_властивість(обʼєкт, М, М.БН.С.чародія_менше);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Вітання ви не можете менше це") як адреса<Обʼєкт>;
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_не_більше(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо не більше пусто") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_чародії = обʼєкт_отримати_властивість(обʼєкт, М, М.БН.С.чародія_не_більше);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Вітання ви не можете не більше це") як адреса<Обʼєкт>;
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_не_менше(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо не менше пусто") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_чародії = обʼєкт_отримати_властивість(обʼєкт, М, М.БН.С.чародія_не_менше);
    якщо обʼєкт_чародії == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Вітання ви не можете не менше це") як адреса<Обʼєкт>;
    }
    ціль аргументи = зробити_накопичувач<адреса<Обʼєкт>>();
    покласти_в_накопичувач<адреса<Обʼєкт>>(аргументи::адреса, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії, М, обʼєкт, аргументи::адреса, пусто);
    звільнити_значення_накопичувача<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_рівно(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо перевірити_чи_обʼєкти_рівні_краще(обʼєкт, аргумент, М) {
      вернути М.обʼєкт_логічного_так;
    }
    вернути М.обʼєкт_логічного_ні;
  }

  місцева дія обʼєкт_не_рівно(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо перевірити_чи_обʼєкти_рівні_краще(обʼєкт, аргумент, М) {
      вернути М.обʼєкт_логічного_ні;
    }
    вернути М.обʼєкт_логічного_так;
  }

  місцева дія обʼєкт_виконати(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_виконати(обʼєкт як адреса<ОбʼєктСтруктури>, М, аргументи, іменовані_аргументи);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_виконати(обʼєкт як адреса<ОбʼєктДії>, М, обʼєкт_я, аргументи, іменовані_аргументи);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_виконати(обʼєкт як адреса<ОбʼєктНативноїДії>, М, обʼєкт_я, аргументи, іменовані_аргументи);
    }
    ціль обʼєкт_чародії_виконати = обʼєкт_отримати_властивість(обʼєкт, М, М.БН.С.чародія_виконати);
    якщо обʼєкт_чародії_виконати == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Вітання ви не можете виконати це") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_виконати(обʼєкт_чародії_виконати, М, обʼєкт_я, аргументи, іменовані_аргументи);
  }
}