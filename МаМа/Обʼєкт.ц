взяти визначення МаМа;

секція МаМа {
  місцева дія надрукувати_обʼєкт(М: адреса<Машина>, обʼєкт: адреса<Обʼєкт>, глибина: позитивне) {
    ціль буфер_ю8 = зробити_буфер_ю8();
    надрукувати_обʼєкт_в_буфер_ю8(М, буфер_ю8::адреса, обʼєкт, глибина);
    ціль ю8 = виділити_ю8_з_буфера(буфер_ю8::адреса);
    звільнити_значення_буфера_ю8(буфер_ю8);
    надрукувати_ю8(ю8);
    звільнити(ю8);
  }

  місцева дія надрукувати_обʼєкт_в_буфер_ю8(М: адреса<Машина>, буфер_ю8: адреса<БуферЮ8>, обʼєкт: адреса<Обʼєкт>, глибина: позитивне) {
    якщо обʼєкт == пусто {
      додати_до_буфера_ю8(буфер_ю8, ю8"пусто");
    } інакше якщо обʼєкт.обʼєкт_структури == М.обʼєкт_структури_число {
      надрукувати_обʼєкт_числа_в_буфер_ю8(М, буфер_ю8, обʼєкт, глибина);
    } інакше якщо обʼєкт.обʼєкт_структури == М.обʼєкт_структури_текст {
      надрукувати_обʼєкт_тексту_в_буфер_ю8(М, буфер_ю8, обʼєкт, глибина);
    } інакше якщо обʼєкт.обʼєкт_структури == М.обʼєкт_структури_НативнаДія {
      надрукувати_обʼєкт_нативної_дії_в_буфер_ю8(М, буфер_ю8, обʼєкт, глибина);
    } інакше якщо обʼєкт.обʼєкт_структури == М.обʼєкт_структури_Структура {
      надрукувати_обʼєкт_структури_в_буфер_ю8(М, буфер_ю8, обʼєкт, глибина);
    } інакше {
      якщо обʼєкт.обʼєкт_структури != пусто {
        синонім дані_структури = обʼєкт.обʼєкт_структури.дані як ДаніОбʼєктаСтруктури;
        якщо дані_структури.назва != пусто {
          додати_до_буфера_ю8(буфер_ю8, дані_структури.назва.значення);
        }
      }
      додати_до_буфера_ю8(буфер_ю8, ю8"(");
      змінна ціль пв: позитивне = 0;
      поки пв < обʼєкт.властивості.розмір {
        додати_до_буфера_ю8(буфер_ю8, обʼєкт.властивості.елементи[пв].ключ.значення);
        додати_до_буфера_ю8(буфер_ю8, ю8"=");
        надрукувати_обʼєкт_в_буфер_ю8(М, буфер_ю8, обʼєкт.властивості.елементи[пв].значення, глибина + 1);
        якщо пв + 1 < обʼєкт.властивості.розмір {
          додати_до_буфера_ю8(буфер_ю8, ю8", ");
        }
        пв = пв + 1;
      }
      додати_до_буфера_ю8(буфер_ю8, ю8")");
    }
  }

  місцева дія отримати_властивість(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, назва: адреса<Назва>): адреса<Обʼєкт> {
    ціль елемент_властивості = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт.властивості::адреса, назва);
    якщо елемент_властивості == пусто {
      змінна ціль обʼєкт_структури = обʼєкт.обʼєкт_структури;
      поки обʼєкт_структури != пусто {
        синонім дані_структури = обʼєкт_структури.дані як ДаніОбʼєктаСтруктури;
        ціль елемент_методу = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(дані_структури.методи::адреса, назва);
        якщо елемент_методу != пусто {
          вернути елемент_методу.значення;
        }
        обʼєкт_структури = дані_структури.предок;
      }
      вернути пусто;
    }
    вернути елемент_властивості.значення;
  }

  місцева дія змінити_властивість(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, назва: адреса<Назва>, значення: адреса<Обʼєкт>) {
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт.властивості::адреса, назва, значення);
  }

  місцева дія обʼєкт_додати(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, середовище: адреса<Середовище>, аргумент: адреса<Обʼєкт>): адреса_або_стан_помилки<Обʼєкт> {
    якщо обʼєкт == пусто {
      увімкнути_стан_помилки(М);
      вернути виділити_обʼєкт_тексту_помилки_чародію_не_знайдено(М, ю8"чародія_додати", обʼєкт);
    }
    ціль обʼєкт_чародії_додати = отримати_властивість(обʼєкт, М, М.БН.С.чародія_додати);
    якщо обʼєкт_чародії_додати == пусто {
      увімкнути_стан_помилки(М);
      вернути виділити_обʼєкт_тексту_помилки_чародію_не_знайдено(М, ю8"чародія_додати", обʼєкт);
    }
    ціль аргументи = виділити_вектор<адреса<Обʼєкт>>();
    додати_до_вектору<адреса<Обʼєкт>>(аргументи, аргумент);
    ціль результат_виконання = обʼєкт_виконати(обʼєкт_чародії_додати, М, середовище, обʼєкт, аргументи, пусто);
    звільнити_вектор<адреса<Обʼєкт>>(аргументи);
    вернути результат_виконання;
  }

  місцева дія обʼєкт_виконати(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, середовище: адреса<Середовище>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Вектор<адреса<Обʼєкт>>>, аргументи_з_назвами: адреса_або_пусто<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): адреса_або_стан_помилки<Обʼєкт> {
    якщо обʼєкт == пусто {
      увімкнути_стан_помилки(М);
      вернути виділити_обʼєкт_тексту_помилки_чародію_не_знайдено(М, ю8"чародія_виконати", обʼєкт);
    }
    якщо обʼєкт.обʼєкт_структури == М.обʼєкт_структури_НативнаДія {
      покласти_в_накопичувач<ІсторіяВиконання>(М.накопичувач_історії_виконання::адреса, ІсторіяВиконання {
        обʼєкт_дії = обʼєкт,
        середовище = пусто,
      });
      ціль результат_виконання_нативної_дії = обʼєкт_нативної_дії_виконати(обʼєкт, М, середовище, обʼєкт_я, аргументи, аргументи_з_назвами);
      якщо М.стан_помилки {
        вернути результат_виконання_нативної_дії;
      }
      забрати_з_накопичувача<ІсторіяВиконання>(М.накопичувач_історії_виконання::адреса);
      вернути результат_виконання_нативної_дії;
    }
    якщо обʼєкт.обʼєкт_структури == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_виконати(обʼєкт, М, середовище, обʼєкт_я, аргументи, аргументи_з_назвами);
    }
    якщо обʼєкт.обʼєкт_структури == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_виконати(обʼєкт, М, середовище, аргументи, аргументи_з_назвами);
    }
    ціль обʼєкт_чародії_виконати = отримати_властивість(обʼєкт, М, М.БН.С.чародія_виконати);
    якщо обʼєкт_чародії_виконати == пусто {
      увімкнути_стан_помилки(М);
      вернути виділити_обʼєкт_тексту_помилки_чародію_не_знайдено(М, ю8"чародія_виконати", обʼєкт);
    }
    вернути обʼєкт_виконати(обʼєкт_чародії_виконати, М, середовище, обʼєкт, аргументи, аргументи_з_назвами);
  }

  місцева дія виділити_обʼєкт(М: адреса<Машина>, обʼєкт_структури: адреса<Обʼєкт>): адреса<Обʼєкт> {
    ціль обʼєкт = виділити<Обʼєкт>();
    обʼєкт.наступний_обʼєкт = М.утилізатор.початок_обʼєктів;
    обʼєкт.позначено = ні;
    обʼєкт.обʼєкт_структури = обʼєкт_структури;
    обʼєкт.властивості = зробити_реєстр<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні);
    М.утилізатор.початок_обʼєктів = обʼєкт;
    М.утилізатор.кількість_обʼєктів = М.утилізатор.кількість_обʼєктів + 1;
//    вивести_ю8(ю8"виділено обʼєкт структури ");
//    якщо обʼєкт_структури == пусто {
//      надрукувати_ю8(ю8"пусто");
//    } інакше {
//      надрукувати_ю8((обʼєкт_структури.дані як ДаніОбʼєктаСтруктури).назва.значення);
//    }
    вернути обʼєкт;
  }

  місцева дія звільнити_обʼєкт(М: адреса<Машина>, обʼєкт: адреса<Обʼєкт>) {
//    вивести_ю8(ю8"звільняємо обʼєкт ");
//    надрукувати_обʼєкт(М, обʼєкт, 1);
    звільнити_значення_реєстру<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт.властивості);
    якщо обʼєкт.обʼєкт_структури == М.обʼєкт_структури_Структура {
      синонім дані = обʼєкт.дані як ДаніОбʼєктаСтруктури;
      змінна ціль пп: позитивне = 0;
      поки пп < дані.параметри.розмір {
        ціль параметр = дані.параметри.елементи[пп].значення;
        звільнити_значення_накопичувача<адреса<Обʼєкт>>(параметр.типи);
        пп = пп + 1;
      }
      звільнити_реєстр<адреса<Назва>, Параметр>(дані.параметри);
      звільнити_значення_реєстру<адреса<Назва>, адреса<Обʼєкт>>(дані.методи);
    } інакше якщо обʼєкт.обʼєкт_структури == М.обʼєкт_структури_Дія {
      синонім дані = обʼєкт.дані як ДаніОбʼєктаДії;
      змінна ціль пп: позитивне = 0;
      поки пп < дані.параметри.розмір {
        ціль параметр = дані.параметри.елементи[пп].значення;
        звільнити_значення_накопичувача<адреса<Обʼєкт>>(параметр.типи);
        пп = пп + 1;
      }
      звільнити_реєстр<адреса<Назва>, Параметр>(дані.параметри);
    }
    звільнити(обʼєкт);
  }

  місцева дія перевірити_чи_обʼєкт_є(М: адреса<Машина>, обʼєкт: адреса<Обʼєкт>, обʼєкт_структури: адреса<Обʼєкт>): логічне {
    якщо обʼєкт == пусто {
      якщо обʼєкт_структури == пусто {
        вернути так;
      }
      вернути ні;
    }
    якщо обʼєкт.обʼєкт_структури == обʼєкт_структури {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_обʼєкт_так(М: адреса<Машина>, обʼєкт: адреса<Обʼєкт>): логічне {
    якщо обʼєкт == пусто {
      вернути ні;
    }
    якщо обʼєкт.обʼєкт_структури == М.обʼєкт_структури_число {
      якщо обʼєкт.дані як д64 == 0.0д64 {
        вернути ні;
      }
    }
    вернути так;
  }
}