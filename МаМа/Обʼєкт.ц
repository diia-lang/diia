////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  // мітка: прохід по типах обʼєктів
  місцева дія звільнити_обʼєкт(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>) {
//    вивести_ю8(ю8"[МАВКА] звільнюємо обʼєкт ");
//    надрукувати_обʼєкт(обʼєкт, М, 0);
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      звільнити_обʼєкт_структури(обʼєкт як адреса<ОбʼєктСтруктури>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      звільнити_обʼєкт_дії(обʼєкт як адреса<ОбʼєктДії>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      звільнити_обʼєкт_нативної_дії(обʼєкт як адреса<ОбʼєктНативноїДії>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      звільнити_обʼєкт_числа(обʼєкт як адреса<ОбʼєктЧисла>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      звільнити_обʼєкт_тексту(обʼєкт як адреса<ОбʼєктТексту>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      звільнити_обʼєкт_юнікоду(обʼєкт як адреса<ОбʼєктЮнікоду>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      звільнити_обʼєкт_модуля(обʼєкт як адреса<ОбʼєктМодуля>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      звільнити_обʼєкт_списку(обʼєкт як адреса<ОбʼєктСписку>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      звільнити_обʼєкт_словника(обʼєкт як адреса<ОбʼєктСловника>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      звільнити_обʼєкт_логічного(обʼєкт як адреса<ОбʼєктЛогічного>, М);
    } інакше {
      звільнити_складений_обʼєкт(обʼєкт як адреса<СкладенийОбʼєкт>, М);
    }
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_виконати(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_виконати(обʼєкт як адреса<ОбʼєктСтруктури>, М, обʼєкт_я, аргументи, іменовані_аргументи);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_виконати(обʼєкт як адреса<ОбʼєктДії>, М, обʼєкт_я, аргументи, іменовані_аргументи);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_виконати(обʼєкт як адреса<ОбʼєктНативноїДії>, М, обʼєкт_я, аргументи, іменовані_аргументи);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_виконати(обʼєкт як адреса<ОбʼєктЧисла>, М, обʼєкт_я, аргументи, іменовані_аргументи);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_виконати(обʼєкт як адреса<ОбʼєктТексту>, М, обʼєкт_я, аргументи, іменовані_аргументи);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_виконати(обʼєкт як адреса<ОбʼєктЮнікоду>, М, обʼєкт_я, аргументи, іменовані_аргументи);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_виконати(обʼєкт як адреса<ОбʼєктМодуля>, М, обʼєкт_я, аргументи, іменовані_аргументи);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_виконати(обʼєкт як адреса<ОбʼєктСписку>, М, обʼєкт_я, аргументи, іменовані_аргументи);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_виконати(обʼєкт як адреса<ОбʼєктСловника>, М, обʼєкт_я, аргументи, іменовані_аргументи);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_виконати(обʼєкт як адреса<ОбʼєктЛогічного>, М, обʼєкт_я, аргументи, іменовані_аргументи);
    }
    вернути складений_обʼєкт_виконати(обʼєкт як адреса<СкладенийОбʼєкт>, М, обʼєкт_я, аргументи, іменовані_аргументи);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_отримати_властивість(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, назва: адреса<Назва>): адреса<Обʼєкт> {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_отримати_властивість_з_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_отримати_властивість(обʼєкт як адреса<ОбʼєктСтруктури>, М, назва);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_отримати_властивість(обʼєкт як адреса<ОбʼєктДії>, М, назва);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_отримати_властивість(обʼєкт як адреса<ОбʼєктНативноїДії>, М, назва);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_отримати_властивість(обʼєкт як адреса<ОбʼєктЧисла>, М, назва);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_отримати_властивість(обʼєкт як адреса<ОбʼєктТексту>, М, назва);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_отримати_властивість(обʼєкт як адреса<ОбʼєктЮнікоду>, М, назва);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_отримати_властивість(обʼєкт як адреса<ОбʼєктМодуля>, М, назва);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_отримати_властивість(обʼєкт як адреса<ОбʼєктСписку>, М, назва);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_отримати_властивість(обʼєкт як адреса<ОбʼєктСловника>, М, назва);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_отримати_властивість(обʼєкт як адреса<ОбʼєктЛогічного>, М, назва);
    }
    вернути складений_обʼєкт_отримати_властивість(обʼєкт як адреса<СкладенийОбʼєкт>, М, назва);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_змінити_властивість(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_змінити_властивість_в_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_змінити_властивість(обʼєкт як адреса<ОбʼєктСтруктури>, М, назва, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_змінити_властивість(обʼєкт як адреса<ОбʼєктДії>, М, назва, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_змінити_властивість(обʼєкт як адреса<ОбʼєктНативноїДії>, М, назва, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_змінити_властивість(обʼєкт як адреса<ОбʼєктЧисла>, М, назва, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_змінити_властивість(обʼєкт як адреса<ОбʼєктТексту>, М, назва, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_змінити_властивість(обʼєкт як адреса<ОбʼєктЮнікоду>, М, назва, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_змінити_властивість(обʼєкт як адреса<ОбʼєктМодуля>, М, назва, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_змінити_властивість(обʼєкт як адреса<ОбʼєктСписку>, М, назва, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_змінити_властивість(обʼєкт як адреса<ОбʼєктСловника>, М, назва, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_змінити_властивість(обʼєкт як адреса<ОбʼєктЛогічного>, М, назва, аргумент);
    }
    вернути складений_обʼєкт_змінити_властивість(обʼєкт як адреса<СкладенийОбʼєкт>, М, назва, аргумент);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_виконати_властивість(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_виконати_властивість(обʼєкт як адреса<ОбʼєктСтруктури>, М, назва_властивості, аргументи, іменовані_аргументи);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_виконати_властивість(обʼєкт як адреса<ОбʼєктДії>, М, назва_властивості, аргументи, іменовані_аргументи);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_виконати_властивість(обʼєкт як адреса<ОбʼєктНативноїДії>, М, назва_властивості, аргументи, іменовані_аргументи);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_виконати_властивість(обʼєкт як адреса<ОбʼєктЧисла>, М, назва_властивості, аргументи, іменовані_аргументи);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_виконати_властивість(обʼєкт як адреса<ОбʼєктТексту>, М, назва_властивості, аргументи, іменовані_аргументи);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_виконати_властивість(обʼєкт як адреса<ОбʼєктЮнікоду>, М, назва_властивості, аргументи, іменовані_аргументи);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_виконати_властивість(обʼєкт як адреса<ОбʼєктМодуля>, М, назва_властивості, аргументи, іменовані_аргументи);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_виконати_властивість(обʼєкт як адреса<ОбʼєктСписку>, М, назва_властивості, аргументи, іменовані_аргументи);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_виконати_властивість(обʼєкт як адреса<ОбʼєктСловника>, М, назва_властивості, аргументи, іменовані_аргументи);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_виконати_властивість(обʼєкт як адреса<ОбʼєктЛогічного>, М, назва_властивості, аргументи, іменовані_аргументи);
    }
    вернути складений_обʼєкт_виконати_властивість(обʼєкт як адреса<СкладенийОбʼєкт>, М, назва_властивості, аргументи, іменовані_аргументи);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_отримати_елемент(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_отримати_елемент(обʼєкт як адреса<ОбʼєктСтруктури>, М, ключ);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_отримати_елемент(обʼєкт як адреса<ОбʼєктДії>, М, ключ);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_отримати_елемент(обʼєкт як адреса<ОбʼєктНативноїДії>, М, ключ);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_отримати_елемент(обʼєкт як адреса<ОбʼєктЧисла>, М, ключ);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_отримати_елемент(обʼєкт як адреса<ОбʼєктТексту>, М, ключ);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_отримати_елемент(обʼєкт як адреса<ОбʼєктЮнікоду>, М, ключ);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_отримати_елемент(обʼєкт як адреса<ОбʼєктМодуля>, М, ключ);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_отримати_елемент(обʼєкт як адреса<ОбʼєктСписку>, М, ключ);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_отримати_елемент(обʼєкт як адреса<ОбʼєктСловника>, М, ключ);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_отримати_елемент(обʼєкт як адреса<ОбʼєктЛогічного>, М, ключ);
    }
    вернути складений_обʼєкт_отримати_елемент(обʼєкт як адреса<СкладенийОбʼєкт>, М, ключ);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_змінити_елемент(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_змінити_елемент(обʼєкт як адреса<ОбʼєктСтруктури>, М, ключ, значення);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_змінити_елемент(обʼєкт як адреса<ОбʼєктДії>, М, ключ, значення);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_змінити_елемент(обʼєкт як адреса<ОбʼєктНативноїДії>, М, ключ, значення);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_змінити_елемент(обʼєкт як адреса<ОбʼєктЧисла>, М, ключ, значення);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_змінити_елемент(обʼєкт як адреса<ОбʼєктТексту>, М, ключ, значення);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_змінити_елемент(обʼєкт як адреса<ОбʼєктЮнікоду>, М, ключ, значення);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_змінити_елемент(обʼєкт як адреса<ОбʼєктМодуля>, М, ключ, значення);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_змінити_елемент(обʼєкт як адреса<ОбʼєктСписку>, М, ключ, значення);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_змінити_елемент(обʼєкт як адреса<ОбʼєктСловника>, М, ключ, значення);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_змінити_елемент(обʼєкт як адреса<ОбʼєктЛогічного>, М, ключ, значення);
    }
    вернути складений_обʼєкт_змінити_елемент(обʼєкт як адреса<СкладенийОбʼєкт>, М, ключ, значення);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_отримати_перебір(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_отримати_перебір(обʼєкт як адреса<ОбʼєктСтруктури>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_отримати_перебір(обʼєкт як адреса<ОбʼєктДії>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_отримати_перебір(обʼєкт як адреса<ОбʼєктНативноїДії>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_отримати_перебір(обʼєкт як адреса<ОбʼєктЧисла>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_отримати_перебір(обʼєкт як адреса<ОбʼєктТексту>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_отримати_перебір(обʼєкт як адреса<ОбʼєктЮнікоду>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_отримати_перебір(обʼєкт як адреса<ОбʼєктМодуля>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_отримати_перебір(обʼєкт як адреса<ОбʼєктСписку>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_отримати_перебір(обʼєкт як адреса<ОбʼєктСловника>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_отримати_перебір(обʼєкт як адреса<ОбʼєктЛогічного>, М);
    }
    вернути складений_обʼєкт_отримати_перебір(обʼєкт як адреса<СкладенийОбʼєкт>, М);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_додати(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_додати_до_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_додати(обʼєкт як адреса<ОбʼєктСтруктури>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_додати(обʼєкт як адреса<ОбʼєктДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_додати(обʼєкт як адреса<ОбʼєктНативноїДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_додати(обʼєкт як адреса<ОбʼєктЧисла>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_додати(обʼєкт як адреса<ОбʼєктТексту>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_додати(обʼєкт як адреса<ОбʼєктЮнікоду>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_додати(обʼєкт як адреса<ОбʼєктМодуля>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_додати(обʼєкт як адреса<ОбʼєктСписку>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_додати(обʼєкт як адреса<ОбʼєктСловника>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_додати(обʼєкт як адреса<ОбʼєктЛогічного>, М, аргумент);
    }
    вернути складений_обʼєкт_додати(обʼєкт як адреса<СкладенийОбʼєкт>, М, аргумент);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_відняти(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_відняти_від_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_відняти(обʼєкт як адреса<ОбʼєктСтруктури>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_відняти(обʼєкт як адреса<ОбʼєктДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_відняти(обʼєкт як адреса<ОбʼєктНативноїДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_відняти(обʼєкт як адреса<ОбʼєктЧисла>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_відняти(обʼєкт як адреса<ОбʼєктТексту>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_відняти(обʼєкт як адреса<ОбʼєктЮнікоду>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_відняти(обʼєкт як адреса<ОбʼєктМодуля>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_відняти(обʼєкт як адреса<ОбʼєктСписку>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_відняти(обʼєкт як адреса<ОбʼєктСловника>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_відняти(обʼєкт як адреса<ОбʼєктЛогічного>, М, аргумент);
    }
    вернути складений_обʼєкт_відняти(обʼєкт як адреса<СкладенийОбʼєкт>, М, аргумент);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_помножити(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_помножити_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_помножити(обʼєкт як адреса<ОбʼєктСтруктури>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_помножити(обʼєкт як адреса<ОбʼєктДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_помножити(обʼєкт як адреса<ОбʼєктНативноїДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_помножити(обʼєкт як адреса<ОбʼєктЧисла>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_помножити(обʼєкт як адреса<ОбʼєктТексту>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_помножити(обʼєкт як адреса<ОбʼєктЮнікоду>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_помножити(обʼєкт як адреса<ОбʼєктМодуля>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_помножити(обʼєкт як адреса<ОбʼєктСписку>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_помножити(обʼєкт як адреса<ОбʼєктСловника>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_помножити(обʼєкт як адреса<ОбʼєктЛогічного>, М, аргумент);
    }
    вернути складений_обʼєкт_помножити(обʼєкт як адреса<СкладенийОбʼєкт>, М, аргумент);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_поділити(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_поділити_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_поділити(обʼєкт як адреса<ОбʼєктСтруктури>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_поділити(обʼєкт як адреса<ОбʼєктДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_поділити(обʼєкт як адреса<ОбʼєктНативноїДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_поділити(обʼєкт як адреса<ОбʼєктЧисла>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_поділити(обʼєкт як адреса<ОбʼєктТексту>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_поділити(обʼєкт як адреса<ОбʼєктЮнікоду>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_поділити(обʼєкт як адреса<ОбʼєктМодуля>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_поділити(обʼєкт як адреса<ОбʼєктСписку>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_поділити(обʼєкт як адреса<ОбʼєктСловника>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_поділити(обʼєкт як адреса<ОбʼєктЛогічного>, М, аргумент);
    }
    вернути складений_обʼєкт_поділити(обʼєкт як адреса<СкладенийОбʼєкт>, М, аргумент);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_отримати_остачу_ділення(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_отримати_остачу_ділення_від_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_отримати_остачу_ділення(обʼєкт як адреса<ОбʼєктСтруктури>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_отримати_остачу_ділення(обʼєкт як адреса<ОбʼєктДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_отримати_остачу_ділення(обʼєкт як адреса<ОбʼєктНативноїДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_отримати_остачу_ділення(обʼєкт як адреса<ОбʼєктЧисла>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_отримати_остачу_ділення(обʼєкт як адреса<ОбʼєктТексту>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_отримати_остачу_ділення(обʼєкт як адреса<ОбʼєктЮнікоду>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_отримати_остачу_ділення(обʼєкт як адреса<ОбʼєктМодуля>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_отримати_остачу_ділення(обʼєкт як адреса<ОбʼєктСписку>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_отримати_остачу_ділення(обʼєкт як адреса<ОбʼєктСловника>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_отримати_остачу_ділення(обʼєкт як адреса<ОбʼєктЛогічного>, М, аргумент);
    }
    вернути складений_обʼєкт_отримати_остачу_ділення(обʼєкт як адреса<СкладенийОбʼєкт>, М, аргумент);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_отримати_частку_ділення(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_отримати_частку_ділення_від_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_отримати_частку_ділення(обʼєкт як адреса<ОбʼєктСтруктури>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_отримати_частку_ділення(обʼєкт як адреса<ОбʼєктДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_отримати_частку_ділення(обʼєкт як адреса<ОбʼєктНативноїДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_отримати_частку_ділення(обʼєкт як адреса<ОбʼєктЧисла>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_отримати_частку_ділення(обʼєкт як адреса<ОбʼєктТексту>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_отримати_частку_ділення(обʼєкт як адреса<ОбʼєктЮнікоду>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_отримати_частку_ділення(обʼєкт як адреса<ОбʼєктМодуля>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_отримати_частку_ділення(обʼєкт як адреса<ОбʼєктСписку>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_отримати_частку_ділення(обʼєкт як адреса<ОбʼєктСловника>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_отримати_частку_ділення(обʼєкт як адреса<ОбʼєктЛогічного>, М, аргумент);
    }
    вернути складений_обʼєкт_отримати_частку_ділення(обʼєкт як адреса<СкладенийОбʼєкт>, М, аргумент);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_піднести_до_степеня(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_піднести_до_степеня_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_піднести_до_степеня(обʼєкт як адреса<ОбʼєктСтруктури>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_піднести_до_степеня(обʼєкт як адреса<ОбʼєктДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_піднести_до_степеня(обʼєкт як адреса<ОбʼєктНативноїДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_піднести_до_степеня(обʼєкт як адреса<ОбʼєктЧисла>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_піднести_до_степеня(обʼєкт як адреса<ОбʼєктТексту>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_піднести_до_степеня(обʼєкт як адреса<ОбʼєктЮнікоду>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_піднести_до_степеня(обʼєкт як адреса<ОбʼєктМодуля>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_піднести_до_степеня(обʼєкт як адреса<ОбʼєктСписку>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_піднести_до_степеня(обʼєкт як адреса<ОбʼєктСловника>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_піднести_до_степеня(обʼєкт як адреса<ОбʼєктЛогічного>, М, аргумент);
    }
    вернути складений_обʼєкт_піднести_до_степеня(обʼєкт як адреса<СкладенийОбʼєкт>, М, аргумент);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_зсунути_вліво(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_зсунути_вліво_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_зсунути_вліво(обʼєкт як адреса<ОбʼєктСтруктури>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_зсунути_вліво(обʼєкт як адреса<ОбʼєктДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_зсунути_вліво(обʼєкт як адреса<ОбʼєктНативноїДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_зсунути_вліво(обʼєкт як адреса<ОбʼєктЧисла>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_зсунути_вліво(обʼєкт як адреса<ОбʼєктТексту>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_зсунути_вліво(обʼєкт як адреса<ОбʼєктЮнікоду>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_зсунути_вліво(обʼєкт як адреса<ОбʼєктМодуля>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_зсунути_вліво(обʼєкт як адреса<ОбʼєктСписку>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_зсунути_вліво(обʼєкт як адреса<ОбʼєктСловника>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_зсунути_вліво(обʼєкт як адреса<ОбʼєктЛогічного>, М, аргумент);
    }
    вернути складений_обʼєкт_зсунути_вліво(обʼєкт як адреса<СкладенийОбʼєкт>, М, аргумент);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_зсунути_вправо(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_зсунути_вправо_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_зсунути_вправо(обʼєкт як адреса<ОбʼєктСтруктури>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_зсунути_вправо(обʼєкт як адреса<ОбʼєктДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_зсунути_вправо(обʼєкт як адреса<ОбʼєктНативноїДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_зсунути_вправо(обʼєкт як адреса<ОбʼєктЧисла>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_зсунути_вправо(обʼєкт як адреса<ОбʼєктТексту>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_зсунути_вправо(обʼєкт як адреса<ОбʼєктЮнікоду>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_зсунути_вправо(обʼєкт як адреса<ОбʼєктМодуля>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_зсунути_вправо(обʼєкт як адреса<ОбʼєктСписку>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_зсунути_вправо(обʼєкт як адреса<ОбʼєктСловника>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_зсунути_вправо(обʼєкт як адреса<ОбʼєктЛогічного>, М, аргумент);
    }
    вернути складений_обʼєкт_зсунути_вправо(обʼєкт як адреса<СкладенийОбʼєкт>, М, аргумент);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_зсунути_вправо_зі_заповненням(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_зсунути_вправо_зі_заповненням_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_зсунути_вправо_зі_заповненням(обʼєкт як адреса<ОбʼєктСтруктури>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_зсунути_вправо_зі_заповненням(обʼєкт як адреса<ОбʼєктДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_зсунути_вправо_зі_заповненням(обʼєкт як адреса<ОбʼєктНативноїДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_зсунути_вправо_зі_заповненням(обʼєкт як адреса<ОбʼєктЧисла>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_зсунути_вправо_зі_заповненням(обʼєкт як адреса<ОбʼєктТексту>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_зсунути_вправо_зі_заповненням(обʼєкт як адреса<ОбʼєктЮнікоду>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_зсунути_вправо_зі_заповненням(обʼєкт як адреса<ОбʼєктМодуля>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_зсунути_вправо_зі_заповненням(обʼєкт як адреса<ОбʼєктСписку>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_зсунути_вправо_зі_заповненням(обʼєкт як адреса<ОбʼєктСловника>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_зсунути_вправо_зі_заповненням(обʼєкт як адреса<ОбʼєктЛогічного>, М, аргумент);
    }
    вернути складений_обʼєкт_зсунути_вправо_зі_заповненням(обʼєкт як адреса<СкладенийОбʼєкт>, М, аргумент);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_двійкове_і(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_двійкове_і_для_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_двійкове_і(обʼєкт як адреса<ОбʼєктСтруктури>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_двійкове_і(обʼєкт як адреса<ОбʼєктДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_двійкове_і(обʼєкт як адреса<ОбʼєктНативноїДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_двійкове_і(обʼєкт як адреса<ОбʼєктЧисла>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_двійкове_і(обʼєкт як адреса<ОбʼєктТексту>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_двійкове_і(обʼєкт як адреса<ОбʼєктЮнікоду>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_двійкове_і(обʼєкт як адреса<ОбʼєктМодуля>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_двійкове_і(обʼєкт як адреса<ОбʼєктСписку>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_двійкове_і(обʼєкт як адреса<ОбʼєктСловника>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_двійкове_і(обʼєкт як адреса<ОбʼєктЛогічного>, М, аргумент);
    }
    вернути складений_обʼєкт_двійкове_і(обʼєкт як адреса<СкладенийОбʼєкт>, М, аргумент);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_двійкове_або(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_двійкове_або_для_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_двійкове_або(обʼєкт як адреса<ОбʼєктСтруктури>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_двійкове_або(обʼєкт як адреса<ОбʼєктДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_двійкове_або(обʼєкт як адреса<ОбʼєктНативноїДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_двійкове_або(обʼєкт як адреса<ОбʼєктЧисла>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_двійкове_або(обʼєкт як адреса<ОбʼєктТексту>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_двійкове_або(обʼєкт як адреса<ОбʼєктЮнікоду>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_двійкове_або(обʼєкт як адреса<ОбʼєктМодуля>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_двійкове_або(обʼєкт як адреса<ОбʼєктСписку>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_двійкове_або(обʼєкт як адреса<ОбʼєктСловника>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_двійкове_або(обʼєкт як адреса<ОбʼєктЛогічного>, М, аргумент);
    }
    вернути складений_обʼєкт_двійкове_або(обʼєкт як адреса<СкладенийОбʼєкт>, М, аргумент);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_двійкове_виключне_або(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_двійкове_виключне_або_для_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_двійкове_виключне_або(обʼєкт як адреса<ОбʼєктСтруктури>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_двійкове_виключне_або(обʼєкт як адреса<ОбʼєктДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_двійкове_виключне_або(обʼєкт як адреса<ОбʼєктНативноїДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_двійкове_виключне_або(обʼєкт як адреса<ОбʼєктЧисла>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_двійкове_виключне_або(обʼєкт як адреса<ОбʼєктТексту>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_двійкове_виключне_або(обʼєкт як адреса<ОбʼєктЮнікоду>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_двійкове_виключне_або(обʼєкт як адреса<ОбʼєктМодуля>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_двійкове_виключне_або(обʼєкт як адреса<ОбʼєктСписку>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_двійкове_виключне_або(обʼєкт як адреса<ОбʼєктСловника>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_двійкове_виключне_або(обʼєкт як адреса<ОбʼєктЛогічного>, М, аргумент);
    }
    вернути складений_обʼєкт_двійкове_виключне_або(обʼєкт як адреса<СкладенийОбʼєкт>, М, аргумент);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_двійкове_не(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_двійкове_не_для_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_двійкове_не(обʼєкт як адреса<ОбʼєктСтруктури>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_двійкове_не(обʼєкт як адреса<ОбʼєктДії>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_двійкове_не(обʼєкт як адреса<ОбʼєктНативноїДії>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_двійкове_не(обʼєкт як адреса<ОбʼєктЧисла>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_двійкове_не(обʼєкт як адреса<ОбʼєктТексту>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_двійкове_не(обʼєкт як адреса<ОбʼєктЮнікоду>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_двійкове_не(обʼєкт як адреса<ОбʼєктМодуля>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_двійкове_не(обʼєкт як адреса<ОбʼєктСписку>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_двійкове_не(обʼєкт як адреса<ОбʼєктСловника>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_двійкове_не(обʼєкт як адреса<ОбʼєктЛогічного>, М);
    }
    вернути складений_обʼєкт_двійкове_не(обʼєкт як адреса<СкладенийОбʼєкт>, М);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_більше(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_перевірку_на_більше_для_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_більше(обʼєкт як адреса<ОбʼєктСтруктури>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_більше(обʼєкт як адреса<ОбʼєктДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_більше(обʼєкт як адреса<ОбʼєктНативноїДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_більше(обʼєкт як адреса<ОбʼєктЧисла>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_більше(обʼєкт як адреса<ОбʼєктТексту>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_більше(обʼєкт як адреса<ОбʼєктЮнікоду>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_більше(обʼєкт як адреса<ОбʼєктМодуля>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_більше(обʼєкт як адреса<ОбʼєктСписку>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_більше(обʼєкт як адреса<ОбʼєктСловника>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_більше(обʼєкт як адреса<ОбʼєктЛогічного>, М, аргумент);
    }
    вернути складений_обʼєкт_більше(обʼєкт як адреса<СкладенийОбʼєкт>, М, аргумент);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_менше(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_перевірку_на_менше_для_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_менше(обʼєкт як адреса<ОбʼєктСтруктури>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_менше(обʼєкт як адреса<ОбʼєктДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_менше(обʼєкт як адреса<ОбʼєктНативноїДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_менше(обʼєкт як адреса<ОбʼєктЧисла>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_менше(обʼєкт як адреса<ОбʼєктТексту>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_менше(обʼєкт як адреса<ОбʼєктЮнікоду>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_менше(обʼєкт як адреса<ОбʼєктМодуля>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_менше(обʼєкт як адреса<ОбʼєктСписку>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_менше(обʼєкт як адреса<ОбʼєктСловника>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_менше(обʼєкт як адреса<ОбʼєктЛогічного>, М, аргумент);
    }
    вернути складений_обʼєкт_менше(обʼєкт як адреса<СкладенийОбʼєкт>, М, аргумент);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_рівно(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      якщо аргумент == пусто {
        вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
      }
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_рівно(обʼєкт як адреса<ОбʼєктСтруктури>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_рівно(обʼєкт як адреса<ОбʼєктДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_рівно(обʼєкт як адреса<ОбʼєктНативноїДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_рівно(обʼєкт як адреса<ОбʼєктЧисла>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_рівно(обʼєкт як адреса<ОбʼєктТексту>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_рівно(обʼєкт як адреса<ОбʼєктЮнікоду>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_рівно(обʼєкт як адреса<ОбʼєктМодуля>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_рівно(обʼєкт як адреса<ОбʼєктСписку>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_рівно(обʼєкт як адреса<ОбʼєктСловника>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_рівно(обʼєкт як адреса<ОбʼєктЛогічного>, М, аргумент);
    }
    вернути складений_обʼєкт_рівно(обʼєкт як адреса<СкладенийОбʼєкт>, М, аргумент);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_містить(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_перевірку_чи_містить_для_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_містить(обʼєкт як адреса<ОбʼєктСтруктури>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_містить(обʼєкт як адреса<ОбʼєктДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_містить(обʼєкт як адреса<ОбʼєктНативноїДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_містить(обʼєкт як адреса<ОбʼєктЧисла>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_містить(обʼєкт як адреса<ОбʼєктТексту>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_містить(обʼєкт як адреса<ОбʼєктЮнікоду>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_містить(обʼєкт як адреса<ОбʼєктМодуля>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_містить(обʼєкт як адреса<ОбʼєктСписку>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_містить(обʼєкт як адреса<ОбʼєктСловника>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_містить(обʼєкт як адреса<ОбʼєктЛогічного>, М, аргумент);
    }
    вернути складений_обʼєкт_містить(обʼєкт як адреса<СкладенийОбʼєкт>, М, аргумент);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_є(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      якщо аргумент == пусто {
        вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
      }
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_є(обʼєкт як адреса<ОбʼєктСтруктури>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_є(обʼєкт як адреса<ОбʼєктДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_є(обʼєкт як адреса<ОбʼєктНативноїДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_є(обʼєкт як адреса<ОбʼєктЧисла>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_є(обʼєкт як адреса<ОбʼєктТексту>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_є(обʼєкт як адреса<ОбʼєктЮнікоду>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_є(обʼєкт як адреса<ОбʼєктМодуля>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_є(обʼєкт як адреса<ОбʼєктСписку>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_є(обʼєкт як адреса<ОбʼєктСловника>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_є(обʼєкт як адреса<ОбʼєктЛогічного>, М, аргумент);
    }
    вернути складений_обʼєкт_є(обʼєкт як адреса<СкладенийОбʼєкт>, М, аргумент);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_відʼємне(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_відʼємне_для_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_відʼємне(обʼєкт як адреса<ОбʼєктСтруктури>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_відʼємне(обʼєкт як адреса<ОбʼєктДії>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_відʼємне(обʼєкт як адреса<ОбʼєктНативноїДії>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_відʼємне(обʼєкт як адреса<ОбʼєктЧисла>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_відʼємне(обʼєкт як адреса<ОбʼєктТексту>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_відʼємне(обʼєкт як адреса<ОбʼєктЮнікоду>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_відʼємне(обʼєкт як адреса<ОбʼєктМодуля>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_відʼємне(обʼєкт як адреса<ОбʼєктСписку>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_відʼємне(обʼєкт як адреса<ОбʼєктСловника>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_відʼємне(обʼєкт як адреса<ОбʼєктЛогічного>, М);
    }
    вернути складений_обʼєкт_відʼємне(обʼєкт як адреса<СкладенийОбʼєкт>, М);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_додатнє(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_помилки_неможливо_виконати_додатнє_для_пусто(М);
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_додатнє(обʼєкт як адреса<ОбʼєктСтруктури>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_додатнє(обʼєкт як адреса<ОбʼєктДії>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_додатнє(обʼєкт як адреса<ОбʼєктНативноїДії>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_додатнє(обʼєкт як адреса<ОбʼєктЧисла>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_додатнє(обʼєкт як адреса<ОбʼєктТексту>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_додатнє(обʼєкт як адреса<ОбʼєктЮнікоду>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_додатнє(обʼєкт як адреса<ОбʼєктМодуля>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_додатнє(обʼєкт як адреса<ОбʼєктСписку>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_додатнє(обʼєкт як адреса<ОбʼєктСловника>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_додатнє(обʼєкт як адреса<ОбʼєктЛогічного>, М);
    }
    вернути складений_обʼєкт_додатнє(обʼєкт як адреса<СкладенийОбʼєкт>, М);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_заперечити(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    якщо обʼєкт == пусто {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути обʼєкт_структури_заперечити(обʼєкт як адреса<ОбʼєктСтруктури>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути обʼєкт_дії_заперечити(обʼєкт як адреса<ОбʼєктДії>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути обʼєкт_нативної_дії_заперечити(обʼєкт як адреса<ОбʼєктНативноїДії>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути обʼєкт_числа_заперечити(обʼєкт як адреса<ОбʼєктЧисла>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути обʼєкт_тексту_заперечити(обʼєкт як адреса<ОбʼєктТексту>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути обʼєкт_юнікоду_заперечити(обʼєкт як адреса<ОбʼєктЮнікоду>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути обʼєкт_модуля_заперечити(обʼєкт як адреса<ОбʼєктМодуля>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути обʼєкт_списку_заперечити(обʼєкт як адреса<ОбʼєктСписку>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути обʼєкт_словника_заперечити(обʼєкт як адреса<ОбʼєктСловника>, М);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути обʼєкт_логічного_заперечити(обʼєкт як адреса<ОбʼєктЛогічного>, М);
    }
    вернути складений_обʼєкт_заперечити(обʼєкт як адреса<СкладенийОбʼєкт>, М);
  }

  місцева дія перевірити_чи_обʼєкт_рівно(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне {
    якщо обʼєкт == пусто {
      якщо аргумент == пусто {
        вернути так;
      }
      вернути ні;
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути перевірити_чи_обʼєкт_структури_рівно(обʼєкт як адреса<ОбʼєктСтруктури>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути перевірити_чи_обʼєкт_дії_рівно(обʼєкт як адреса<ОбʼєктДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути перевірити_чи_обʼєкт_нативної_дії_рівно(обʼєкт як адреса<ОбʼєктНативноїДії>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути перевірити_чи_обʼєкт_числа_рівно(обʼєкт як адреса<ОбʼєктЧисла>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути перевірити_чи_обʼєкт_тексту_рівно(обʼєкт як адреса<ОбʼєктТексту>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути перевірити_чи_обʼєкт_юнікоду_рівно(обʼєкт як адреса<ОбʼєктЮнікоду>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути перевірити_чи_обʼєкт_модуля_рівно(обʼєкт як адреса<ОбʼєктМодуля>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути перевірити_чи_обʼєкт_списку_рівно(обʼєкт як адреса<ОбʼєктСписку>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути перевірити_чи_обʼєкт_словника_рівно(обʼєкт як адреса<ОбʼєктСловника>, М, аргумент);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути перевірити_чи_обʼєкт_логічного_рівно(обʼєкт як адреса<ОбʼєктЛогічного>, М, аргумент);
    }
    вернути перевірити_чи_складений_обʼєкт_рівно(обʼєкт як адреса<СкладенийОбʼєкт>, М, аргумент);
  }

  місцева дія перевірити_чи_обʼєкт_є(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне {
    якщо обʼєкт_структури == пусто {
      якщо обʼєкт == пусто {
        вернути так;
      }
      вернути ні;
    }
    якщо обʼєкт == пусто {
      вернути ні;
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      вернути перевірити_чи_обʼєкт_структури_є(обʼєкт як адреса<ОбʼєктСтруктури>, М, обʼєкт_структури);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      вернути перевірити_чи_обʼєкт_дії_є(обʼєкт як адреса<ОбʼєктДії>, М, обʼєкт_структури);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      вернути перевірити_чи_обʼєкт_нативної_дії_є(обʼєкт як адреса<ОбʼєктНативноїДії>, М, обʼєкт_структури);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      вернути перевірити_чи_обʼєкт_числа_є(обʼєкт як адреса<ОбʼєктЧисла>, М, обʼєкт_структури);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      вернути перевірити_чи_обʼєкт_тексту_є(обʼєкт як адреса<ОбʼєктТексту>, М, обʼєкт_структури);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      вернути перевірити_чи_обʼєкт_юнікоду_є(обʼєкт як адреса<ОбʼєктЮнікоду>, М, обʼєкт_структури);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      вернути перевірити_чи_обʼєкт_модуля_є(обʼєкт як адреса<ОбʼєктМодуля>, М, обʼєкт_структури);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      вернути перевірити_чи_обʼєкт_списку_є(обʼєкт як адреса<ОбʼєктСписку>, М, обʼєкт_структури);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      вернути перевірити_чи_обʼєкт_словника_є(обʼєкт як адреса<ОбʼєктСловника>, М, обʼєкт_структури);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      вернути перевірити_чи_обʼєкт_логічного_є(обʼєкт як адреса<ОбʼєктЛогічного>, М, обʼєкт_структури);
    }
    вернути перевірити_чи_складений_обʼєкт_є(обʼєкт як адреса<СкладенийОбʼєкт>, М, обʼєкт_структури);
  }

  місцева дія перевірити_чи_обʼєкт_виражається_логічним_так(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): логічне {
    якщо обʼєкт == пусто {
      вернути ні;
    }
    якщо обʼєкт == М.обʼєкт_логічного_ні {
      вернути ні;
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_число {
      ціль обʼєкт_числа = обʼєкт як адреса<ОбʼєктЧисла>;
      якщо обʼєкт_числа.значення == 0.0 {
        вернути ні;
      }
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      ціль обʼєкт_тексту = обʼєкт як адреса<ОбʼєктТексту>;
      якщо strlen(обʼєкт_тексту.значення) == 0 {
        вернути ні;
      }
    }
    якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      ціль обʼєкт_юнікоду = обʼєкт як адреса<ОбʼєктЮнікоду>;
      якщо strlen32(обʼєкт_юнікоду.значення) == 0 {
        вернути ні;
      }
    }
    вернути так;
  }

  місцева дія перевірити_чи_обʼєкт_структури_доступний_для_наслідування(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>): логічне {
    якщо обʼєкт_структури == М.обʼєкт_структури_Структура {
      вернути ні;
    }
    якщо обʼєкт_структури == М.обʼєкт_структури_Дія {
      вернути ні;
    }
    якщо обʼєкт_структури == М.обʼєкт_структури_НативнаДія {
      вернути ні;
    }
    якщо обʼєкт_структури == М.обʼєкт_структури_число {
      вернути ні;
    }
    якщо обʼєкт_структури == М.обʼєкт_структури_текст {
      вернути ні;
    }
    якщо обʼєкт_структури == М.обʼєкт_структури_юнікод {
      вернути ні;
    }
    якщо обʼєкт_структури == М.обʼєкт_структури_Модуль {
      вернути ні;
    }
    якщо обʼєкт_структури == М.обʼєкт_структури_список {
      вернути ні;
    }
    якщо обʼєкт_структури == М.обʼєкт_структури_словник {
      вернути ні;
    }
    якщо обʼєкт_структури == М.обʼєкт_структури_логічне {
      вернути ні;
    }
    вернути так;
  }

  місцева дія виділити_обʼєкт_з_назви(М: адреса<Машина>, назва: адреса<Назва>): адреса<Обʼєкт> {
    якщо назва.кодування == КОДУВАННЯ_НАЗВИ_КД {
      вернути виділити_обʼєкт_тексту(М, назва.значення) як адреса<Обʼєкт>;
    } інакше {
      вернути виділити_обʼєкт_юнікоду_з_ю8(М, назва.значення) як адреса<Обʼєкт>;
    }
  }

  місцева дія надрукувати_обʼєкт(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, глибина: позитивне) {
    ціль накопичувач_ю8 = зробити_накопичувач_ю8();
    надрукувати_обʼєкт_в_накопичувач_ю8(обʼєкт, М, накопичувач_ю8::адреса, глибина);
    ціль ю8 = виділити_ю8_з_накопичувача_ю8(накопичувач_ю8::адреса);
    звільнити_значення_накопичувача_ю8(накопичувач_ю8);
    надрукувати_ю8(ю8);
    звільнити(ю8);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія надрукувати_обʼєкт_в_накопичувач_ю8(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    якщо обʼєкт == пусто {
      покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"пусто");
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_число {
      надрукувати_обʼєкт_числа_в_накопичувач_ю8(обʼєкт як адреса<ОбʼєктЧисла>, М, накопичувач_ю8, глибина);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_текст {
      надрукувати_обʼєкт_тексту_в_накопичувач_ю8(обʼєкт як адреса<ОбʼєктТексту>, М, накопичувач_ю8, глибина);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_юнікод {
      надрукувати_обʼєкт_юнікоду_в_накопичувач_ю8(обʼєкт як адреса<ОбʼєктЮнікоду>, М, накопичувач_ю8, глибина);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Дія {
      надрукувати_обʼєкт_дії_в_накопичувач_ю8(обʼєкт як адреса<ОбʼєктДії>, М, накопичувач_ю8, глибина);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_НативнаДія {
      надрукувати_обʼєкт_нативної_дії_в_накопичувач_ю8(обʼєкт як адреса<ОбʼєктНативноїДії>, М, накопичувач_ю8, глибина);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Структура {
      надрукувати_обʼєкт_структури_в_накопичувач_ю8(обʼєкт як адреса<ОбʼєктСтруктури>, М, накопичувач_ю8, глибина);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_Модуль {
      надрукувати_обʼєкт_модуля_в_накопичувач_ю8(обʼєкт як адреса<ОбʼєктМодуля>, М, накопичувач_ю8, глибина);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_список {
      надрукувати_обʼєкт_списку_в_накопичувач_ю8(обʼєкт як адреса<ОбʼєктСписку>, М, накопичувач_ю8, глибина);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_словник {
      надрукувати_обʼєкт_словника_в_накопичувач_ю8(обʼєкт як адреса<ОбʼєктСловника>, М, накопичувач_ю8, глибина);
    } інакше якщо обʼєкт.тип == М.обʼєкт_структури_логічне {
      надрукувати_обʼєкт_логічного_в_накопичувач_ю8(обʼєкт як адреса<ОбʼєктЛогічного>, М, накопичувач_ю8, глибина);
    } інакше {
      покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"обʼєкт");
//      якщо обʼєкт.тип != пусто {
//        якщо обʼєкт.тип.назва != пусто {
//          покласти_в_накопичувач_ю8(накопичувач_ю8, обʼєкт.тип.назва.значення);
//        }
//      }
//      покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"(");
//      змінна ціль пв: позитивне = 0;
//      поки пв < обʼєкт.властивості.розмір {
//        покласти_в_накопичувач_ю8(накопичувач_ю8, обʼєкт.властивості.елементи[пв].ключ.значення);
//        покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"=");
//        надрукувати_обʼєкт_в_накопичувач_ю8(М, накопичувач_ю8, обʼєкт.властивості.елементи[пв].значення, глибина + 1);
//        якщо пв + 1 < обʼєкт.властивості.розмір {
//          покласти_в_накопичувач_ю8(накопичувач_ю8, ю8", ");
//        }
//        пв = пв + 1;
//      }
//      покласти_в_накопичувач_ю8(накопичувач_ю8, ю8")");
    }
  }
}