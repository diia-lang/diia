////
// Автор це Богданович Давид Когут Прихожденко та Організація М та Організація Організацій
////

взяти визначення ./допоміжне/біб;
взяти визначення ./допоміжне/різне;
взяти визначення ./КД;

// Перелік усіх вказівок МаМа, їх код та опис.
секція МаМа {
  синонім ВПокластиПусто = 1; // [](){} -> [пусто]{}
  синонім ВПокластиТак = 2; // [](){} -> [так]{}
  синонім ВПокластиНі = 3; // [](){} -> [ні]{}
  синонім ВПокластиКонстанту = 4; // [](позиція_константи){} -> [константа]{}
  синонім ВСтворитиДію = 5; // [](позиція_коду){НаРПар: [параметри_дії], НаОТ: [...], ТрН: назва_дії} -> [обʼєкт_дії]{НаРПар: [], НаОТ: [], ТрН: пусто}
  синонім ВСтворитиСтруктуру = 6; // [предок](){НаРПар: [параметри_структури], ТрН: назва_структури} -> [обʼєкт_структури]{НаРПар: [], ТрН: пусто}
  синонім ВСтворитиМодуль = 7; // [](позиція_коду){ТрН: назва_модуля} -> [обʼєкт_модуля]{ТрН: пусто}
  синонім ВСтворитиСписок = 8; // [](довжина){} -> [обʼєкт_списку]{}
  синонім ВПокластиВСписок = 9; // [обʼєкт_списку, елемент](){} -> [обʼєкт_списку]{}
  синонім ВСтворитиСловник = 10; // [](довжина){} -> [обʼєкт_словника]{}
  синонім ВПокластиВСловник = 11; // [обʼєкт_словника, ключ, значення](){} -> [обʼєкт_словника]{}
  синонім ВПокластиСтруктуруОбʼєкт = 12; // [](){} -> [обʼєкт_структури_обʼєкт]{}
  синонім ВПокластиЯ = 13; // [](){} -> [обʼєкт_я]{}
  синонім ВЗаписатиМетод = 14; // [обʼєкт_дії, обʼєкт_структури](позиція_назви){} -> [обʼєкт_дії]{}
  // 15-19
  синонім ВВизначити = 20; // [обʼєкт](позиція_назви){} -> []{}
  синонім ВЗвернутись = 21; // [](позиція_назви){} -> [обʼєкт]{}
  синонім ВВиконати = 22; // [обʼєкт_дії, ...](кількість_аргументів){} -> [результат]{}
  синонім ВВиконатиЗНазвами = 23; // [обʼєкт_дії, ...](кількість_аргументів){НаРАрг: [аргументи_з_назвами]} -> [результат]{НаРАрг: []}
  синонім ВОтриматиВластивість = 24; // [обʼєкт](позиція_назви){} -> [значення_аргумента]{}
  синонім ВЗмінитиВластивість = 25; // [обʼєкт, значення](позиція_назви){} -> []{}
  синонім ВВиконатиВластивість = 26; // [обʼєкт, ...](позиція_назви, кількість_аргументів){} -> [результат]{}
  синонім ВВиконатиВластивістьЗНазвами = 27; // [обʼєкт, ...](позиція_назви, кількість_аргументів){НаРАрг: [аргументи_з_назвами]} -> [результат]{НаРАрг: []}
  синонім ВОтриматиЕлемент = 28; // [обʼєкт, ключ](){} -> [елемент]{}
  синонім ВЗмінитиЕлемент = 29; // [обʼєкт, ключ, значення](){} -> []{}
  синонім ВОтриматиПеребір = 30; // [обʼєкт](){} -> [обʼєкт_перебору]{}
  синонім ВВизначитиЗзовні = 31; // [обʼєкт](позиція_назви){} -> []{}
  синонім ВВиконатиЗПредка = 32; // [обʼєкт, ...](позиція_назви, кількість_аргументів){} -> [результат]{}
  синонім ВВиконатиЗПредкаЗНазвами = 33; // [обʼєкт, ...](позиція_назви, кількість_аргументів){НаРАрг: [аргументи_з_назвами]} -> [результат]{НаРАрг: []}
  синонім ВВидалити = 34; // [](позиція_назви){} -> [результат]{}
  синонім ВВидалитиВластивість = 35; // [обʼєкт](позиція_назви){} -> [результат]{}
  синонім ВВидалитиЕлемент = 36; // [обʼєкт, ключ](){} -> [результат]{}
  // 37-49
  синонім ВДодати = 50; // [а, б](){} -> [результат]{}
  синонім ВВідняти = 51; // [а, б](){} -> [результат]{}
  синонім ВПомножити = 52; // [а, б](){} -> [результат]{}
  синонім ВПоділити = 53; // [а, б](){} -> [результат]{}
  синонім ВОтриматиОстачуДілення = 54; // [а, б](){} -> [результат]{}
  синонім ВОтриматиНеповнуЧасткуДілення = 55; // [а, б](){} -> [результат]{}
  синонім ВПіднестиДоСтепеня = 56; // [а, б](){} -> [результат]{}
  синонім ВЗсунутиВліво = 57; // [а, б](){} -> [результат]{}
  синонім ВЗсунутиВправо = 58; // [а, б](){} -> [результат]{}
  синонім ВЗсунутиВправоЗіЗаповненням = 59; // [а, б](){} -> [результат]{}
  синонім ВДвійковеІ = 60; // [а, б](){} -> [результат]{}
  синонім ВДвійковеАБО = 61; // [а, б](){} -> [результат]{}
  синонім ВДвійковеВиключнеАБО = 62; // [а, б](){} -> [результат]{}
  синонім ВДвійковеНЕ = 63; // [а](){} -> [результат]{}
  синонім ВМенше = 70; // [а, б](){} -> [результат]{}
  синонім ВБільше = 71; // [а, б](){} -> [результат]{}
  синонім ВНеБільше = 72; // [а, б](){} -> [результат]{}
  синонім ВНеМенше = 73; // [а, б](){} -> [результат]{}
  синонім ВРівно = 74; // [а, б](){} -> [результат]{}
  синонім ВНеРівно = 75; // [а, б](){} -> [результат]{}
  синонім ВМістить = 76; // [а, б](){} -> [результат]{}
  синонім ВНеМістить = 77; // [а, б](){} -> [результат]{}
  синонім ВЄ = 78; // [а, б](){} -> [результат]{}
  синонім ВНеЄ = 79; // [а, б](){} -> [результат]{}
  синонім ВВідʼємне = 80; // [а](){} -> [результат]{}
  синонім ВЧислове = 81; // [а](){} -> [результат]{}
  синонім ВЗаперечити = 82; // [а](){} -> [результат]{}
  синонім ВЗбільшити = 83; // [а](){} -> [результат]{}
  синонім ВЗбільшитиПопереднє = 84; // [а, б](){} -> [результат, б]{}
  синонім ВЗменшити = 85; // [а](){} -> [результат]{}
  // 86-99
  синонім ВПочатиСпробу = 100; // [](позиція_вказівки_зловити){} -> []{}
  синонім ВВпасти = 101; // [обʼєкт_помилки](){} -> []{}
  синонім ВЗакінчитиСпробу = 102; // [](позиція_вказівки_виходу){} -> []{}
  синонім ВВзяти = 103; // [](позиція_назви){НаН: [...]} -> [обʼєкт_модуля]{НаН: []}
  синонім ВДати = 104; // [обʼєкт](позиція_назви){} -> []{}
  синонім ВПочатиСпробуЗНазвою = 105; // [](позиція_вказівки_зловити, позиція_назви){} -> []{}
  синонім ВПеребратиДалі = 106; // [обʼєкт_перебору](){} -> [обʼєкт_перебору, результат_виконання]{}
  // 107-129
  синонім ВПокластиРеєстрАргументівЗНазвами = 130; // [](){НаРАрг: []} -> []{НаРАрг: [аргументи_з_назвами]}
  синонім ВЗареєструватиАргументЗНазвою = 131; // [обʼєкт](позиція_назви){НаРАрг: [аргументи_з_назвами]} -> []{НаРАрг: [аргументи_з_назвами]}
  синонім ВПокластиРеєстрПараметрів = 132; // [](){НаРПар: []} -> []{НаРПар: [параметри]}
  синонім ВЗареєструватиПараметр = 133; // [...](позиція_назви, кількість_типів){НаРПар: [параметри], ТрК: код_значення_за_замовчуванням} -> []{НаРПар: [параметри], ТрК: пусто}
  синонім ВТриматиКод = 134; // [](позиція_коду){ТрК: пусто} -> []{ТрК: код}
  синонім ВНакопичитиНазву = 135; // [](позиція_назви){НаН: []} -> []{НаН: [назва]}
  синонім ВТриматиНазву = 136; // [](позиція_назви){ТрН: пусто} -> []{ТрН: назва}
  // 137-199
  синонім ВСтрибнути = 200; // [](позиція_вказівки){} -> []{}
  синонім ВСтрибнутиЯкщоНі = 201; // [обʼєкт](позиція_вказівки){} -> []{}
  синонім ВЗабрати = 202; // [обʼєкт](){} -> []{}
  синонім ВВернути = 203; // [обʼєкт](){} -> []{}
  синонім ВСтрибнутиЯкщоНіЗалишивши = 204; // [обʼєкт](позиція_вказівки){} -> [обʼєкт]{}
  синонім ВСтрибнутиЯкщоТак = 205; // [обʼєкт](позиція_вказівки){} -> [обʼєкт]{}
  синонім ВСтрибнутиЯкщоТакЗалишивши = 206; // [обʼєкт](позиція_вказівки){} -> [обʼєкт]{}
  синонім ВДублювати = 207; // [обʼєкт](){} -> [обʼєкт, обʼєкт]{}
  синонім ВДублюватиПопереднє = 208; // [обʼєкт, обʼєкт2](){} -> [обʼєкт, обʼєкт2, обʼєкт]{}
}

// Перелік усіх структур і синонімів, що використовуються в МаМа.
секція МаМа {
  структура Накопичувач<Т>;
  структура ЕлементРеєстру<К, З>;
  структура Реєстр<К, З>;
  структура ЕлементРеєстру2<К, З>;
  структура Реєстр2<К, З>;
  структура Назва;
  структура Код;
  структура МісцезнаходженняВказівки;
  структура Утилізатор;
  структура Параметр;
  структура Обʼєкт;
  структура ОбʼєктСтруктури;
  структура ОбʼєктДії;
  структура ОбʼєктНативноїДії;
  структура ОбʼєктЧисла;
  структура ОбʼєктТексту;
  структура ОбʼєктЮнікоду;
  структура ОбʼєктМодуля;
  структура ОбʼєктСписку;
  структура ОбʼєктСловника;
  структура ОбʼєктЛогічного;
  структура ОбʼєктБайтів;
  структура СкладенийОбʼєкт;
  структура СтатичніНазви;
  структура БазаНазв;
  структура МісцезнаходженняПадіння;
  структура ЕлементІсторіїВиконання;
  структура Середовище;
  структура Машина;

  структура Накопичувач<Т> {
    розмір: позитивне;
    дані: памʼять<Т>;
  }

  синонім НакопичувачЮ8 = Накопичувач<п8>;

  структура ЕлементРеєстру<К, З> {
    ключ: К;
    значення: З;
  }

  структура Реєстр<К, З> {
    розмір: позитивне;
    елементи: памʼять<ЕлементРеєстру<К, З>>;
    дія_перевірки_ключа: (а: К, б: К) -> логічне;
  }

  структура ЕлементРеєстру2<К, З> {
    ключ: К;
    значення: З;
  }

  структура Реєстр2<К, З> {
    розмір: позитивне;
    елементи: памʼять<ЕлементРеєстру2<К, З>>;
    дія_перевірки_ключа: (а: К, б: К, дані: адреса) -> логічне;
    дані: адреса;
  }

  синонім обʼєкт_або_стан_падіння = адреса<Обʼєкт>; // дії, що вертають обʼєкт_або_стан_падіння можуть вмикати стан падіння Машини, який необхідно обробляти
  синонім НативнаДія = (обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>) -> обʼєкт_або_стан_падіння;
  синонім ВідкликПередЗвільненнямОбʼєктаНативноїДії = (обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>) -> ніщо;

  синонім КОДУВАННЯ_НАЗВИ_КД = 1;
  синонім КОДУВАННЯ_НАЗВИ_Ю8 = 2;

  синонім Ю8 = памʼять<п8>;
  синонім Ю16 = памʼять<п16>;
  синонім Ю32 = памʼять<п32>;

  структура Назва {
    кодування: позитивне; // 1 - КД, 2 - Ю8
    значення: памʼять<п8>;
  }

  структура МісцезнаходженняВказівки {
    позиція_вказівки: позитивне;
    рядок: позитивне;
  }

  структура Код {
    шлях_до_файлу: Ю8;
    накопичувач_вказівок: Накопичувач<позитивне>;
    накопичувач_місцезнаходжень_вказівок: Накопичувач<МісцезнаходженняВказівки>;
  }

  структура Параметр {
    типи: Накопичувач<адреса<ОбʼєктСтруктури>>;
    код_значення_за_замовчуванням: адреса<Код>;
  }

  структура Утилізатор {
    останній_обʼєкт: адреса<Обʼєкт>;
    кількість_обʼєктів: позитивне;
    кількість_обʼєктів_щоб_запустити_утилізацію: позитивне;
    кількість_середовищ_щоб_запустити_утилізацію: позитивне;
    початок_середовищ: адреса<Середовище>;
    кількість_середовищ: позитивне;
  }

  структура Обʼєкт {
    попередній_обʼєкт: адреса<Обʼєкт>;
    позначено: позитивне;
    тип: адреса<ОбʼєктСтруктури>;
  }

  структура ОбʼєктСтруктури {
    попередній_обʼєкт: адреса<Обʼєкт>;
    позначено: позитивне;
    тип: адреса<ОбʼєктСтруктури>;
    властивості: Реєстр<адреса<Назва>, адреса<Обʼєкт>>;
    назва: адреса<Назва>;
    предок: адреса<ОбʼєктСтруктури>;
    параметри: адреса<Реєстр<адреса<Назва>, Параметр>>;
    методи: Реєстр<адреса<Назва>, адреса<Обʼєкт>>;
    середовище_створення: адреса<Середовище>;
  }

  структура ОбʼєктДії {
    попередній_обʼєкт: адреса<Обʼєкт>;
    позначено: позитивне;
    тип: адреса<ОбʼєктСтруктури>;
    властивості: Реєстр<адреса<Назва>, адреса<Обʼєкт>>;
    назва: адреса<Назва>;
    параметри: адреса<Реєстр<адреса<Назва>, Параметр>>;
    середовище_створення: адреса<Середовище>;
    код: адреса<Код>;
    типи_результату: Накопичувач<адреса<ОбʼєктСтруктури>>;
  }

  структура ОбʼєктНативноїДії {
    попередній_обʼєкт: адреса<Обʼєкт>;
    позначено: позитивне;
    тип: адреса<ОбʼєктСтруктури>;
    властивості: Реєстр<адреса<Назва>, адреса<Обʼєкт>>;
    назва: адреса<Назва>;
    нативна_дія: НативнаДія;
    дані: адреса;
    відклик_перед_звільненням: ВідкликПередЗвільненнямОбʼєктаНативноїДії;
  }

  структура ОбʼєктЧисла {
    попередній_обʼєкт: адреса<Обʼєкт>;
    позначено: позитивне;
    тип: адреса<ОбʼєктСтруктури>;
    значення: д64;
  }

  структура ОбʼєктТексту {
    попередній_обʼєкт: адреса<Обʼєкт>;
    позначено: позитивне;
    тип: адреса<ОбʼєктСтруктури>;
    довжина: позитивне;
    значення: памʼять<п8>;
  }

  структура ОбʼєктЮнікоду {
    попередній_обʼєкт: адреса<Обʼєкт>;
    позначено: позитивне;
    тип: адреса<ОбʼєктСтруктури>;
    довжина: позитивне;
    значення: Ю32;
  }

  структура ОбʼєктМодуля {
    попередній_обʼєкт: адреса<Обʼєкт>;
    позначено: позитивне;
    тип: адреса<ОбʼєктСтруктури>;
    властивості: Реєстр<адреса<Назва>, адреса<Обʼєкт>>;
    назва: адреса<Назва>;
    назва_паку: адреса<Назва>;
  }

  структура ОбʼєктСписку {
    попередній_обʼєкт: адреса<Обʼєкт>;
    позначено: позитивне;
    тип: адреса<ОбʼєктСтруктури>;
    властивості: Реєстр<адреса<Назва>, адреса<Обʼєкт>>;
    елементи: Накопичувач<адреса<Обʼєкт>>;
  }

  структура ОбʼєктСловника {
    попередній_обʼєкт: адреса<Обʼєкт>;
    позначено: позитивне;
    тип: адреса<ОбʼєктСтруктури>;
    властивості: Реєстр<адреса<Назва>, адреса<Обʼєкт>>;
    елементи: Реєстр2<адреса<Обʼєкт>, адреса<Обʼєкт>>;
  }

  структура ОбʼєктЛогічного {
    попередній_обʼєкт: адреса<Обʼєкт>;
    позначено: позитивне;
    тип: адреса<ОбʼєктСтруктури>;
    значення: позитивне;
  }

  структура ОбʼєктБайтів {
    попередній_обʼєкт: адреса<Обʼєкт>;
    позначено: позитивне;
    тип: адреса<ОбʼєктСтруктури>;
    властивості: Реєстр<адреса<Назва>, адреса<Обʼєкт>>;
    дані: Накопичувач<п8>;
  }

  структура СкладенийОбʼєкт {
    попередній_обʼєкт: адреса<Обʼєкт>;
    позначено: позитивне;
    тип: адреса<ОбʼєктСтруктури>;
    властивості: Реєстр<адреса<Назва>, адреса<Обʼєкт>>;
  }

  структура СтатичніНазви {
    чародія_отримати_елемент: адреса<Назва>;
    чародія_змінити_елемент: адреса<Назва>;
    чародія_видалити_елемент: адреса<Назва>;
    чародія_виконати: адреса<Назва>;
    чародія_перебір: адреса<Назва>;
    чародія_додати: адреса<Назва>;
    чародія_відняти: адреса<Назва>;
    чародія_помножити: адреса<Назва>;
    чародія_поділити: адреса<Назва>;
    чародія_остача: адреса<Назва>;
    чародія_неповна_частка: адреса<Назва>;
    чародія_степінь: адреса<Назва>;
    чародія_вліво: адреса<Назва>;
    чародія_вправо: адреса<Назва>;
    чародія_вправо_зі_заповненням: адреса<Назва>;
    чародія_двійкове_і: адреса<Назва>;
    чародія_двійкове_або: адреса<Назва>;
    чародія_двійкове_виключне_або: адреса<Назва>;
    чародія_двійкове_не: адреса<Назва>;
    чародія_більше: адреса<Назва>;
    чародія_менше: адреса<Назва>;
    чародія_містить: адреса<Назва>;
    чародія_відʼємне: адреса<Назва>;
    чародія_число: адреса<Назва>;
    чародія_текст: адреса<Назва>;
    чародія_юнікод: адреса<Назва>;
    чародія_список: адреса<Назва>;
    чародія_словник: адреса<Назва>;
    чародія_збільшити: адреса<Назва>;
    чародія_зменшити: адреса<Назва>;
    чародія_байти: адреса<Назва>;
    предок: адреса<Назва>;
    обʼєкт: адреса<Назва>;
    Структура: адреса<Назва>;
    НативнаДія: адреса<Назва>;
    Дія: адреса<Назва>;
    число: адреса<Назва>;
    текст: адреса<Назва>;
    юнікод: адреса<Назва>;
    друк: адреса<Назва>;
    модуль: адреса<Назва>;
    біб: адреса<Назва>;
    пак: адреса<Назва>;
    Модуль: адреса<Назва>;
    список: адреса<Назва>;
    словник: адреса<Назва>;
    логічне: адреса<Назва>;
    так: адреса<Назва>;
    ні: адреса<Назва>;
    додати: адреса<Назва>;
    значення: адреса<Назва>;
    назва: адреса<Назва>;
    забрати: адреса<Назва>;
    ключ: адреса<Назва>;
    розмір: адреса<Назва>;
    довжина: адреса<Назва>;
    фільтрувати: адреса<Назва>;
    д: адреса<Назва>;
    новий_список: адреса<Назва>;
    знайти: адреса<Назва>;
    знайти_позицію: адреса<Назва>;
    перетворити: адреса<Назва>;
    обернути: адреса<Назва>;
    М: адреса<Назва>;
    мавка: адреса<Назва>;
    МаМа: адреса<Назва>;
    перебір: адреса<Назва>;
    далі: адреса<Назва>;
    сп: адреса<Назва>;
    позиція: адреса<Назва>;
    визначення: адреса<Назва>;
    ключі: адреса<Назва>;
    видалити: адреса<Назва>;
    байти: адреса<Назва>;
    байт: адреса<Назва>;
    читати: адреса<Назва>;
    читати_юнікод: адреса<Назва>;
    префікс: адреса<Назва>;
  }

  структура БазаНазв {
    дані: Накопичувач<адреса<Назва>>;
    С: СтатичніНазви;
  }

  структура МісцезнаходженняПадіння {
    шлях_до_файлу: Ю8;
    рядок: позитивне;
  }

  структура ЕлементІсторіїВиконання {
    обʼєкт_дії: адреса<ОбʼєктДії>;
    середовище: адреса<Середовище>;
  }

  структура Середовище {
    наступне_середовище: адреса<Середовище>;
    позначено: позитивне;
    батьківське: адреса<Середовище>;
    субʼєкти: Реєстр<адреса<Назва>, адреса<Обʼєкт>>;
    обʼєкт_модуля: адреса<ОбʼєктМодуля>;
    обʼєкт_я: адреса<Обʼєкт>;
  }

  структура Система {
    виділити_памʼять: (М: адреса<Машина>, розмір: позитивне) -> памʼять<п8>;
    перевиділити_памʼять: (М: адреса<Машина>, значення: памʼять<п8>, новий_розмір: позитивне) -> памʼять<п8>;
    звільнити_памʼять: (М: адреса<Машина>, значення: памʼять<п8>) -> ніщо;
    вивести: (М: адреса<Машина>, значення: памʼять<п8>, розмір: позитивне) -> ніщо;
    вивести_Ю8: (М: адреса<Машина>, значення: памʼять<п8>, розмір: позитивне) -> ніщо;
    померти: (М: адреса<Машина>, код: ц32) -> ніщо;
    підлога_д64: (М: адреса<Машина>, значення: д64) -> д64;
    піднести_до_степеня_д64: (М: адреса<Машина>, база: д64, експонента: д64) -> д64;
    негація_д64: (М: адреса<Машина>, значення: д64) -> д64;
    двійкова_негація_д64: (М: адреса<Машина>, значення: д64) -> д64;
    д64_в_Ю8: (М: адреса<Машина>, значення: д64, вихід: адреса<памʼять<п8>>, розмір_виходу: адреса<позитивне>) -> ніщо;
  }

  структура Машина {
    БН: БазаНазв;
    система: Система;
    утилізатор: Утилізатор;
    сховище_констант: Накопичувач<адреса<Обʼєкт>>; // накопичувач констант під час компіляції
    сховище_кодів: Накопичувач<адреса<Код>>; // накопичувач кодів під час компіляції
    історія: Накопичувач<ЕлементІсторіїВиконання>; // накопичувач історії виконання
    НатО: Накопичувач<адреса<Обʼєкт>>; // накопичувач тимчасових обʼєктів під час виконання
    НаО: Накопичувач<адреса<Обʼєкт>>; // загальний накопичувач обʼєктів під час виконання
    НаРАрг: Накопичувач<адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>>; // накопичувач реєстрів аргументів під час виконання
    НаРПар: Накопичувач<адреса<Реєстр<адреса<Назва>, Параметр>>>; // накопичувач реєстрів параметрів під час виконання
    НаН: Накопичувач<адреса<Назва>>; // накопичувач назв під час виконання
    ТрК: адреса<Код>; // тримач коду
    ТрН: адреса<Назва>; // тримач назви
    НаОТ: Накопичувач<адреса<Обʼєкт>>; // накопичувач обʼєктів типів під час виконання
    стан_падіння: позитивне; // стан падіння під час виконання
    місцезнаходження_падіння: адреса<МісцезнаходженняПадіння>; // місцезнаходження падіння під час виконання (якщо є стан падіння)
    історія_виконання_перед_падінням: Накопичувач<адреса<Обʼєкт>>; // історія виконання перед падінням під час виконання (якщо є стан падіння)
    глобальне_середовище: адреса<Середовище>;
    обробник_отримання_шляху_до_модуля: (М: адреса<Машина>, назва_паку: адреса<Назва>, шлях: Накопичувач<адреса<Назва>>, вихід: адреса<Ю8>) -> логічне;
    обробник_взяття_модуля: (М: адреса<Машина>, обʼєкт_модуля_запису: адреса<ОбʼєктМодуля>, ю8_шлях: Ю8) -> обʼєкт_або_стан_падіння;
    обробник_взяття_біб: (М: адреса<Машина>, обʼєкт_модуля_запису: адреса<ОбʼєктМодуля>, шлях: Накопичувач<адреса<Назва>>) -> обʼєкт_або_стан_падіння;
    взяті_модулі: Реєстр<Ю8, адреса<ОбʼєктМодуля>>;
    дані_виконувача: адреса;
    обʼєкт_структури_обʼєкт: адреса<ОбʼєктСтруктури>;
    обʼєкт_структури_Структура: адреса<ОбʼєктСтруктури>;
    обʼєкт_структури_Дія: адреса<ОбʼєктСтруктури>;
    обʼєкт_структури_НативнаДія: адреса<ОбʼєктСтруктури>;
    обʼєкт_структури_число: адреса<ОбʼєктСтруктури>;
    обʼєкт_структури_текст: адреса<ОбʼєктСтруктури>;
    обʼєкт_структури_юнікод: адреса<ОбʼєктСтруктури>;
    обʼєкт_структури_Модуль: адреса<ОбʼєктСтруктури>;
    обʼєкт_структури_список: адреса<ОбʼєктСтруктури>;
    обʼєкт_структури_словник: адреса<ОбʼєктСтруктури>;
    обʼєкт_структури_логічне: адреса<ОбʼєктСтруктури>;
    обʼєкт_структури_байти: адреса<ОбʼєктСтруктури>;
    обʼєкт_логічного_так: адреса<ОбʼєктЛогічного>;
    обʼєкт_логічного_ні: адреса<ОбʼєктЛогічного>;
    вивести: (М: адреса<Машина>, значення: памʼять<п8>, розмір: позитивне) -> ніщо;
    вивести_Ю8: (М: адреса<Машина>, значення: памʼять<п8>, розмір: позитивне) -> ніщо;
    померти: (М: адреса<Машина>, код: ц32) -> ніщо;
  }

  структура СтанРозмірівНакопичувачівМашини {
    розмір_історії: позитивне;
    розмір_НатО: позитивне;
    розмір_НаО: позитивне;
    розмір_НаРАрг: позитивне;
    розмір_НаРПар: позитивне;
    розмір_НаН: позитивне;
    значення_ТрК: адреса<Код>;
    значення_ТрН: адреса<Назва>;
    розмір_НаОТ: позитивне;
  }

  місцева дія зберегти_СРНМ(М: адреса<Машина>): СтанРозмірівНакопичувачівМашини;
  місцева дія відновити_СРНМ(М: адреса<Машина>, СРНМ: СтанРозмірівНакопичувачівМашини);
}

секція МаМа {
  місцева дія порахувати_розмір_КД(значення: памʼять<п8>): позитивне;
  місцева дія порахувати_розмір_Ю8(значення: памʼять<п8>): позитивне;
  місцева дія порахувати_розмір_Ю32(значення: памʼять<п32>): позитивне;

  місцева дія порівняти_КД(а: памʼять<п8>, б: памʼять<п8>): ціле;
  місцева дія порівняти_Ю8(а: Ю8, б: Ю8): ціле;
  місцева дія порівняти_Ю32(а: Ю32, б: Ю32): ціле;

  місцева дія вивести_Ю8(М: адреса<Машина>, значення: Ю8);
  місцева дія надрукувати_Ю8(М: адреса<Машина>, значення: Ю8);

  місцева дія перетворити_д64_в_Ю8(М: адреса<Машина>, значення: д64, вихід: адреса<Ю8>): позитивне;
  місцева дія перетворити_п64_в_ю8(М: адреса<Машина>, значення: п64): Ю8;

  місцева дія вивести_п64(М: адреса<Машина>, значення: п64);
  місцева дія надрукувати_п64(М: адреса<Машина>, значення: п64);
  місцева дія вивести_д64(М: адреса<Машина>, значення: д64);
  місцева дія надрукувати_д64(М: адреса<Машина>, значення: д64);

  місцева дія перевірити_чи_ю8_рівні(а: Ю8, б: Ю8): логічне;
  місцева дія виділити_копію_байтів(М: адреса<Машина>, вхід: памʼять<п8>, розмір_входу: позитивне, вихід: адреса<памʼять<п8>>): позитивне;
  місцева дія виділити_копію_КД(М: адреса<Машина>, вхід: памʼять<п8>, розмір_входу: позитивне, вихід: адреса<памʼять<п8>>): позитивне;
  місцева дія виділити_копію_Ю8(М: адреса<Машина>, вхід: Ю8, розмір_входу: позитивне, вихід: адреса<Ю8>): позитивне;
  місцева дія виділити_копію_Ю32(М: адреса<Машина>, вхід: Ю32, розмір_входу: позитивне, вихід: адреса<Ю32>): позитивне;
  місцева дія дізнатись_розмір_символа_юнікоду(перший_байт: п8): п8;
  місцева дія перекодувати_Ю8_в_Ю32(М: адреса<Машина>, вхід: Ю8, розмір_входу: позитивне, адреса_виходу: адреса<Ю32>): позитивне;
  місцева дія перекодувати_Ю32_в_Ю8(М: адреса<Машина>, вхід: Ю32, розмір_входу: позитивне, адреса_виходу: адреса<Ю8>): позитивне;

  дія fmod(a: д64, b: д64): д64 {
    вернути a - (a / b) * b;
  }
}

// Публічні дії, які можна безпечно використовувати для створення мови.
секція МаМа {
  дія виділити<Т>(М: адреса<Машина>): адреса<Т>;
  дія виділити<Т>(М: адреса<Машина>, кількість: позитивне): памʼять<Т>;
  дія перевиділити<Т>(М: адреса<Машина>, значення: памʼять<Т>, кількість: позитивне): памʼять<Т>;
  дія звільнити(М: адреса<Машина>, значення: адреса);

  дія виділити<Т>(М: адреса<Машина>): адреса<Т> {
    вернути М.система.виділити_памʼять(М, Т.розмір) як адреса<Т>;
  }

  дія виділити<Т>(М: адреса<Машина>, кількість: позитивне): памʼять<Т> {
    вернути М.система.виділити_памʼять(М, позитивне(кількість) * Т.розмір) як памʼять<Т>;
  }

  дія перевиділити<Т>(М: адреса<Машина>, значення: памʼять<Т>, кількість: позитивне): памʼять<Т> {
    вернути М.система.перевиділити_памʼять(М, значення як памʼять<п8>, позитивне(кількість) * Т.розмір) як памʼять<Т>;
  }

  дія звільнити(М: адреса<Машина>, значення: адреса) {
    М.система.звільнити_памʼять(М, значення як памʼять<п8>);
  }

  дія ПОМЕРТИ(М: адреса<Машина>, повідомлення: Ю8) {
    вивести_Ю8(М, ю8"ПРИЧИНА СМЕРТІ: ");
    надрукувати_Ю8(М, повідомлення);
    М.померти(М, 1);
  }

  // Машина
  місцева дія налаштувати_машину(М: адреса<Машина>, дані_виконувача: адреса, система: Система);
  місцева дія розлаштувати_машину(М: адреса<Машина>);
  місцева дія виконати_код(М: адреса<Машина>, середовище: адреса<Середовище>, код: адреса<Код>, обʼєкт_дії: адреса<ОбʼєктДії>, обʼєкт_модуля: адреса<ОбʼєктМодуля>, обʼєкт_я: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія виконати_код_в_середовищі(М: адреса<Машина>, середовище: адреса<Середовище>, код: адреса<Код>): обʼєкт_або_стан_падіння;
  місцева дія увімкнути_стан_падіння(М: адреса<Машина>, місцезнаходження_падіння: адреса<МісцезнаходженняПадіння>);
  місцева дія вимкнути_стан_падіння(М: адреса<Машина>);
  місцева дія покласти_константу(М: адреса<Машина>, обʼєкт: адреса<Обʼєкт>): позитивне;
  місцева дія взяти_модуль(М: адреса<Машина>, середовище: адреса<Середовище>, назва_паку: адреса<Назва>, шлях: Накопичувач<адреса<Назва>>): обʼєкт_або_стан_падіння;
  місцева дія взяти_модуль_за_шляхом(М: адреса<Машина>, середовище: адреса<Середовище>, назва_модуля: адреса<Назва>, шлях_до_модуля: Ю8): обʼєкт_або_стан_падіння;
  місцева дія взяти_біб(М: адреса<Машина>, шлях: Накопичувач<адреса<Назва>>): обʼєкт_або_стан_падіння;
  місцева дія покласти_тимчасове_середовище(М: адреса<Машина>): адреса<Середовище>;
  місцева дія забрати_тимчасове_середовище(М: адреса<Машина>);
  місцева дія зберегти_обʼєкт(М: адреса<Машина>, обʼєкт: адреса<Обʼєкт>);
  місцева дія видалити_збережений_обʼєкт(М: адреса<Машина>);

  // Середовище.
  місцева дія виділити_середовище(М: адреса<Машина>, батьківське: адреса<Середовище>): адреса<Середовище>;
  місцева дія змінити_в_середовищі(М: адреса<Машина>, середовище: адреса<Середовище>, назва: адреса<Назва>, обʼєкт: адреса<Обʼєкт>);
  місцева дія видалити_з_середовища(М: адреса<Машина>, середовище: адреса<Середовище>, назва: адреса<Назва>): логічне;
  місцева дія знайти_в_середовищі(М: адреса<Машина>, середовище: адреса<Середовище>, назва: адреса<Назва>): адреса<Обʼєкт>;
  місцева дія знайти_елемент_в_середовищі(М: адреса<Машина>, середовище: адреса<Середовище>, назва: адреса<Назва>): адреса<ЕлементРеєстру<адреса<Назва>, адреса<Обʼєкт>>>;

  // Назва!
  // Назви використовуються всюди, де потрібно вказати ідентифікатор (наприклад назва дії, назва структури, назва параметра і тд).
  // Кожна назва унікальна в межах Машини. Назва звільняється з памʼяті лише разом зі звільненням самої Машини.
  місцева дія назва_з_Ю8(М: адреса<Машина>, значення: Ю8): адреса<Назва>;
  місцева дія позиція_назви_з_ю8(М: адреса<Машина>, значення: Ю8): позитивне;
  місцева дія виділити_ю8_з_назви(М: адреса<Машина>, назва: адреса<Назва>, вихід: адреса<Ю8>): логічне;
  місцева дія перевірити_чи_назва_чародія(М: адреса<Машина>, назва: адреса<Назва>): логічне;

  // Код!
  // Код зберігає вказівки які виконує Машина, а також їх місцезнаходження (рядок).
  // Код наразі звільняється з памʼяті лише разом зі звільненням самої Машини.
  місцева дія виділити_код(М: адреса<Машина>, шлях_до_файлу: Ю8): адреса<Код>;
  місцева дія звільнити_код(М: адреса<Машина>, код: адреса<Код>);
  місцева дія надрукувати_код(М: адреса<Машина>, код: адреса<Код>);
  місцева дія покласти_вказівку_ПокластиПусто(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ПокластиТак(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ПокластиНі(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ПокластиКонстанту(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_константи: позитивне): позитивне;
  місцева дія покласти_вказівку_СтворитиДію(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_коду: позитивне): позитивне;
  місцева дія покласти_вказівку_СтворитиСтруктуру(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_СтворитиМодуль(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_коду: позитивне): позитивне;
  місцева дія покласти_вказівку_СтворитиСписок(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, розмір: позитивне): позитивне;
  місцева дія покласти_вказівку_ПокластиВСписок(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_СтворитиСловник(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, розмір: позитивне): позитивне;
  місцева дія покласти_вказівку_ПокластиВСловник(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ПокластиСтруктуруОбʼєкт(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ПокластиЯ(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ЗаписатиМетод(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_назви: позитивне): позитивне;
  місцева дія покласти_вказівку_Визначити(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_назви: позитивне): позитивне;
  місцева дія покласти_вказівку_Звернутись(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_назви: позитивне): позитивне;
  місцева дія покласти_вказівку_Виконати(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, кількість_аргументів: позитивне): позитивне;
  місцева дія покласти_вказівку_ВиконатиЗНазвами(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, кількість_аргументів: позитивне): позитивне;
  місцева дія покласти_вказівку_ОтриматиВластивість(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_назви: позитивне): позитивне;
  місцева дія покласти_вказівку_ЗмінитиВластивість(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_назви: позитивне): позитивне;
  місцева дія покласти_вказівку_ВиконатиВластивість(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_назви: позитивне, кількість_аргументів: позитивне): позитивне;
  місцева дія покласти_вказівку_ВиконатиВластивістьЗНазвами(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_назви: позитивне, кількість_аргументів: позитивне): позитивне;
  місцева дія покласти_вказівку_ОтриматиЕлемент(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ЗмінитиЕлемент(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ОтриматиПеребір(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ВизначитиЗзовні(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_назви: позитивне): позитивне;
  місцева дія покласти_вказівку_ВиконатиЗПредка(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_назви: позитивне, кількість_аргументів: позитивне): позитивне;
  місцева дія покласти_вказівку_ВиконатиЗПредкаЗНазвами(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_назви: позитивне, кількість_аргументів: позитивне): позитивне;
  місцева дія покласти_вказівку_Видалити(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_назви: позитивне): позитивне;
  місцева дія покласти_вказівку_ВидалитиВластивість(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_назви: позитивне): позитивне;
  місцева дія покласти_вказівку_ВидалитиЕлемент(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_Додати(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_Відняти(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_Помножити(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_Поділити(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ОтриматиОстачуДілення(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ОтриматиНеповнуЧасткуДілення(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ПіднестиДоСтепеня(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ЗсунутиВліво(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ЗсунутиВправо(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ЗсунутиВправоЗіЗаповненням(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ДвійковеІ(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ДвійковеАБО(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ДвійковеВиключнеАБО(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ДвійковеНЕ(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_Менше(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_Більше(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_НеБільше(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_НеМенше(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_Рівно(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_НеРівно(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_Містить(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_НеМістить(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_Є(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_НеЄ(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_Відʼємне(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_Числове(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_Заперечити(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_Збільшити(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ЗбільшитиПопереднє(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_Зменшити(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ПочатиСпробу(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_вказівки_зловити: позитивне): позитивне;
  місцева дія покласти_вказівку_ПочатиСпробуЗНазвою(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_вказівки_зловити: позитивне, позиція_назви: позитивне): позитивне;
  місцева дія покласти_вказівку_ПеребратиДалі(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_Впасти(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ЗакінчитиСпробу(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_вказівки_виходу: позитивне): позитивне;
  місцева дія покласти_вказівку_Взяти(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_назви: позитивне): позитивне;
  місцева дія покласти_вказівку_Дати(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_назви: позитивне): позитивне;
  місцева дія покласти_вказівку_ПокластиРеєстрАргументівЗНазвами(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ЗареєструватиАргументЗНазвою(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_назви: позитивне): позитивне;
  місцева дія покласти_вказівку_ПокластиРеєстрПараметрів(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ЗареєструватиПараметр(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_назви: позитивне, кількість_типів: позитивне): позитивне;
  місцева дія покласти_вказівку_ТриматиКод(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_коду: позитивне): позитивне;
  місцева дія покласти_вказівку_НакопичитиНазву(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_назви: позитивне): позитивне;
  місцева дія покласти_вказівку_ТриматиНазву(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_назви: позитивне): позитивне;
  місцева дія покласти_вказівку_Стрибнути(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_вказівки: позитивне): позитивне;
  місцева дія покласти_вказівку_СтрибнутиЯкщоНі(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_вказівки: позитивне): позитивне;
  місцева дія покласти_вказівку_СтрибнутиЯкщоНіЗалишивши(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_вказівки: позитивне): позитивне;
  місцева дія покласти_вказівку_СтрибнутиЯкщоТак(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_вказівки: позитивне): позитивне;
  місцева дія покласти_вказівку_СтрибнутиЯкщоТакЗалишивши(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне, позиція_вказівки: позитивне): позитивне;
  місцева дія покласти_вказівку_Дублювати(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_ДублюватиПопереднє(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_Забрати(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;
  місцева дія покласти_вказівку_Вернути(М: адреса<Машина>, код: адреса<Код>, рядок: позитивне): позитивне;

  // Обʼєкти.
  // Обʼєкт є основою МаМа. Більшість вказівок Машини Мавки стосуються саме обʼєктів.
  // МаМа має декілька видів обʼєктів: ОбʼєктСтруктури, ОбʼєктДії, ОбʼєктНативноїДії, ОбʼєктЧисла, ОбʼєктТексту, ОбʼєктЮнікоду, ОбʼєктМодуля, ОбʼєктСписку, ОбʼєктСловника, ОбʼєктЛогічного, ОбʼєктБайтів та СкладенийОбʼєкт.
  місцева дія виділити_обʼєкт_структури(М: адреса<Машина>, назва: адреса<Назва>, предок: адреса<ОбʼєктСтруктури>): адреса<ОбʼєктСтруктури>;
  місцева дія додати_метод_до_обʼєкта_структури(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, назва: адреса<Назва>, обʼєкт_дії: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія виділити_обʼєкт_дії(М: адреса<Машина>, назва: адреса<Назва>, параметри: адреса<Реєстр<адреса<Назва>, Параметр>>, середовище_створення: адреса<Середовище>, код: адреса<Код>, типи_результату: Накопичувач<адреса<ОбʼєктСтруктури>>): адреса<ОбʼєктДії>;
  місцева дія виділити_обʼєкт_нативної_дії(М: адреса<Машина>, назва: адреса<Назва>, нативна_дія: НативнаДія, дані: адреса, відклик_перед_звільненням: ВідкликПередЗвільненнямОбʼєктаНативноїДії): адреса<ОбʼєктНативноїДії>;
  місцева дія виділити_обʼєкт_числа(М: адреса<Машина>, значення: д64): адреса<ОбʼєктЧисла>;
  місцева дія виділити_обʼєкт_тексту(М: адреса<Машина>, значення: памʼять<п8>): адреса<ОбʼєктТексту>;
  місцева дія виділити_обʼєкт_тексту_з_ю8(М: адреса<Машина>, значення: Ю8): адреса<ОбʼєктТексту>;
  місцева дія виділити_обʼєкт_юнікоду(М: адреса<Машина>, значення: Ю32): адреса<ОбʼєктЮнікоду>;
  місцева дія виділити_обʼєкт_юнікоду_з_ю8(М: адреса<Машина>, значення: Ю8): адреса<ОбʼєктЮнікоду>;
  місцева дія виділити_обʼєкт_модуля(М: адреса<Машина>, назва: адреса<Назва>): адреса<ОбʼєктМодуля>;
  місцева дія виділити_обʼєкт_списку(М: адреса<Машина>): адреса<ОбʼєктСписку>;
  місцева дія виділити_обʼєкт_словника(М: адреса<Машина>): адреса<ОбʼєктСловника>;
  місцева дія виділити_обʼєкт_логічного(М: адреса<Машина>, значення: логічне): адреса<ОбʼєктЛогічного>;
  місцева дія виділити_обʼєкт_байтів(М: адреса<Машина>, розмір: позитивне): адреса<ОбʼєктБайтів>;
  місцева дія виділити_складений_обʼєкт(М: адреса<Машина>, тип: адреса<ОбʼєктСтруктури>): адреса<СкладенийОбʼєкт>;
  // а()
  місцева дія обʼєкт_виконати(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_виконати(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_виконати(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_виконати(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_виконати(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_виконати(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_виконати(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_виконати(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_виконати(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_виконати(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_виконати(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_виконати(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_виконати(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  // а.б
  місцева дія обʼєкт_отримати_властивість(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_отримати_властивість(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_отримати_властивість(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_отримати_властивість(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_отримати_властивість(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_отримати_властивість(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_отримати_властивість(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_отримати_властивість(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_отримати_властивість(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_отримати_властивість(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_отримати_властивість(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_отримати_властивість(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_отримати_властивість(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  // а.б = в
  місцева дія обʼєкт_змінити_властивість(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_змінити_властивість(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_змінити_властивість(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_змінити_властивість(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_змінити_властивість(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_змінити_властивість(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_змінити_властивість(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_змінити_властивість(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_змінити_властивість(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_змінити_властивість(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_змінити_властивість(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_змінити_властивість(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_змінити_властивість(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // видалити а.б
  місцева дія обʼєкт_видалити_властивість(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_видалити_властивість(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_видалити_властивість(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_видалити_властивість(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_видалити_властивість(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_видалити_властивість(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_видалити_властивість(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_видалити_властивість(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_видалити_властивість(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_видалити_властивість(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_видалити_властивість(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_видалити_властивість(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_видалити_властивість(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння;
  // а.б(в)
  місцева дія обʼєкт_виконати_властивість(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_виконати_властивість(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_виконати_властивість(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_виконати_властивість(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_виконати_властивість(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_виконати_властивість(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_виконати_властивість(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_виконати_властивість(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_виконати_властивість(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_виконати_властивість(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_виконати_властивість(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_виконати_властивість(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_виконати_властивість(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння;
  // чародія_отримати_елемент (а[б])
  місцева дія обʼєкт_отримати_елемент(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_отримати_елемент(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_отримати_елемент(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_отримати_елемент(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_отримати_елемент(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_отримати_елемент(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_отримати_елемент(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_отримати_елемент(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_отримати_елемент(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_отримати_елемент(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_отримати_елемент(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_отримати_елемент(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_отримати_елемент(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // чародія_змінити_елемент (а[б] = в)
  місцева дія обʼєкт_змінити_елемент(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_змінити_елемент(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_змінити_елемент(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_змінити_елемент(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_змінити_елемент(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_змінити_елемент(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_змінити_елемент(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_змінити_елемент(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_змінити_елемент(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_змінити_елемент(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_змінити_елемент(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_змінити_елемент(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_змінити_елемент(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // чародія_видалити_елемент (видалити а[б])
  місцева дія обʼєкт_видалити_елемент(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_видалити_елемент(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_видалити_елемент(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_видалити_елемент(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_видалити_елемент(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_видалити_елемент(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_видалити_елемент(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_видалити_елемент(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_видалити_елемент(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_видалити_елемент(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_видалити_елемент(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_видалити_елемент(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_видалити_елемент(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // чародія_перебір (перебрати)
  місцева дія обʼєкт_отримати_перебір(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_отримати_перебір(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_отримати_перебір(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_отримати_перебір(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_отримати_перебір(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_отримати_перебір(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_отримати_перебір(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_отримати_перебір(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_отримати_перебір(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_отримати_перебір(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_отримати_перебір(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_отримати_перебір(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_отримати_перебір(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  // чародія_додати (+)
  місцева дія обʼєкт_додати(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_додати(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_додати(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_додати(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_додати(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_додати(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_додати(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_додати(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_додати(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_додати(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_додати(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_додати(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_додати(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // чародія_відняти (-)
  місцева дія обʼєкт_відняти(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_відняти(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_відняти(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_відняти(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_відняти(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_відняти(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_відняти(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_відняти(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_відняти(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_відняти(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_відняти(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_відняти(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_відняти(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // чародія_помножити (*)
  місцева дія обʼєкт_помножити(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_помножити(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_помножити(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_помножити(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_помножити(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_помножити(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_помножити(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_помножити(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_помножити(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_помножити(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_помножити(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_помножити(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_помножити(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // чародія_поділити (/)
  місцева дія обʼєкт_поділити(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_поділити(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_поділити(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_поділити(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_поділити(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_поділити(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_поділити(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_поділити(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_поділити(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_поділити(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_поділити(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_поділити(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_поділити(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // чародія_остача (%)
  місцева дія обʼєкт_отримати_остачу_ділення(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_отримати_остачу_ділення(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_отримати_остачу_ділення(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_отримати_остачу_ділення(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_отримати_остачу_ділення(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_отримати_остачу_ділення(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_отримати_остачу_ділення(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_отримати_остачу_ділення(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_отримати_остачу_ділення(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_отримати_остачу_ділення(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_отримати_остачу_ділення(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_отримати_остачу_ділення(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_отримати_остачу_ділення(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // чародія_неповна_частка (//)
  місцева дія обʼєкт_отримати_неповну_частку_ділення(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_отримати_частку_ділення(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_отримати_частку_ділення(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_отримати_частку_ділення(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_отримати_частку_ділення(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_отримати_частку_ділення(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_отримати_частку_ділення(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_отримати_частку_ділення(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_отримати_частку_ділення(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_отримати_частку_ділення(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_отримати_частку_ділення(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_отримати_частку_ділення(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_отримати_неповну_частку_ділення(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // чародія_степінь (**)
  місцева дія обʼєкт_піднести_до_степеня(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_піднести_до_степеня(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_піднести_до_степеня(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_піднести_до_степеня(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_піднести_до_степеня(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_піднести_до_степеня(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_піднести_до_степеня(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_піднести_до_степеня(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_піднести_до_степеня(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_піднести_до_степеня(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_піднести_до_степеня(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_піднести_до_степеня(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_піднести_до_степеня(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // чародія_вліво (<<)
  місцева дія обʼєкт_зсунути_вліво(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_зсунути_вліво(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_зсунути_вліво(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_зсунути_вліво(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_зсунути_вліво(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_зсунути_вліво(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_зсунути_вліво(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_зсунути_вліво(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_зсунути_вліво(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_зсунути_вліво(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_зсунути_вліво(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_зсунути_вліво(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_зсунути_вліво(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // чародія_вправо (>>)
  місцева дія обʼєкт_зсунути_вправо(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_зсунути_вправо(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_зсунути_вправо(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_зсунути_вправо(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_зсунути_вправо(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_зсунути_вправо(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_зсунути_вправо(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_зсунути_вправо(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_зсунути_вправо(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_зсунути_вправо(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_зсунути_вправо(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_зсунути_вправо(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_зсунути_вправо(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // чародія_вправо_зі_заповненням (>>>)
  місцева дія обʼєкт_зсунути_вправо_зі_заповненням(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_зсунути_вправо_зі_заповненням(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_зсунути_вправо_зі_заповненням(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_зсунути_вправо_зі_заповненням(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_зсунути_вправо_зі_заповненням(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_зсунути_вправо_зі_заповненням(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_зсунути_вправо_зі_заповненням(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_зсунути_вправо_зі_заповненням(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_зсунути_вправо_зі_заповненням(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_зсунути_вправо_зі_заповненням(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_зсунути_вправо_зі_заповненням(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_зсунути_вправо_зі_заповненням(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_зсунути_вправо_зі_заповненням(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // чародія_двійкове_і (&)
  місцева дія обʼєкт_двійкове_і(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_двійкове_і(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_двійкове_і(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_двійкове_і(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_двійкове_і(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_двійкове_і(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_двійкове_і(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_двійкове_і(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_двійкове_і(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_двійкове_і(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_двійкове_і(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_двійкове_і(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_двійкове_і(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // чародія_двійкове_або (|)
  місцева дія обʼєкт_двійкове_або(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_двійкове_або(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_двійкове_або(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_двійкове_або(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_двійкове_або(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_двійкове_або(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_двійкове_або(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_двійкове_або(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_двійкове_або(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_двійкове_або(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_двійкове_або(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_двійкове_або(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_двійкове_або(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // чародія_двійкове_виключне_або (^)
  місцева дія обʼєкт_двійкове_виключне_або(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_двійкове_виключне_або(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_двійкове_виключне_або(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_двійкове_виключне_або(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_двійкове_виключне_або(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_двійкове_виключне_або(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_двійкове_виключне_або(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_двійкове_виключне_або(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_двійкове_виключне_або(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_двійкове_виключне_або(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_двійкове_виключне_або(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_двійкове_виключне_або(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_двійкове_виключне_або(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // чародія_двійкове_не (~)
  місцева дія обʼєкт_двійкове_не(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_двійкове_не(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_двійкове_не(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_двійкове_не(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_двійкове_не(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_двійкове_не(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_двійкове_не(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_двійкове_не(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_двійкове_не(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_двійкове_не(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_двійкове_не(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_двійкове_не(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_двійкове_не(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  // чародія_більше (>)
  місцева дія обʼєкт_більше(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_більше(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_більше(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_більше(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_більше(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_більше(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_більше(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_більше(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_більше(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_більше(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_більше(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_більше(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_більше(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // чародія_менше (<)
  місцева дія обʼєкт_менше(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_менше(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_менше(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_менше(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_менше(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_менше(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_менше(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_менше(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_менше(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_менше(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_менше(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_менше(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_менше(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // рівно (==)
  місцева дія обʼєкт_рівно(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_рівно(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_рівно(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_рівно(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_рівно(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_рівно(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_рівно(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_рівно(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_рівно(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_рівно(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_рівно(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_рівно(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_рівно(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // чародія_містить (містить)
  місцева дія обʼєкт_містить(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_містить(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_містить(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_містить(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_містить(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_містить(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_містить(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_містить(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_містить(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_містить(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_містить(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_містить(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_містить(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // є
  місцева дія обʼєкт_є(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_є(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_є(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_є(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_є(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_є(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_є(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_є(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_є(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_є(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_є(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_є(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_є(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння;
  // чародія_відʼємне (-...)
  місцева дія обʼєкт_відʼємне(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_відʼємне(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_відʼємне(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_відʼємне(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_відʼємне(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_відʼємне(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_відʼємне(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_відʼємне(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_відʼємне(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_відʼємне(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_відʼємне(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_відʼємне(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_відʼємне(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  // чародія_число (+...)
  місцева дія обʼєкт_числове(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_числове(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_числове(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_числове(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_числове(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_числове(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_числове(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_числове(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_числове(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_числове(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_числове(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_числове(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_числове(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  // !...
  місцева дія обʼєкт_заперечити(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_заперечити(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_заперечити(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_заперечити(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_заперечити(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_заперечити(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_заперечити(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_заперечити(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_заперечити(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_заперечити(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_заперечити(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_заперечити(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_заперечити(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  // чародія_збільшити
  місцева дія обʼєкт_збільшити(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_збільшити(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_збільшити(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_збільшити(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_збільшити(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_збільшити(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_збільшити(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_збільшити(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_збільшити(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_збільшити(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_збільшити(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_збільшити(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_збільшити(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  // чародія_зменшити
  місцева дія обʼєкт_зменшити(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_структури_зменшити(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_дії_зменшити(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_нативної_дії_зменшити(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_числа_зменшити(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_тексту_зменшити(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_юнікоду_зменшити(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_модуля_зменшити(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_списку_зменшити(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_словника_зменшити(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_логічного_зменшити(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія обʼєкт_байтів_зменшити(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>): обʼєкт_або_стан_падіння;
  місцева дія складений_обʼєкт_зменшити(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>): обʼєкт_або_стан_падіння;

  місцева дія перевірити_чи_обʼєкт_рівно(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне;
  місцева дія перевірити_чи_обʼєкт_структури_рівно(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне;
  місцева дія перевірити_чи_обʼєкт_дії_рівно(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне;
  місцева дія перевірити_чи_обʼєкт_нативної_дії_рівно(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне;
  місцева дія перевірити_чи_обʼєкт_числа_рівно(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне;
  місцева дія перевірити_чи_обʼєкт_тексту_рівно(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне;
  місцева дія перевірити_чи_обʼєкт_юнікоду_рівно(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне;
  місцева дія перевірити_чи_обʼєкт_модуля_рівно(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне;
  місцева дія перевірити_чи_обʼєкт_списку_рівно(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне;
  місцева дія перевірити_чи_обʼєкт_словника_рівно(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне;
  місцева дія перевірити_чи_обʼєкт_логічного_рівно(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне;
  місцева дія перевірити_чи_обʼєкт_байтів_рівно(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне;
  місцева дія перевірити_чи_складений_обʼєкт_рівно(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне;

  місцева дія перевірити_чи_обʼєкт_є(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне;
  місцева дія перевірити_чи_обʼєкт_структури_є(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне;
  місцева дія перевірити_чи_обʼєкт_дії_є(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне;
  місцева дія перевірити_чи_обʼєкт_нативної_дії_є(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне;
  місцева дія перевірити_чи_обʼєкт_числа_є(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне;
  місцева дія перевірити_чи_обʼєкт_тексту_є(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне;
  місцева дія перевірити_чи_обʼєкт_юнікоду_є(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне;
  місцева дія перевірити_чи_обʼєкт_модуля_є(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне;
  місцева дія перевірити_чи_обʼєкт_списку_є(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне;
  місцева дія перевірити_чи_обʼєкт_словника_є(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне;
  місцева дія перевірити_чи_обʼєкт_логічного_є(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне;
  місцева дія перевірити_чи_обʼєкт_байтів_є(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне;
  місцева дія перевірити_чи_складений_обʼєкт_є(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне;

  місцева дія перевірити_чи_обʼєкт_виражається_логічним_так(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): логічне;
  місцева дія перевірити_чи_обʼєкт_структури_доступний_для_наслідування(М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне;
  місцева дія виділити_обʼєкт_з_назви(М: адреса<Машина>, назва: адреса<Назва>): адреса<Обʼєкт>;
  місцева дія перевірити_чи_обʼєкт_є_дією(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): логічне;
  місцева дія перевірити_чи_обʼєкт_є_нативною_дією(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): логічне;
  місцева дія перевірити_чи_обʼєкт_є_числом(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): логічне;
  місцева дія перевірити_чи_обʼєкт_є_текстом(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): логічне;
  місцева дія перевірити_чи_обʼєкт_є_юнікодом(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): логічне;
  місцева дія перевірити_чи_обʼєкт_є_модулем(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): логічне;
  місцева дія перевірити_чи_обʼєкт_є_списком(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): логічне;
  місцева дія перевірити_чи_обʼєкт_є_словником(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): логічне;
  місцева дія перевірити_чи_обʼєкт_є_логічним(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): логічне;
  місцева дія перевірити_чи_обʼєкт_є_байтами(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>): логічне;

  місцева дія записати_в_байти(обʼєкт: адреса<ОбʼєктБайтів>, М: адреса<Машина>, дані: памʼять<п8>, розмір: позитивне, зсув: позитивне);

  місцева дія отримати_копію_даних_тексту(обʼєкт: адреса<ОбʼєктТексту>, М: адреса<Машина>, вихід: адреса<памʼять<п8>>): позитивне;
  місцева дія отримати_дані_тексту(обʼєкт: адреса<ОбʼєктТексту>, М: адреса<Машина>, вихід: адреса<памʼять<п8>>): позитивне;
  місцева дія отримати_копію_даних_юнікоду(обʼєкт: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, вихід: адреса<памʼять<п32>>): позитивне;
  місцева дія отримати_дані_юнікоду(обʼєкт: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, вихід: адреса<памʼять<п32>>): позитивне;
  місцева дія отримати_копію_даних_юнікоду_як_Ю8(обʼєкт: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, вихід: адреса<памʼять<п8>>): позитивне;
  місцева дія отримати_копію_даних_байтів(обʼєкт: адреса<ОбʼєктБайтів>, М: адреса<Машина>, вихід: адреса<памʼять<п8>>): позитивне;
  місцева дія отримати_дані_байтів(обʼєкт: адреса<ОбʼєктБайтів>, М: адреса<Машина>, вихід: адреса<памʼять<п8>>): позитивне;

  місцева дія надрукувати_обʼєкт(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, глибина: позитивне);
  місцева дія надрукувати_обʼєкт_в_накопичувач_ю8(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне);
  місцева дія надрукувати_обʼєкт_структури_в_накопичувач_ю8(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне);
  місцева дія надрукувати_обʼєкт_дії_в_накопичувач_ю8(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне);
  місцева дія надрукувати_обʼєкт_нативної_дії_в_накопичувач_ю8(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне);
  місцева дія надрукувати_обʼєкт_числа_в_накопичувач_ю8(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне);
  місцева дія надрукувати_обʼєкт_тексту_в_накопичувач_ю8(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне);
  місцева дія надрукувати_обʼєкт_юнікоду_в_накопичувач_ю8(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне);
  місцева дія надрукувати_обʼєкт_модуля_в_накопичувач_ю8(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне);
  місцева дія надрукувати_обʼєкт_списку_в_накопичувач_ю8(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне);
  місцева дія надрукувати_обʼєкт_словника_в_накопичувач_ю8(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне);
  місцева дія надрукувати_обʼєкт_логічного_в_накопичувач_ю8(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне);
  місцева дія надрукувати_обʼєкт_байтів_в_накопичувач_ю8(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне);
  місцева дія надрукувати_складений_обʼєкт_в_накопичувач_ю8(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне);

  // Утилізатор.
  місцева дія утилізувати(М: адреса<Машина>);
}

// Приватні дії, що використовуються в самій МаМа.
секція МаМа {
  місцева дія перевірити_чи_назви_рівні(назва1: адреса<Назва>, назва2: адреса<Назва>): логічне;
  місцева дія виділити_назву(М: адреса<Машина>, кодування: позитивне, значення: памʼять<п8>): адреса<Назва>;
  місцева дія зробити_базу_назв(М: адреса<Машина>): БазаНазв;
  місцева дія додати_назву_з_ю8(М: адреса<Машина>, БН: адреса<БазаНазв>, значення: Ю8): позитивне;
  місцева дія знайти_або_виділити_й_додати_назву_з_ю8(М: адреса<Машина>, БН: адреса<БазаНазв>, значення: Ю8): адреса<Назва>;

  місцева дія додати_вказівку_до_коду(код: адреса<Код>, рядок: позитивне, вказівка: позитивне): позитивне;
  місцева дія додати_вказівку_до_коду_з_аргументом(код: адреса<Код>, рядок: позитивне, вказівка: позитивне, аргумент: позитивне): позитивне;
  місцева дія додати_вказівку_до_коду_з_двома_аргументами(код: адреса<Код>, рядок: позитивне, вказівка: позитивне, аргумент1: позитивне, аргумент2: позитивне): позитивне;
  місцева дія знайти_місцезнаходження_вказівки(код: адреса<Код>, позиція_вказівки: позитивне): адреса<МісцезнаходженняВказівки>;

  дія виділити_обʼєкт<Т>(М: адреса<Машина>, тип: адреса<ОбʼєктСтруктури>): адреса<Т> {
    ціль обʼєкт = виділити<Т>(М);
    обʼєкт.попередній_обʼєкт = М.утилізатор.останній_обʼєкт;
    обʼєкт.позначено = позитивне(ні);
    обʼєкт.тип = тип;
    М.утилізатор.останній_обʼєкт = обʼєкт як адреса<Обʼєкт>;
    М.утилізатор.кількість_обʼєктів = М.утилізатор.кількість_обʼєктів + 1;
    вернути обʼєкт;
  }
  місцева дія створити_структуру_числа(М: адреса<Машина>): адреса<ОбʼєктСтруктури>;
  місцева дія створити_структуру_тексту(М: адреса<Машина>): адреса<ОбʼєктСтруктури>;
  місцева дія створити_структуру_юнікоду(М: адреса<Машина>): адреса<ОбʼєктСтруктури>;
  місцева дія створити_структуру_списку(М: адреса<Машина>): адреса<ОбʼєктСтруктури>;
  місцева дія створити_структуру_словника(М: адреса<Машина>): адреса<ОбʼєктСтруктури>;
  місцева дія створити_структуру_модуля(М: адреса<Машина>): адреса<ОбʼєктСтруктури>;
  місцева дія створити_структуру_логічного(М: адреса<Машина>): адреса<ОбʼєктСтруктури>;
  місцева дія створити_структуру_байтів(М: адреса<Машина>): адреса<ОбʼєктСтруктури>;

  місцева дія зробити_утилізатор(М: адреса<Машина>): Утилізатор;
  місцева дія позначити(М: адреса<Машина>);
  місцева дія позначити_властивості(М: адреса<Машина>, властивості: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>);
  місцева дія позначити_параметри(М: адреса<Машина>, параметри: адреса<Реєстр<адреса<Назва>, Параметр>>);
  місцева дія позначити_методи(М: адреса<Машина>, методи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>);
  місцева дія позначити_обʼєкт(М: адреса<Машина>, обʼєкт: адреса<Обʼєкт>);
  місцева дія позначити_обʼєкт_структури(М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>);
  місцева дія позначити_обʼєкт_дії(М: адреса<Машина>, обʼєкт_дії: адреса<ОбʼєктДії>);
  місцева дія позначити_обʼєкт_нативної_дії(М: адреса<Машина>, обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>);
  місцева дія позначити_обʼєкт_числа(М: адреса<Машина>, обʼєкт_числа: адреса<ОбʼєктЧисла>);
  місцева дія позначити_обʼєкт_тексту(М: адреса<Машина>, обʼєкт_тексту: адреса<ОбʼєктТексту>);
  місцева дія позначити_обʼєкт_юнікоду(М: адреса<Машина>, обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>);
  місцева дія позначити_обʼєкт_модуля(М: адреса<Машина>, обʼєкт_модуля: адреса<ОбʼєктМодуля>);
  місцева дія позначити_обʼєкт_списку(М: адреса<Машина>, обʼєкт_списку: адреса<ОбʼєктСписку>);
  місцева дія позначити_обʼєкт_словника(М: адреса<Машина>, обʼєкт_словника: адреса<ОбʼєктСловника>);
  місцева дія позначити_обʼєкт_логічного(М: адреса<Машина>, обʼєкт_логічного: адреса<ОбʼєктЛогічного>);
  місцева дія позначити_обʼєкт_байтів(М: адреса<Машина>, обʼєкт_байтів: адреса<ОбʼєктБайтів>);
  місцева дія позначити_складений_обʼєкт(М: адреса<Машина>, складений_обʼєкт: адреса<СкладенийОбʼєкт>);
  місцева дія звільнити_обʼєкт(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>);
  місцева дія звільнити_реєстр_параметрів(М: адреса<Машина>, реєстр_параметрів: адреса<Реєстр<адреса<Назва>, Параметр>>);
  місцева дія звільнити_обʼєкт_структури(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>);
  місцева дія звільнити_обʼєкт_дії(обʼєкт_дії: адреса<ОбʼєктДії>, М: адреса<Машина>);
  місцева дія звільнити_обʼєкт_нативної_дії(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>);
  місцева дія звільнити_обʼєкт_числа(обʼєкт_числа: адреса<ОбʼєктЧисла>, М: адреса<Машина>);
  місцева дія звільнити_обʼєкт_тексту(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>);
  місцева дія звільнити_обʼєкт_юнікоду(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>);
  місцева дія звільнити_обʼєкт_модуля(обʼєкт_модуля: адреса<ОбʼєктМодуля>, М: адреса<Машина>);
  місцева дія звільнити_обʼєкт_списку(обʼєкт_списку: адреса<ОбʼєктСписку>, М: адреса<Машина>);
  місцева дія звільнити_обʼєкт_словника(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>);
  місцева дія звільнити_обʼєкт_логічного(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>);
  місцева дія звільнити_обʼєкт_байтів(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>);
  місцева дія звільнити_складений_обʼєкт(складений_обʼєкт: адреса<СкладенийОбʼєкт>, М: адреса<Машина>);

  місцева дія звільнити_середовище(М: адреса<Машина>, середовище: адреса<Середовище>);
  місцева дія позначити_середовище(М: адреса<Машина>, середовище: адреса<Середовище>);

  місцева дія виділити_місцезнаходження_падіння(М: адреса<Машина>, шлях_до_файлу: Ю8, рядок: позитивне): адреса<МісцезнаходженняПадіння>;
  місцева дія виділити_місцезнаходження_падіння_з_вказівки_або_пусто(М: адреса<Машина>, код: адреса<Код>, позиція_вказівки: позитивне): адреса<МісцезнаходженняПадіння>;
  місцева дія звільнити_місцезнаходження_падіння(М: адреса<Машина>, місцезнаходження_падіння: адреса<МісцезнаходженняПадіння>);

  місцева дія виділити_обʼєкт_тексту_помилки_невірний_тип_аргумента(М: адреса<Машина>, назва: Ю8, очікується: Накопичувач<адреса<ОбʼєктСтруктури>>, отримано: адреса<ОбʼєктСтруктури>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_виконати_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_отримати_властивість_з_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_змінити_властивість_в_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_видалити_властивість_з_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_додати_до_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_відняти_від_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_помножити_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_поділити_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_отримати_остачу_ділення_від_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_отримати_частку_ділення_від_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_піднести_до_степеня_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_зсунути_вліво_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_зсунути_вправо_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_зсунути_вправо_зі_заповненням_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_виконати_двійкове_і_для_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_виконати_двійкове_або_для_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_виконати_двійкове_виключне_або_для_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_виконати_двійкове_не_для_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_виконати_перевірку_на_більше_для_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_виконати_перевірку_на_менше_для_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_виконати_перевірку_чи_містить_для_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_виконати_відʼємне_для_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_виконати_числове_для_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_виконати_збільшення_для_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_виконати_зменшення_для_пусто(М: адреса<Машина>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_неможливо_виконати_чародію_обʼєкта(М: адреса<Машина>, назва_чародії: адреса<Назва>, обʼєкт: адреса<Обʼєкт>): адреса<Обʼєкт>;
  місцева дія виділити_обʼєкт_тексту_помилки_пропущено_аргумент(М: адреса<Машина>, назва: адреса<Назва>): адреса<Обʼєкт>;
}

секція МаМа {
  дія перевірити_чи_обʼєкти_рівні(обʼєкт1: адреса<Обʼєкт>, обʼєкт2: адреса<Обʼєкт>, дані: адреса): логічне {
    ціль М = дані як адреса<Машина>;
    вернути перевірити_чи_обʼєкт_рівно(обʼєкт1, М, обʼєкт2);
  }
}

секція МаМа {

  дія зробити_накопичувач<Т>(М: адреса<Машина>): Накопичувач<Т> {
    ціль накопичувач: Накопичувач<Т>;
    накопичувач.розмір = 0;
    накопичувач.дані = пусто;
    вернути накопичувач;
  }

  дія виділити_накопичувач<Т>(М: адреса<Машина>): адреса<Накопичувач<Т>> {
    ціль накопичувач = виділити<Накопичувач<Т>>(М);
    накопичувач.розмір = 0;
    накопичувач.дані = пусто;
    вернути накопичувач;
  }

  дія покласти_в_накопичувач<Т>(М: адреса<Машина>, накопичувач: адреса<Накопичувач<Т>>, дані: Т) {
    накопичувач.дані = перевиділити<Т>(М, накопичувач.дані, накопичувач.розмір + 1);
    накопичувач.дані[накопичувач.розмір] = дані;
    накопичувач.розмір = накопичувач.розмір + 1;
  }

  дія забрати_з_накопичувача<Т>(М: адреса<Машина>, накопичувач: адреса<Накопичувач<Т>>): Т {
    ціль дані = накопичувач.дані[накопичувач.розмір - 1];
    накопичувач.розмір = накопичувач.розмір - 1;
    вернути дані;
  }

  дія звільнити_значення_накопичувача<Т>(М: адреса<Машина>, накопичувач: Накопичувач<Т>) {
    звільнити(М, накопичувач.дані як адреса);
  }

  дія звільнити_накопичувач<Т>(М: адреса<Машина>, накопичувач: адреса<Накопичувач<Т>>) {
    звільнити(М, накопичувач.дані як адреса);
    звільнити(М, накопичувач);
  }

  дія обернути_накопичувач<Т>(М: адреса<Машина>, накопичувач: адреса<Накопичувач<Т>>) {
    якщо накопичувач.розмір == 0 {
      вернути;
    }
    змінна ціль па: позитивне = 0;
    змінна ціль пб: позитивне = накопичувач.розмір - 1;
    поки па < пб {
      змінна ціль тимчасове = накопичувач.дані[па];
      накопичувач.дані[па] = накопичувач.дані[пб];
      накопичувач.дані[пб] = тимчасове;
      па += 1;
      пб -= 1;
    }
  }

  дія зробити_копію_накопичувача<Т>(М: адреса<Машина>, накопичувач: Накопичувач<Т>): Накопичувач<Т> {
    ціль копія = зробити_накопичувач<Т>(М);
    копія.розмір = накопичувач.розмір;
    копія.дані = виділити<Т>(М, копія.розмір);
    змінна ціль п: позитивне = 0;
    поки п < копія.розмір {
      копія.дані[п] = накопичувач.дані[п];
      п += 1;
    }
    вернути копія;
  }

  дія розширити_накопичувач<Т>(М: адреса<Машина>, накопичувач: адреса<Накопичувач<Т>>, розмір: позитивне, пусте_значення: Т) {
    якщо розмір <= накопичувач.розмір {
      вернути;
    }
    накопичувач.дані = перевиділити<Т>(М, накопичувач.дані, розмір);
    змінна ціль п: позитивне = накопичувач.розмір;
    поки п < розмір {
      накопичувач.дані[п] = пусте_значення;
      п += 1;
    }
    накопичувач.розмір = розмір;
  }

  дія видалити_з_накопичувача<Т>(М: адреса<Машина>, накопичувач: адреса<Накопичувач<Т>>, позиція: позитивне): логічне {
    якщо позиція >= накопичувач.розмір {
      вернути ні;
    }
    змінна ціль п: позитивне = позиція;
    поки п < накопичувач.розмір - 1 {
      накопичувач.дані[п] = накопичувач.дані[п + 1];
      п += 1;
    }
    накопичувач.розмір = накопичувач.розмір - 1;
    вернути так;
  }
}

секція МаМа {
  дія зробити_накопичувач_ю8(М: адреса<Машина>): НакопичувачЮ8 {
    вернути зробити_накопичувач<п8>(М);
  }

  дія покласти_в_накопичувач_ю8(М: адреса<Машина>, буфер: адреса<НакопичувачЮ8>, значення: Ю8) {
    змінна ціль х: позитивне = 0;
    поки значення[х] != 0 {
      покласти_в_накопичувач<п8>(М, буфер, значення[х]);
      х = х + 1;
    }
  }

  дія видалити_останнє_значення_з_накопичувача_ю8(М: адреса<Машина>, буфер: адреса<НакопичувачЮ8>) {
    буфер.розмір = буфер.розмір - 1;
  }

  дія покласти_символ_в_накопичувач_ю8(М: адреса<Машина>, буфер: адреса<НакопичувачЮ8>, значення: п8) {
    покласти_в_накопичувач<п8>(М, буфер, значення);
  }

  дія звільнити_значення_накопичувача_ю8(М: адреса<Машина>, буфер: НакопичувачЮ8) {
    звільнити_значення_накопичувача<п8>(М, буфер);
  }

  дія виділити_ю8_з_накопичувача_ю8(М: адреса<Машина>, буфер: адреса<НакопичувачЮ8>): Ю8 {
    ціль значення = виділити<п8>(М, буфер.розмір + 1);
    змінна ціль х: позитивне = 0;
    поки х < буфер.розмір {
      значення[х] = буфер.дані[х];
      х = х + 1;
    }
    значення[буфер.розмір] = 0;
    вернути значення;
  }
}

секція МаМа {
  дія зробити_реєстр<К, З>(М: адреса<Машина>, дія_перевірки_ключа: (а: К, б: К) -> логічне): Реєстр<К, З> {
    ціль реєстр: Реєстр<К, З>;
    реєстр.розмір = 0;
    реєстр.елементи = пусто;
    реєстр.дія_перевірки_ключа = дія_перевірки_ключа;
    вернути реєстр;
  }

  дія виділити_реєстр<К, З>(М: адреса<Машина>, дія_перевірки_ключа: (а: К, б: К) -> логічне): адреса<Реєстр<К, З>> {
    ціль реєстр = виділити<Реєстр<К, З>>(М);
    реєстр.розмір = 0;
    реєстр.елементи = пусто;
    реєстр.дія_перевірки_ключа = дія_перевірки_ключа;
    вернути реєстр;
  }

  дія отримати_з_реєстру<К, З>(М: адреса<Машина>, реєстр: адреса<Реєстр<К, З>>, ключ: К): адреса<ЕлементРеєстру<К, З>> {
    змінна ціль позиція: позитивне = 0;
    поки позиція < реєстр.розмір {
      якщо реєстр.дія_перевірки_ключа(реєстр.елементи[позиція].ключ, ключ) {
        вернути реєстр.елементи[позиція]::адреса;
      }
      позиція = позиція + 1;
    }
    вернути пусто;
  }

  дія змінити_в_реєстрі<К, З>(М: адреса<Машина>, реєстр: адреса<Реєстр<К, З>>, ключ: К, значення: З) {
    змінна ціль елемент_карти = отримати_з_реєстру<К, З>(М, реєстр, ключ);
    якщо елемент_карти == пусто {
      реєстр.елементи = перевиділити<ЕлементРеєстру<К, З>>(М, реєстр.елементи, реєстр.розмір + 1);
      реєстр.елементи[реєстр.розмір] = ЕлементРеєстру<К, З> { ключ = ключ, значення = значення };
      реєстр.розмір = реєстр.розмір + 1;
    } інакше {
      елемент_карти.значення = значення;
    }
  }

  дія звільнити_значення_реєстру<К, З>(М: адреса<Машина>, реєстр: Реєстр<К, З>) {
    звільнити(М, реєстр.елементи як адреса);
  }

  дія звільнити_реєстр<К, З>(М: адреса<Машина>, реєстр: адреса<Реєстр<К, З>>) {
    звільнити(М, реєстр.елементи як адреса);
    звільнити(М, реєстр);
  }

  дія розширити_реєстр<К, З>(М: адреса<Машина>, реєстр: адреса<Реєстр<К, З>>, новий_розмір: позитивне) {
    якщо новий_розмір > реєстр.розмір {
      реєстр.елементи = перевиділити<ЕлементРеєстру<К, З>>(М, реєстр.елементи, новий_розмір);
      реєстр.розмір = новий_розмір;
    }
  }

  дія видалити_з_реєстру<К, З>(М: адреса<Машина>, реєстр: адреса<Реєстр<К, З>>, ключ: К): логічне {
    змінна ціль п: позитивне = 0;
    поки п < реєстр.розмір {
      ціль елемент = реєстр.елементи[п];
      якщо реєстр.дія_перевірки_ключа(елемент.ключ, ключ) {
        поки п < реєстр.розмір - 1 {
          реєстр.елементи[п] = реєстр.елементи[п + 1];
          п += 1;
        }
        реєстр.розмір -= 1;
        вернути так;
      }
      п += 1;
    }
    вернути ні;
  }
}

секція МаМа {
  дія зробити_реєстр2<К, З>(М: адреса<Машина>, дія_перевірки_ключа: (а: К, б: К, дані: адреса) -> логічне, дані: адреса): Реєстр2<К, З> {
    ціль реєстр2: Реєстр2<К, З>;
    реєстр2.розмір = 0;
    реєстр2.елементи = пусто;
    реєстр2.дія_перевірки_ключа = дія_перевірки_ключа;
    реєстр2.дані = дані;
    вернути реєстр2;
  }

  дія виділити_реєстр2<К, З>(М: адреса<Машина>, дія_перевірки_ключа: (а: К, б: К, дані: адреса) -> логічне, дані: адреса): адреса<Реєстр2<К, З>> {
    ціль реєстр2 = виділити<Реєстр2<К, З>>(М);
    реєстр2.розмір = 0;
    реєстр2.елементи = пусто;
    реєстр2.дія_перевірки_ключа = дія_перевірки_ключа;
    реєстр2.дані = дані;
    вернути реєстр2;
  }

  дія отримати_з_реєстру2<К, З>(М: адреса<Машина>, реєстр2: адреса<Реєстр2<К, З>>, ключ: К): адреса<ЕлементРеєстру2<К, З>> {
    змінна ціль позиція: позитивне = 0;
    поки позиція < реєстр2.розмір {
      якщо реєстр2.дія_перевірки_ключа(реєстр2.елементи[позиція].ключ, ключ, реєстр2.дані) {
        вернути реєстр2.елементи[позиція]::адреса;
      }
      позиція = позиція + 1;
    }
    вернути пусто;
  }

  дія змінити_в_реєстрі2<К, З>(М: адреса<Машина>, реєстр2: адреса<Реєстр2<К, З>>, ключ: К, значення: З) {
    змінна ціль елемент_карти = отримати_з_реєстру2<К, З>(М, реєстр2, ключ);
    якщо елемент_карти == пусто {
      реєстр2.елементи = перевиділити<ЕлементРеєстру2<К, З>>(М, реєстр2.елементи, реєстр2.розмір + 1);
      реєстр2.елементи[реєстр2.розмір] = ЕлементРеєстру2<К, З> { ключ = ключ, значення = значення };
      реєстр2.розмір = реєстр2.розмір + 1;
    } інакше {
      елемент_карти.значення = значення;
    }
  }

  дія звільнити_значення_реєстру2<К, З>(М: адреса<Машина>, реєстр2: Реєстр2<К, З>) {
    звільнити(М, реєстр2.елементи як адреса);
  }

  дія звільнити_реєстр2<К, З>(М: адреса<Машина>, реєстр2: адреса<Реєстр2<К, З>>) {
    звільнити(М, реєстр2.елементи як адреса);
    звільнити(М, реєстр2);
  }

  дія розширити_реєстр2<К, З>(М: адреса<Машина>, реєстр2: адреса<Реєстр2<К, З>>, новий_розмір: позитивне) {
    якщо новий_розмір > реєстр2.розмір {
      реєстр2.елементи = перевиділити<ЕлементРеєстру2<К, З>>(М, реєстр2.елементи, новий_розмір);
      реєстр2.розмір = новий_розмір;
    }
  }

  дія видалити_з_реєстру2<К, З>(М: адреса<Машина>, реєстр2: адреса<Реєстр2<К, З>>, ключ: К): логічне {
    змінна ціль п: позитивне = 0;
    поки п < реєстр2.розмір {
      ціль елемент = реєстр2.елементи[п];
      якщо реєстр2.дія_перевірки_ключа(елемент.ключ, ключ, реєстр2.дані) {
        поки п < реєстр2.розмір - 1 {
          реєстр2.елементи[п] = реєстр2.елементи[п + 1];
          п += 1;
        }
        реєстр2.розмір -= 1;
        вернути так;
      }
      п += 1;
    }
    вернути ні;
  }
}