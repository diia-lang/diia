взяти визначення МаМа;

секція МаМа {
  місцева дія надрукувати_обʼєкт_структури_в_буфер_ю8(М: адреса<Машина>, буфер_ю8: адреса<БуферЮ8>, обʼєкт: адреса<Обʼєкт>, глибина: позитивне) {
    додати_до_буфера_ю8(буфер_ю8, ю8"<структура>");
  }

  місцева дія виділити_обʼєкт_структури(М: адреса<Машина>, назва: адреса<Назва>, предок: адреса<Обʼєкт>): адреса<Обʼєкт> {
    ціль обʼєкт_структури = виділити_обʼєкт(М, М.обʼєкт_структури_Структура);
    ціль дані_обʼєкта_структури: ДаніОбʼєктаСтруктури;
    дані_обʼєкта_структури.назва = назва;
    якщо предок == пусто {
      дані_обʼєкта_структури.предок = М.обʼєкт_структури_обʼєкт;
    } інакше {
      дані_обʼєкта_структури.предок = предок;
    }
    дані_обʼєкта_структури.параметри = виділити_реєстр<адреса<Назва>, Параметр>(перевірити_чи_назви_рівні); // потім: тут тече памʼять
    дані_обʼєкта_структури.методи = зробити_реєстр<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні);
    дані_обʼєкта_структури.середовище_створення = пусто;
    обʼєкт_структури.дані = дані_обʼєкта_структури;
    вернути обʼєкт_структури;
  }

  місцева дія виділити_обʼєкт_структури_назва_ю8(М: адреса<Машина>, назва: Ю8, предок: адреса<Обʼєкт>): адреса<Обʼєкт> {
    вернути виділити_обʼєкт_структури(М, знайти_або_виділити_й_додати_назву(М.БН::адреса, назва), предок);
  }

  місцева дія додати_метод_до_обʼєкту_структури(обʼєкт_структури: адреса<Обʼєкт>, М: адреса<Машина>, назва: адреса<Назва>, обʼєкт_методу: адреса<Обʼєкт>) {
    синонім дані_структури = обʼєкт_структури.дані як ДаніОбʼєктаСтруктури;
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(дані_структури.методи::адреса, назва, обʼєкт_методу);
  }

  місцева дія обʼєкт_структури_виконати(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, середовище: адреса<Середовище>, аргументи: адреса<Вектор<адреса<Обʼєкт>>>, аргументи_з_назвами: адреса_або_пусто<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): адреса_або_стан_помилки<Обʼєкт> {
    покласти_в_накопичувач<ІсторіяВиконання>(М.накопичувач_історії_виконання::адреса, ІсторіяВиконання {
      обʼєкт_дії = обʼєкт,
      середовище = пусто,
    });
    ціль обʼєкт_зі_структури = виділити_обʼєкт(М, обʼєкт);
    синонім дані_структури = обʼєкт.дані як ДаніОбʼєктаСтруктури;
    змінна ціль пп: позитивне = 0;
    поки пп < дані_структури.параметри.розмір {
      ціль параметр = дані_структури.параметри.елементи[пп].значення;
      змінна ціль аргумент: адреса<Обʼєкт> = пусто;
      якщо аргументи.довжина > пп {
        аргумент = аргументи.дані[пп];
      } інакше {
        якщо аргументи_з_назвами == пусто {
          якщо параметр.код_значення_за_замовчуванням != пусто {
            ціль результат_виконання_значення_за_замовчуванням = виконати_код(М, дані_структури.середовище_створення, параметр.код_значення_за_замовчуванням);
            якщо М.стан_помилки {
              вернути результат_виконання_значення_за_замовчуванням;
            }
            ціль значення_за_замовчуванням = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
            аргумент = значення_за_замовчуванням;
          } інакше {
            увімкнути_стан_помилки(М);
            вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"недостатньо аргументів");
          }
        } інакше {
          ціль елемент_аргумента_з_назвою = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(аргументи_з_назвами, параметр.назва);
          якщо елемент_аргумента_з_назвою == пусто {
            якщо параметр.код_значення_за_замовчуванням != пусто {
              ціль результат_виконання_значення_за_замовчуванням = виконати_код(М, дані_структури.середовище_створення, параметр.код_значення_за_замовчуванням);
              якщо М.стан_помилки {
                вернути результат_виконання_значення_за_замовчуванням;
              }
              ціль значення_за_замовчуванням = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
              аргумент = значення_за_замовчуванням;
            } інакше {
              увімкнути_стан_помилки(М);
              вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"недостатньо аргументів");
            }
          } інакше {
            аргумент = елемент_аргумента_з_назвою.значення;
          }
        }
      }
      якщо параметр.типи.розмір > 0 {
        змінна ціль пп: позитивне = 0;
        змінна ціль знайдено_тип: логічне = ні;
        поки пп < параметр.типи.розмір {
          якщо перевірити_чи_обʼєкт_є(М, аргумент, параметр.типи.дані[пп]) {
            знайдено_тип = так;
          }
          пп = пп + 1;
        }
        якщо знайдено_тип == ні {
          увімкнути_стан_помилки(М);
          вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"неправильний тип аргумента");
        }
      }
      змінити_властивість(обʼєкт_зі_структури, М, параметр.назва, аргумент);
      пп = пп + 1;
    }
    забрати_з_накопичувача<ІсторіяВиконання>(М.накопичувач_історії_виконання::адреса);
    вернути обʼєкт_зі_структури;
  }

  місцева дія виділити_обʼєкт_структури_Структура(М: адреса<Машина>): адреса<Обʼєкт> {
    ціль обʼєкт_структури = виділити_обʼєкт(М, пусто);
    обʼєкт_структури.дані = ДаніОбʼєктаСтруктури {
      назва = М.БН.С.Структура,
      предок = М.обʼєкт_структури_обʼєкт,
      параметри = виділити_реєстр<адреса<Назва>, Параметр>(перевірити_чи_назви_рівні),
      методи = зробити_реєстр<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні),
      середовище_створення = пусто
    };
    вернути обʼєкт_структури;
  }
}