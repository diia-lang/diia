взяти визначення МаМа;

секція МаМа {
  місцева дія обʼєкт_дії_виконати(обʼєкт: адреса<Обʼєкт>, М: адреса<Машина>, середовище: адреса<Середовище>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Вектор<адреса<Обʼєкт>>>, аргументи_з_назвами: адреса_або_пусто<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): адреса_або_стан_помилки<Обʼєкт> {
    синонім дані_дії = обʼєкт.дані як ДаніОбʼєктаДії;

    ціль середовище_виконання_дії = виділити_середовище(дані_дії.середовище_створення);

    змінна ціль пп: позитивне = 0;
    поки пп < дані_дії.параметри.розмір {
      ціль параметр = дані_дії.параметри.елементи[пп].значення;
      змінна ціль аргумент: адреса<Обʼєкт> = пусто;
      якщо аргументи.довжина > пп {
        аргумент = аргументи.дані[пп];
      } інакше {
        якщо аргументи_з_назвами == пусто {
          якщо параметр.код_значення_за_замовчуванням != пусто {
            ціль результат_виконання_значення_за_замовчуванням = виконати_код(М, середовище_виконання_дії, параметр.код_значення_за_замовчуванням);
            якщо М.стан_помилки {
              вернути результат_виконання_значення_за_замовчуванням;
            }
            ціль значення_за_замовчуванням = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
            аргумент = значення_за_замовчуванням;
          } інакше {
            увімкнути_стан_помилки(М);
            вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"недостатньо аргументів");
          }
        } інакше {
          ціль елемент_аргумента_з_назвою = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(аргументи_з_назвами, параметр.назва);
          якщо елемент_аргумента_з_назвою == пусто {
            якщо параметр.код_значення_за_замовчуванням != пусто {
              ціль результат_виконання_значення_за_замовчуванням = виконати_код(М, середовище_виконання_дії, параметр.код_значення_за_замовчуванням);
              якщо М.стан_помилки {
                вернути результат_виконання_значення_за_замовчуванням;
              }
              ціль значення_за_замовчуванням = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
              аргумент = значення_за_замовчуванням;
            } інакше {
              увімкнути_стан_помилки(М);
              вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"недостатньо аргументів");
            }
          } інакше {
            аргумент = елемент_аргумента_з_назвою.значення;
          }
        }
      }
      якщо параметр.типи.розмір > 0 {
        змінна ціль пп: позитивне = 0;
        змінна ціль знайдено_тип: логічне = ні;
        поки пп < параметр.типи.розмір {
          якщо перевірити_чи_обʼєкт_є(М, аргумент, параметр.типи.дані[пп]) {
            знайдено_тип = так;
          }
          пп = пп + 1;
        }
        якщо знайдено_тип == ні {
          увімкнути_стан_помилки(М);
          вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"неправильний тип аргумента");
        }
      }
      змінити_в_середовищі(середовище_виконання_дії, параметр.назва, аргумент);
      пп = пп + 1;
    }

    ціль результат_виконання = виконати_код(М, середовище_виконання_дії, дані_дії.код);

    вернути результат_виконання;
  }

  місцева дія виділити_обʼєкт_дії(М: адреса<Машина>, назва: адреса<Назва>, середовище_створення: адреса<Середовище>, код: адреса<Код>): адреса<Обʼєкт> {
    ціль обʼєкт_дії = виділити_обʼєкт(М, М.обʼєкт_структури_Дія);
    ціль дані_обʼєкта_дії = ДаніОбʼєктаДії {};
    дані_обʼєкта_дії.назва = назва;
    дані_обʼєкта_дії.параметри = виділити_реєстр<адреса<Назва>, Параметр>(перевірити_чи_назви_рівні); // потім: тут тече памʼять
    дані_обʼєкта_дії.середовище_створення = середовище_створення;
    дані_обʼєкта_дії.код = код;
    обʼєкт_дії.дані = дані_обʼєкта_дії;
    вернути обʼєкт_дії;
  }
}