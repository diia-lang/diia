////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  дія нативна_дія_тексту_чародія_отримати_елемент(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію тексту \"чародія_отримати_елемент\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_текст {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію тексту \"чародія_отримати_елемент\" можна виконувати лише від тексту") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_тексту = обʼєкт_я як адреса<ОбʼєктТексту>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_ключа = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.ключ);
      якщо елемент_ключа != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_ключа.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"ключ\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_тексту_отримати_елемент(обʼєкт_тексту, М, обʼєкт_аргумента);
  }

  дія нативна_дія_тексту_чародія_перебір(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_тексту = обʼєкт_я як адреса<ОбʼєктТексту>;
    вернути обʼєкт_тексту_отримати_перебір(обʼєкт_тексту, М);
  }

  дія нативна_дія_тексту_чародія_додати(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію тексту \"чародія_додати\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_текст {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію тексту \"чародія_додати\" можна виконувати лише від тексту") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_тексту = обʼєкт_я як адреса<ОбʼєктТексту>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_тексту_додати(обʼєкт_тексту, М, обʼєкт_аргумента);
  }

  дія нативна_дія_тексту_чародія_містить(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію тексту \"чародія_містить\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_текст {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію тексту \"чародія_містить\" можна виконувати лише від тексту") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_тексту = обʼєкт_я як адреса<ОбʼєктТексту>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_тексту_містить(обʼєкт_тексту, М, обʼєкт_аргумента);
  }

  місцева дія створити_структуру_тексту(М: адреса<Машина>): адреса<ОбʼєктСтруктури> {
    ціль обʼєкт_структури = виділити_обʼєкт_структури(М, М.БН.С.текст, М.обʼєкт_структури_обʼєкт);

    ціль обʼєкт_нативної_дії_тексту_чародія_отримати_елемент = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_отримати_елемент, нативна_дія_тексту_чародія_отримати_елемент, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_отримати_елемент, обʼєкт_нативної_дії_тексту_чародія_отримати_елемент як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_тексту_чародія_перебір = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_перебір, нативна_дія_тексту_чародія_перебір, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_перебір, обʼєкт_нативної_дії_тексту_чародія_перебір як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_тексту_чародія_додати = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_додати, нативна_дія_тексту_чародія_додати, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_додати, обʼєкт_нативної_дії_тексту_чародія_додати як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_тексту_чародія_містить = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_містить, нативна_дія_тексту_чародія_містить, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_містить, обʼєкт_нативної_дії_тексту_чародія_містить як адреса<Обʼєкт>);

    вернути обʼєкт_структури;
  }

  місцева дія виділити_обʼєкт_тексту(М: адреса<Машина>, значення: памʼять<п8>): адреса<ОбʼєктТексту> {
    ціль обʼєкт_тексту = виділити_обʼєкт<ОбʼєктТексту>(М, М.обʼєкт_структури_текст);

    обʼєкт_тексту.довжина = позитивне(strlen(значення));
    обʼєкт_тексту.значення = виділити_копію_ю8(значення);

    вернути обʼєкт_тексту;
  }

  місцева дія виділити_обʼєкт_тексту_з_ю8(М: адреса<Машина>, значення: Ю8): адреса<ОбʼєктТексту> {
    змінна ціль вихід_КД: памʼять<п8> = пусто;
    ціль довжина_Ю8 = strlen(значення);
    якщо довжина_Ю8 == 0 {
      вихід_КД = виділити<п8>(1);
      вихід_КД[0] = 0;
    } інакше {
      вихід_КД = виділити<п8>(довжина_Ю8 + 1);
      ціль розмір_перекодованого_виходу_КД = КД::перекодувати_з_Ю8(
        значення,
        позитивне(довжина_Ю8),
        вихід_КД
      );
      вихід_КД[розмір_перекодованого_виходу_КД] = 0;
      якщо розмір_перекодованого_виходу_КД == 0 {
        ПОМЕРТИ(ю8"Не вдалось перекодувати в КД");
      }
    }

    ціль обʼєкт_тексту = виділити_обʼєкт<ОбʼєктТексту>(М, М.обʼєкт_структури_текст);

    обʼєкт_тексту.довжина = позитивне(strlen(вихід_КД));
    обʼєкт_тексту.значення = виділити_копію_ю8(вихід_КД);

    звільнити(вихід_КД);

    вернути обʼєкт_тексту;
  }

  місцева дія звільнити_обʼєкт_тексту(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>) {
    звільнити(обʼєкт_тексту.значення);
    звільнити(обʼєкт_тексту);
  }

  місцева дія обʼєкт_тексту_виконати(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати текст") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_отримати_властивість(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    якщо назва == М.БН.С.довжина {
      вернути виділити_обʼєкт_числа(М, д64(обʼєкт_тексту.довжина)) як адреса<Обʼєкт>;
    }
    змінна ціль тип = обʼєкт_тексту.тип;
    поки тип != пусто {
      ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(тип.методи::адреса, назва);
      якщо елемент_реєстру_методів != пусто {
        вернути елемент_реєстру_методів.значення;
      }
      тип = тип.предок;
    }
    вернути пусто;
  }

  місцева дія обʼєкт_тексту_змінити_властивість(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто;
  }

  місцева дія обʼєкт_тексту_виконати_властивість(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_властивості = обʼєкт_тексту_отримати_властивість(обʼєкт_тексту, М, назва_властивості);
    якщо М.стан_падіння {
      вернути обʼєкт_властивості;
    }
    вернути обʼєкт_виконати(обʼєкт_властивості, М, обʼєкт_тексту як адреса<Обʼєкт>, аргументи, іменовані_аргументи);
  }

  місцева дія обʼєкт_тексту_отримати_елемент(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо ключ == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Ключ отримання елемента з тексту має бути числом") як адреса<Обʼєкт>;
    }
    якщо ключ.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Ключ отримання елемента з тексту має бути числом") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = ключ як адреса<ОбʼєктЧисла>;
    ціль позиція = позитивне(обʼєкт_числа.значення);
    якщо обʼєкт_тексту.довжина > позиція {
      вернути виділити_обʼєкт_числа(М, д64(обʼєкт_тексту.значення[позиція])) як адреса<Обʼєкт>;
    }
    вернути пусто;
  }

  місцева дія обʼєкт_тексту_змінити_елемент(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто;
  }

  місцева дія обʼєкт_тексту_отримати_перебір(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    // потім: втілити
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати перебір з тексту") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_додати(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо додати пусто до тексту") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_текст {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"До тексту можна додати лише текст") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_тексту_аргумента = аргумент як адреса<ОбʼєктТексту>;
    ціль розмір_значення_1 = обʼєкт_тексту.довжина;
    ціль розмір_значення_2 = обʼєкт_тексту_аргумента.довжина;
    ціль новий_розмір = розмір_значення_1 + розмір_значення_2;
    ціль нове_значення = виділити<п8>(ц32(новий_розмір) + 1);
    змінна ціль позиція: позитивне = 0;
    поки позиція < розмір_значення_1 {
      нове_значення[позиція] = обʼєкт_тексту.значення[позиція];
      позиція += 1;
    }
    позиція = 0;
    поки позиція < розмір_значення_2 {
      нове_значення[розмір_значення_1 + позиція] = обʼєкт_тексту_аргумента.значення[позиція];
      позиція += 1;
    }
    нове_значення[новий_розмір] = 0;
    ціль новий_обʼєкт_тексту = виділити_обʼєкт_тексту(М, нове_значення);
    звільнити(нове_значення);
    вернути новий_обʼєкт_тексту як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_відняти(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати віднімання для тексту") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_помножити(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати множення для тексту") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_поділити(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати ділення для тексту") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_отримати_остачу_ділення(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати отримання остачі ділення для тексту") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_отримати_частку_ділення(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати отримання частки ділення для тексту") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_піднести_до_степеня(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати піднесення до степеня для тексту") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_зсунути_вліво(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вліво для тексту") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_зсунути_вправо(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо для тексту") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_зсунути_вправо_зі_заповненням(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо зі заповненням для тексту") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_двійкове_і(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове І для тексту") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_двійкове_або(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове АБО для тексту") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_двійкове_виключне_або(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове ВИКЛЮЧНЕ АБО для тексту") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_двійкове_не(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове НЕ для тексту") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_більше(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на більшість для тексту") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_менше(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на меншість для тексту") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_рівно(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо перевірити_чи_обʼєкт_тексту_рівно(обʼєкт_тексту, М, аргумент) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_містить(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо аргумент.тип == М.обʼєкт_структури_число {
      ціль обʼєкт_числа_аргумента = аргумент як адреса<ОбʼєктЧисла>;
      ціль символ = п8(обʼєкт_числа_аргумента.значення);
      змінна ціль позиція: позитивне = 0;
      поки обʼєкт_тексту.значення[позиція] != 0 {
        якщо обʼєкт_тексту.значення[позиція] == символ {
          вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
        }
        позиція += 1;
      }
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо аргумент.тип == М.обʼєкт_структури_текст {
      змінна ціль обʼєкт_тексту_аргумента = аргумент як адреса<ОбʼєктТексту>;
      якщо обʼєкт_тексту.довжина == 0 {
        якщо обʼєкт_тексту_аргумента.довжина == 0 {
          вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
        }
      }
      змінна ціль позиція: позитивне = 0;
      поки обʼєкт_тексту.значення[позиція] != 0 {
        змінна ціль позиція_аргумента: позитивне = 0;
        поки обʼєкт_тексту_аргумента.значення[позиція_аргумента] != 0 {
          якщо обʼєкт_тексту.значення[позиція + позиція_аргумента] != обʼєкт_тексту_аргумента.значення[позиція_аргумента] {
            стрибнути далі;
          }
          позиція_аргумента += 1;
        }
        вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
        далі:
        позиція += 1;
      }
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_є(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_Структура {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо перевірити_чи_обʼєкт_тексту_є(обʼєкт_тексту, М, аргумент як адреса<ОбʼєктСтруктури>) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_відʼємне(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати відʼємне для тексту") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_числове(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати числове для тексту") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_заперечити(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_тексту.довжина == 0 {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_збільшити(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати збільшення для тексту") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_тексту_зменшити(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зменшення для тексту") як адреса<Обʼєкт>;
  }

  місцева дія перевірити_чи_обʼєкт_тексту_рівно(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне {
    ціль обʼєкт = обʼєкт_тексту як адреса<Обʼєкт>;
    якщо обʼєкт == аргумент {
      вернути так;
    }
    якщо аргумент == пусто {
      вернути ні;
    }
    якщо аргумент.тип != М.обʼєкт_структури_текст {
      вернути ні;
    }
    ціль обʼєкт_тексту_аргумента = аргумент як адреса<ОбʼєктТексту>;
    якщо strcmp(обʼєкт_тексту.значення, обʼєкт_тексту_аргумента.значення) == 0 {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_обʼєкт_тексту_є(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне {
    якщо обʼєкт_структури == М.обʼєкт_структури_текст {
      вернути так;
    }
    вернути ні;
  }

  місцева дія надрукувати_обʼєкт_тексту_в_накопичувач_ю8(обʼєкт_тексту: адреса<ОбʼєктТексту>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    якщо глибина > 0 {
      покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"\"");
    }
    ціль розмір_значення_КД = обʼєкт_тексту.довжина;
    ціль значення_ю8 = виділити<п8>(ц32(розмір_значення_КД * 3) + 1);
    ціль розмір_перекодованого_в_Ю8 = КД::перекодувати_в_Ю8(обʼєкт_тексту.значення, позитивне(розмір_значення_КД), значення_ю8);
    значення_ю8[розмір_перекодованого_в_Ю8] = 0;
    якщо розмір_перекодованого_в_Ю8 == 0 {
      надрукувати_ю8(ю8"!!! Щось пішло не так під час отримання Ю8 з тексту!");
    } інакше {
      покласти_в_накопичувач_ю8(накопичувач_ю8, значення_ю8);
    }
    звільнити(значення_ю8);
    якщо глибина > 0 {
      покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"\"");
    }
  }
}