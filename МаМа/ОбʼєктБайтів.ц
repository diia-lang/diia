взяти визначення МаМа;

секція МаМа {
  дія нативна_дія_байтів_чародія_отримати_елемент(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію байтів \"чародія_отримати_елемент\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_байти {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію байтів \"чародія_отримати_елемент\" можна виконувати лише від байтів") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_байтів = обʼєкт_я як адреса<ОбʼєктБайтів>;
    змінна ціль знайдено_обʼєкт_аргумента_ключа = ні;
    змінна ціль обʼєкт_аргумента_ключа: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_ключа = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, іменовані_аргументи, М.БН.С.ключ);
      якщо елемент_ключа != пусто {
        знайдено_обʼєкт_аргумента_ключа = так;
        обʼєкт_аргумента_ключа = елемент_ключа.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента_ключа == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента_ключа = так;
          обʼєкт_аргумента_ключа = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента_ключа == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"ключ\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_байтів_отримати_елемент(обʼєкт_байтів, М, обʼєкт_аргумента_ключа);
  }

  дія нативна_дія_байтів_чародія_змінити_елемент(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію байтів \"чародія_змінити_елемент\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_байти {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію байтів \"чародія_змінити_елемент\" можна виконувати лише від байтів") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_байтів = обʼєкт_я як адреса<ОбʼєктБайтів>;
    змінна ціль знайдено_обʼєкт_аргумента_ключа = ні;
    змінна ціль обʼєкт_аргумента_ключа: адреса<Обʼєкт> = пусто;
    змінна ціль знайдено_обʼєкт_аргумента_значення = ні;
    змінна ціль обʼєкт_аргумента_значення: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_ключа = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, іменовані_аргументи, М.БН.С.ключ);
      якщо елемент_ключа != пусто {
        знайдено_обʼєкт_аргумента_ключа = так;
        обʼєкт_аргумента_ключа = елемент_ключа.значення;
      }
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента_значення = так;
        обʼєкт_аргумента_значення = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента_ключа == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента_ключа = так;
          обʼєкт_аргумента_ключа = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента_значення == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 1 {
          знайдено_обʼєкт_аргумента_значення = так;
          обʼєкт_аргумента_значення = аргументи.дані[1];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента_ключа == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"ключ\"") як адреса<Обʼєкт>;
    }
    якщо знайдено_обʼєкт_аргумента_значення == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_байтів_змінити_елемент(обʼєкт_байтів, М, обʼєкт_аргумента_ключа, обʼєкт_аргумента_значення);
  }

  дія нативна_дія_байтів_чародія_видалити_елемент(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію байтів \"чародія_видалити_елемент\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_байти {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію байтів \"чародія_видалити_елемент\" можна виконувати лише від байтів") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_байтів = обʼєкт_я як адреса<ОбʼєктБайтів>;
    змінна ціль знайдено_обʼєкт_аргумента_ключа = ні;
    змінна ціль обʼєкт_аргумента_ключа: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_ключа = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, іменовані_аргументи, М.БН.С.ключ);
      якщо елемент_ключа != пусто {
        знайдено_обʼєкт_аргумента_ключа = так;
        обʼєкт_аргумента_ключа = елемент_ключа.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента_ключа == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента_ключа = так;
          обʼєкт_аргумента_ключа = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента_ключа == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"ключ\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_байтів_видалити_елемент(обʼєкт_байтів, М, обʼєкт_аргумента_ключа);
  }

  дія нативна_дія_байтів_чародія_перебір(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_байтів = обʼєкт_я як адреса<ОбʼєктБайтів>;
    вернути обʼєкт_байтів_отримати_перебір(обʼєкт_байтів, М);
  }

  дія нативна_дія_байтів_додати(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт пусто не може виконати дію байтів \"додати\"") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_байти {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт не є байтами") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_байтів = обʼєкт_я як адреса<ОбʼєктБайтів>;
    якщо іменовані_аргументи != пусто {
      ціль елемент_аргумента_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, іменовані_аргументи, М.БН.С.значення);
      якщо елемент_аргумента_значення != пусто {
      // потім: втілити
//        покласти_в_накопичувач<п8>(обʼєкт_байтів.дані::адреса, елемент_аргумента_значення.значення);
        вернути пусто;
      }
    }
    якщо аргументи != пусто {
      якщо аргументи.розмір > 0 {
        ціль аргумент = аргументи.дані[0];
        // потім: втілити
//        покласти_в_накопичувач<п8>(обʼєкт_байтів.дані::адреса, аргумент);
        вернути пусто;
      }
    }
    вернути пусто;
  }

  дія нативна_дія_байтів_забрати(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт пусто не може виконати дію байтів \"забрати\"") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_байти {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт не є байтами") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_байтів = обʼєкт_я як адреса<ОбʼєктБайтів>;
    якщо обʼєкт_байтів.дані.розмір != 0 {
      ціль останній_елемент = обʼєкт_байтів.дані.дані[обʼєкт_байтів.дані.розмір - 1];
      обʼєкт_байтів.дані.розмір = обʼєкт_байтів.дані.розмір - 1;
      вернути виділити_обʼєкт_числа(М, д64(останній_елемент)) як адреса<Обʼєкт>;
    }
    вернути пусто;
  }

  місцева дія створити_структуру_байтів(М: адреса<Машина>): адреса<ОбʼєктСтруктури> {
    ціль обʼєкт_структури = виділити_обʼєкт_структури(М, М.БН.С.байти, М.обʼєкт_структури_обʼєкт);

    ціль обʼєкт_нативної_дії_байтів_чародія_отримати_елемент = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_отримати_елемент, нативна_дія_байтів_чародія_отримати_елемент, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(М, обʼєкт_структури.методи::адреса, М.БН.С.чародія_отримати_елемент, обʼєкт_нативної_дії_байтів_чародія_отримати_елемент як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_байтів_чародія_змінити_елемент = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_змінити_елемент, нативна_дія_байтів_чародія_змінити_елемент, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(М, обʼєкт_структури.методи::адреса, М.БН.С.чародія_змінити_елемент, обʼєкт_нативної_дії_байтів_чародія_змінити_елемент як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_байтів_чародія_видалити_елемент = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_видалити_елемент, нативна_дія_байтів_чародія_видалити_елемент, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(М, обʼєкт_структури.методи::адреса, М.БН.С.чародія_видалити_елемент, обʼєкт_нативної_дії_байтів_чародія_видалити_елемент як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_байтів_чародія_перебір = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_перебір, нативна_дія_байтів_чародія_перебір, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(М, обʼєкт_структури.методи::адреса, М.БН.С.чародія_перебір, обʼєкт_нативної_дії_байтів_чародія_перебір як адреса<Обʼєкт>);

    ціль обʼєкт_нативної_дії_байтів_додати = виділити_обʼєкт_нативної_дії(М, М.БН.С.додати, нативна_дія_байтів_додати, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(М, обʼєкт_структури.методи::адреса, М.БН.С.додати, обʼєкт_нативної_дії_байтів_додати як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_байтів_забрати = виділити_обʼєкт_нативної_дії(М, М.БН.С.забрати, нативна_дія_байтів_забрати, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(М, обʼєкт_структури.методи::адреса, М.БН.С.забрати, обʼєкт_нативної_дії_байтів_забрати як адреса<Обʼєкт>);

    вернути обʼєкт_структури;
  }

  місцева дія виділити_обʼєкт_байтів(М: адреса<Машина>, розмір: позитивне): адреса<ОбʼєктБайтів> {
    ціль обʼєкт_байтів = виділити_обʼєкт<ОбʼєктБайтів>(М, М.обʼєкт_структури_байти);

    обʼєкт_байтів.властивості = зробити_реєстр<адреса<Назва>, адреса<Обʼєкт>>(М, перевірити_чи_назви_рівні);
    обʼєкт_байтів.дані = зробити_накопичувач<п8>(М);
    розширити_накопичувач<п8>(М, обʼєкт_байтів.дані::адреса, розмір, 0);

    вернути обʼєкт_байтів;
  }

  місцева дія звільнити_обʼєкт_байтів(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>) {
    звільнити_значення_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, обʼєкт_байтів.властивості);
    звільнити_значення_накопичувача<п8>(М, обʼєкт_байтів.дані);
    звільнити(М, обʼєкт_байтів);
  }

  місцева дія обʼєкт_байтів_виконати(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати байти") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_отримати_властивість(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    якщо назва == М.БН.С.довжина {
      вернути виділити_обʼєкт_числа(М, д64(обʼєкт_байтів.дані.розмір)) як адреса<Обʼєкт>;
    }
    ціль елемент_реєстру = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, обʼєкт_байтів.властивості::адреса, назва);
    якщо елемент_реєстру != пусто {
      вернути елемент_реєстру.значення;
    }
    змінна ціль тип = обʼєкт_байтів.тип;
    поки тип != пусто {
      ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, тип.методи::адреса, назва);
      якщо елемент_реєстру_методів != пусто {
        вернути елемент_реєстру_методів.значення;
      }
      тип = тип.предок;
    }
    вернути пусто;
  }

  місцева дія обʼєкт_байтів_змінити_властивість(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо назва == М.БН.С.довжина {
      вернути пусто;
    }
    якщо перевірити_чи_назва_чародія(М, назва) {
      вернути пусто;
    }
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(М, обʼєкт_байтів.властивості::адреса, назва, аргумент);
    вернути пусто;
  }

  місцева дія обʼєкт_байтів_видалити_властивість(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    якщо видалити_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, обʼєкт_байтів.властивості::адреса, назва) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_виконати_властивість(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_властивості = обʼєкт_байтів_отримати_властивість(обʼєкт_байтів, М, назва_властивості);
    якщо М.стан_падіння == позитивне(так) {
      вернути обʼєкт_властивості;
    }
    вернути обʼєкт_виконати(обʼєкт_властивості, М, обʼєкт_байтів як адреса<Обʼєкт>, аргументи, іменовані_аргументи);
  }

  місцева дія обʼєкт_байтів_отримати_елемент(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо ключ == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Ключ отримання елемента зі байтів має бути числом") як адреса<Обʼєкт>;
    }
    якщо ключ.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Ключ отримання елемента зі байтів має бути числом") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = ключ як адреса<ОбʼєктЧисла>;
    ціль позиція = позитивне(обʼєкт_числа.значення);
    якщо обʼєкт_байтів.дані.розмір > позиція {
      вернути виділити_обʼєкт_числа(М, д64(обʼєкт_байтів.дані.дані[позиція])) як адреса<Обʼєкт>;
    }
    вернути пусто;
  }

  місцева дія обʼєкт_байтів_змінити_елемент(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо перевірити_чи_обʼєкт_є_числом(ключ, М) == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Ключ для зміни елемента байтів має бути числом") як адреса<Обʼєкт>;
    }
    якщо перевірити_чи_обʼєкт_є_числом(значення, М) == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Значення елемента байтів має бути числом") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа_ключа = ключ як адреса<ОбʼєктЧисла>;
    ціль обʼєкт_числа_значення = значення як адреса<ОбʼєктЧисла>;
    ціль позиція = позитивне(обʼєкт_числа_ключа.значення);
    ціль значення_значення = п8(обʼєкт_числа_значення.значення);
    якщо обʼєкт_байтів.дані.розмір > позиція {
      обʼєкт_байтів.дані.дані[позиція] = значення_значення;
    } інакше {
      розширити_накопичувач<п8>(М, обʼєкт_байтів.дані::адреса, позиція + 1, 0);
      обʼєкт_байтів.дані.дані[позиція] = значення_значення;
    }
    вернути пусто;
  }

  місцева дія обʼєкт_байтів_видалити_елемент(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо ключ == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Ключ видалення елемента зі байтів має бути числом") як адреса<Обʼєкт>;
    }
    якщо ключ.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Ключ видалення елемента зі байтів має бути числом") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = ключ як адреса<ОбʼєктЧисла>;
    ціль позиція = позитивне(обʼєкт_числа.значення);
    якщо видалити_з_накопичувача<п8>(М, обʼєкт_байтів.дані::адреса, позиція) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  дія нативна_дія_перебору_байтів_далі(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_байтів = обʼєкт_отримати_властивість(обʼєкт_я, М, М.БН.С.сп);
    зберегти_обʼєкт(М, обʼєкт_байтів);
    якщо М.стан_падіння == позитивне(так) {
      видалити_збережений_обʼєкт(М);
      вернути обʼєкт_байтів;
    }
    ціль довжина_байтів = обʼєкт_отримати_властивість(обʼєкт_байтів, М, М.БН.С.довжина);
    зберегти_обʼєкт(М, довжина_байтів);
    якщо М.стан_падіння == позитивне(так) {
      видалити_збережений_обʼєкт(М);
      видалити_збережений_обʼєкт(М);
      вернути довжина_байтів;
    }
    змінна ціль обʼєкт_позиції = обʼєкт_отримати_властивість(обʼєкт_я, М, М.БН.С.позиція);
    зберегти_обʼєкт(М, обʼєкт_позиції);
    якщо М.стан_падіння == позитивне(так) {
      видалити_збережений_обʼєкт(М);
      видалити_збережений_обʼєкт(М);
      видалити_збережений_обʼєкт(М);
      вернути обʼєкт_позиції;
    }
    ціль чи_позиція_менше = обʼєкт_менше(обʼєкт_позиції, М, довжина_байтів);
    зберегти_обʼєкт(М, чи_позиція_менше);
    якщо М.стан_падіння == позитивне(так) {
      видалити_збережений_обʼєкт(М);
      видалити_збережений_обʼєкт(М);
      видалити_збережений_обʼєкт(М);
      видалити_збережений_обʼєкт(М);
      вернути чи_позиція_менше;
    }
    якщо чи_позиція_менше == М.обʼєкт_логічного_так як адреса<Обʼєкт> {
      якщо М.стан_падіння == позитивне(так) {
        видалити_збережений_обʼєкт(М);
        видалити_збережений_обʼєкт(М);
        видалити_збережений_обʼєкт(М);
        видалити_збережений_обʼєкт(М);
        вернути обʼєкт_позиції;
      }
      ціль елемент_байтів = обʼєкт_отримати_елемент(обʼєкт_байтів, М, обʼєкт_позиції);
      зберегти_обʼєкт(М, чи_позиція_менше);
      якщо М.стан_падіння == позитивне(так) {
        видалити_збережений_обʼєкт(М);
        видалити_збережений_обʼєкт(М);
        видалити_збережений_обʼєкт(М);
        видалити_збережений_обʼєкт(М);
        видалити_збережений_обʼєкт(М);
        вернути елемент_байтів;
      }
      обʼєкт_позиції = обʼєкт_додати(обʼєкт_позиції, М, виділити_обʼєкт_числа(М, 1) як адреса<Обʼєкт>);
      зберегти_обʼєкт(М, обʼєкт_позиції);
      ціль результат_зміни_властивості_позиції = обʼєкт_змінити_властивість(обʼєкт_я, М, М.БН.С.позиція, обʼєкт_позиції);
      якщо М.стан_падіння == позитивне(так) {
        видалити_збережений_обʼєкт(М);
        видалити_збережений_обʼєкт(М);
        видалити_збережений_обʼєкт(М);
        видалити_збережений_обʼєкт(М);
        видалити_збережений_обʼєкт(М);
        видалити_збережений_обʼєкт(М);
        вернути результат_зміни_властивості_позиції;
      }
      ціль результат_зміни_властивості_значення = обʼєкт_змінити_властивість(обʼєкт_я, М, М.БН.С.значення, елемент_байтів);
      якщо М.стан_падіння == позитивне(так) {
        видалити_збережений_обʼєкт(М);
        видалити_збережений_обʼєкт(М);
        видалити_збережений_обʼєкт(М);
        видалити_збережений_обʼєкт(М);
        видалити_збережений_обʼєкт(М);
        видалити_збережений_обʼєкт(М);
        вернути результат_зміни_властивості_значення;
      }
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    видалити_збережений_обʼєкт(М);
    видалити_збережений_обʼєкт(М);
    видалити_збережений_обʼєкт(М);
    видалити_збережений_обʼєкт(М);
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_отримати_перебір(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_перебору = виділити_складений_обʼєкт(М, М.обʼєкт_структури_обʼєкт);
    ціль результат_зміни_властивості = складений_обʼєкт_змінити_властивість(обʼєкт_перебору, М, М.БН.С.сп, обʼєкт_байтів як адреса<Обʼєкт>);
    якщо М.стан_падіння == позитивне(так) {
      вернути результат_зміни_властивості;
    }
    ціль обʼєкт_позиції = виділити_обʼєкт_числа(М, 0);
    ціль результат_зміни_властивості_позиції = складений_обʼєкт_змінити_властивість(обʼєкт_перебору, М, М.БН.С.позиція, обʼєкт_позиції як адреса<Обʼєкт>);
    якщо М.стан_падіння == позитивне(так) {
      вернути результат_зміни_властивості_позиції;
    }
    ціль обʼєкт_нативної_дії_байтів_перебору_далі = виділити_обʼєкт_нативної_дії(М, М.БН.С.далі, нативна_дія_перебору_байтів_далі, пусто, пусто);
    ціль результат_зміни_властивості_перебору_далі = складений_обʼєкт_змінити_властивість(обʼєкт_перебору, М, М.БН.С.далі, обʼєкт_нативної_дії_байтів_перебору_далі як адреса<Обʼєкт>);
    якщо М.стан_падіння == позитивне(так) {
      вернути результат_зміни_властивості_перебору_далі;
    }
    вернути обʼєкт_перебору як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_додати(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати додавання для байтів") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_відняти(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати віднімання для байтів") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_помножити(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати множення для байтів") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_поділити(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати ділення для байтів") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_отримати_остачу_ділення(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати отримання остачі ділення для байтів") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_отримати_частку_ділення(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати отримання частки ділення для байтів") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_піднести_до_степеня(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати піднесення до степеня для байтів") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_зсунути_вліво(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вліво для байтів") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_зсунути_вправо(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо для байтів") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_зсунути_вправо_зі_заповненням(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо зі заповненням для байтів") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_двійкове_і(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове І для байтів") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_двійкове_або(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове АБО для байтів") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_двійкове_виключне_або(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове виключне АБО для байтів") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_двійкове_не(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове НЕ для байтів") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_більше(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на більшість для байтів") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_менше(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на меншість для байтів") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_рівно(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо перевірити_чи_обʼєкт_байтів_рівно(обʼєкт_байтів, М, аргумент) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_містить(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на місткість для байтів") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_є(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_Структура {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо перевірити_чи_обʼєкт_байтів_є(обʼєкт_байтів, М, аргумент як адреса<ОбʼєктСтруктури>) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_відʼємне(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати відʼємне для байтів") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_числове(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати числове для байтів") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_заперечити(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_збільшити(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати збільшення для байтів") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_байтів_зменшити(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зменшення для байтів") як адреса<Обʼєкт>;
  }

  місцева дія перевірити_чи_обʼєкт_байтів_рівно(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне {
    ціль обʼєкт = обʼєкт_байтів як адреса<Обʼєкт>;
    якщо обʼєкт == аргумент {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_обʼєкт_байтів_є(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне {
    якщо обʼєкт_структури == М.обʼєкт_структури_байти {
      вернути так;
    }
    вернути ні;
  }

  місцева дія надрукувати_обʼєкт_байтів_в_накопичувач_ю8(обʼєкт_байтів: адреса<ОбʼєктБайтів>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    покласти_в_накопичувач_ю8(М, накопичувач_ю8, ю8"<байти ");
    надрукувати_обʼєкт_в_накопичувач_ю8(виділити_обʼєкт_числа(М, д64(обʼєкт_байтів.дані.розмір)) як адреса<Обʼєкт>, М, накопичувач_ю8, глибина + 1);
    покласти_в_накопичувач_ю8(М, накопичувач_ю8, ю8">");
  }
}