взяти визначення МаМа;

секція МаМа {
  місцева дія виділити_обʼєкт_структури(М: адреса<Машина>, назва: адреса<Назва>, предок: адреса<ОбʼєктСтруктури>): адреса<ОбʼєктСтруктури> {
    ціль обʼєкт_структури = виділити_обʼєкт<ОбʼєктСтруктури>(М, М.обʼєкт_структури_Структура);

    обʼєкт_структури.властивості = зробити_реєстр<адреса<Назва>, адреса<Обʼєкт>>(М, перевірити_чи_назви_рівні);
    обʼєкт_структури.назва = назва;
    обʼєкт_структури.предок = предок;
    обʼєкт_структури.параметри = виділити_реєстр<адреса<Назва>, Параметр>(М, перевірити_чи_назви_рівні);
    якщо предок != пусто {
      змінна ціль пп: позитивне = 0;
      поки пп < предок.параметри.розмір {
        змінити_в_реєстрі<адреса<Назва>, Параметр>(М, обʼєкт_структури.параметри, предок.параметри.елементи[пп].ключ, предок.параметри.елементи[пп].значення);
        пп += 1;
      }
    }
    обʼєкт_структури.методи = зробити_реєстр<адреса<Назва>, адреса<Обʼєкт>>(М, перевірити_чи_назви_рівні);
    обʼєкт_структури.середовище_створення = пусто;

    вернути обʼєкт_структури;
  }

  // мітка: прохід по типах обʼєктів
  місцева дія додати_метод_до_обʼєкта_структури(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, назва: адреса<Назва>, обʼєкт_дії: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_структури == М.обʼєкт_структури_Структура {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо додати метод") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_структури == М.обʼєкт_структури_Дія {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо додати метод") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_структури == М.обʼєкт_структури_НативнаДія {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо додати метод") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_структури == М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо додати метод") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_структури == М.обʼєкт_структури_текст {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо додати метод") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_структури == М.обʼєкт_структури_юнікод {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо додати метод") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_структури == М.обʼєкт_структури_Модуль {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо додати метод") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_структури == М.обʼєкт_структури_список {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо додати метод") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_структури == М.обʼєкт_структури_словник {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо додати метод") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_структури == М.обʼєкт_структури_логічне {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо додати метод") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_структури == М.обʼєкт_структури_байти {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо додати метод") як адреса<Обʼєкт>;
    }
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(М, обʼєкт_структури.методи::адреса, назва, обʼєкт_дії);
    вернути пусто;
  }

  місцева дія звільнити_обʼєкт_структури(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>) {
    звільнити_значення_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, обʼєкт_структури.властивості);
    звільнити_реєстр_параметрів(М, обʼєкт_структури.параметри);
    звільнити_значення_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, обʼєкт_структури.методи);
    звільнити(М, обʼєкт_структури);
  }

  // мітка: прохід по типах обʼєктів
  місцева дія обʼєкт_структури_виконати(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_структури == М.обʼєкт_структури_обʼєкт {
      ціль складений_обʼєкт = виділити_складений_обʼєкт(М, обʼєкт_структури);
      якщо іменовані_аргументи != пусто {
        змінна ціль па: позитивне = 0;
        поки па < іменовані_аргументи.розмір {
          ціль елемент_аргумента_з_назвою = іменовані_аргументи.елементи[па];
          змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(М, складений_обʼєкт.властивості::адреса, елемент_аргумента_з_назвою.ключ, елемент_аргумента_з_назвою.значення);
          па += 1;
        }
      }
      вернути складений_обʼєкт як адреса<Обʼєкт>;
    } інакше якщо обʼєкт_структури == М.обʼєкт_структури_Структура {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо створити обʼєкт структури вручну") як адреса<Обʼєкт>;
    } інакше якщо обʼєкт_структури == М.обʼєкт_структури_Дія {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо створити обʼєкт дії вручну") як адреса<Обʼєкт>;
    } інакше якщо обʼєкт_структури == М.обʼєкт_структури_НативнаДія {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо створити обʼєкт нативної дії вручну") як адреса<Обʼєкт>;
    } інакше якщо обʼєкт_структури == М.обʼєкт_структури_число {
      змінна ціль знайдено_обʼєкт_аргумента_значення = ні;
      змінна ціль обʼєкт_аргумента_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, іменовані_аргументи, М.БН.С.значення);
        якщо елемент_значення != пусто {
          знайдено_обʼєкт_аргумента_значення = так;
          обʼєкт_аргумента_значення = елемент_значення.значення;
        }
      }
      якщо знайдено_обʼєкт_аргумента_значення == ні {
        якщо аргументи != пусто {
          якщо аргументи.розмір > 0 {
            знайдено_обʼєкт_аргумента_значення = так;
            обʼєкт_аргумента_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_обʼєкт_аргумента_значення == ні {
        увімкнути_стан_падіння(М, пусто);
        вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
      }
      якщо обʼєкт_аргумента_значення.тип == М.обʼєкт_структури_число {
        вернути обʼєкт_аргумента_значення;
      }
      вернути обʼєкт_числове(обʼєкт_аргумента_значення, М);
    } інакше якщо обʼєкт_структури == М.обʼєкт_структури_текст {
      змінна ціль знайдено_обʼєкт_аргумента_значення = ні;
      змінна ціль обʼєкт_аргумента_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, іменовані_аргументи, М.БН.С.значення);
        якщо елемент_значення != пусто {
          знайдено_обʼєкт_аргумента_значення = так;
          обʼєкт_аргумента_значення = елемент_значення.значення;
        }
      }
      якщо знайдено_обʼєкт_аргумента_значення == ні {
        якщо аргументи != пусто {
          якщо аргументи.розмір > 0 {
            знайдено_обʼєкт_аргумента_значення = так;
            обʼєкт_аргумента_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_обʼєкт_аргумента_значення == ні {
        увімкнути_стан_падіння(М, пусто);
        вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
      }
      якщо обʼєкт_аргумента_значення.тип == М.обʼєкт_структури_текст {
        вернути обʼєкт_аргумента_значення;
      }
      вернути обʼєкт_виконати_властивість(обʼєкт_аргумента_значення, М, М.БН.С.чародія_текст, пусто, пусто);
    } інакше якщо обʼєкт_структури == М.обʼєкт_структури_юнікод {
      змінна ціль знайдено_обʼєкт_аргумента_значення = ні;
      змінна ціль обʼєкт_аргумента_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, іменовані_аргументи, М.БН.С.значення);
        якщо елемент_значення != пусто {
          знайдено_обʼєкт_аргумента_значення = так;
          обʼєкт_аргумента_значення = елемент_значення.значення;
        }
      }
      якщо знайдено_обʼєкт_аргумента_значення == ні {
        якщо аргументи != пусто {
          якщо аргументи.розмір > 0 {
            знайдено_обʼєкт_аргумента_значення = так;
            обʼєкт_аргумента_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_обʼєкт_аргумента_значення == ні {
        увімкнути_стан_падіння(М, пусто);
        вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
      }
      якщо обʼєкт_аргумента_значення.тип == М.обʼєкт_структури_юнікод {
        вернути обʼєкт_аргумента_значення;
      }
      вернути обʼєкт_виконати_властивість(обʼєкт_аргумента_значення, М, М.БН.С.чародія_юнікод, пусто, пусто);
    } інакше якщо обʼєкт_структури == М.обʼєкт_структури_Модуль {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо створити обʼєкт модуля вручну") як адреса<Обʼєкт>;
    } інакше якщо обʼєкт_структури == М.обʼєкт_структури_список {
      змінна ціль знайдено_обʼєкт_аргумента_значення = ні;
      змінна ціль обʼєкт_аргумента_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, іменовані_аргументи, М.БН.С.значення);
        якщо елемент_значення != пусто {
          знайдено_обʼєкт_аргумента_значення = так;
          обʼєкт_аргумента_значення = елемент_значення.значення;
        }
      }
      якщо знайдено_обʼєкт_аргумента_значення == ні {
        якщо аргументи != пусто {
          якщо аргументи.розмір > 0 {
            знайдено_обʼєкт_аргумента_значення = так;
            обʼєкт_аргумента_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_обʼєкт_аргумента_значення == ні {
        увімкнути_стан_падіння(М, пусто);
        вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
      }
      вернути обʼєкт_виконати_властивість(обʼєкт_аргумента_значення, М, М.БН.С.чародія_список, пусто, пусто);
    } інакше якщо обʼєкт_структури == М.обʼєкт_структури_словник {
      змінна ціль знайдено_обʼєкт_аргумента_значення = ні;
      змінна ціль обʼєкт_аргумента_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, іменовані_аргументи, М.БН.С.значення);
        якщо елемент_значення != пусто {
          знайдено_обʼєкт_аргумента_значення = так;
          обʼєкт_аргумента_значення = елемент_значення.значення;
        }
      }
      якщо знайдено_обʼєкт_аргумента_значення == ні {
        якщо аргументи != пусто {
          якщо аргументи.розмір > 0 {
            знайдено_обʼєкт_аргумента_значення = так;
            обʼєкт_аргумента_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_обʼєкт_аргумента_значення == ні {
        увімкнути_стан_падіння(М, пусто);
        вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
      }
      вернути обʼєкт_виконати_властивість(обʼєкт_аргумента_значення, М, М.БН.С.чародія_словник, пусто, пусто);
    } інакше якщо обʼєкт_структури == М.обʼєкт_структури_логічне {
      змінна ціль знайдено_обʼєкт_аргумента_значення = ні;
      змінна ціль обʼєкт_аргумента_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, іменовані_аргументи, М.БН.С.значення);
        якщо елемент_значення != пусто {
          знайдено_обʼєкт_аргумента_значення = так;
          обʼєкт_аргумента_значення = елемент_значення.значення;
        }
      }
      якщо знайдено_обʼєкт_аргумента_значення == ні {
        якщо аргументи != пусто {
          якщо аргументи.розмір > 0 {
            знайдено_обʼєкт_аргумента_значення = так;
            обʼєкт_аргумента_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_обʼєкт_аргумента_значення == ні {
        увімкнути_стан_падіння(М, пусто);
        вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
      }
      якщо перевірити_чи_обʼєкт_виражається_логічним_так(обʼєкт_аргумента_значення, М) {
        вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
      }
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    } інакше якщо обʼєкт_структури == М.обʼєкт_структури_байти {
      змінна ціль знайдено_обʼєкт_аргумента_значення = ні;
      змінна ціль обʼєкт_аргумента_значення: адреса<Обʼєкт> = пусто;
      якщо іменовані_аргументи != пусто {
        ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, іменовані_аргументи, М.БН.С.значення);
        якщо елемент_значення != пусто {
          знайдено_обʼєкт_аргумента_значення = так;
          обʼєкт_аргумента_значення = елемент_значення.значення;
        }
      }
      якщо знайдено_обʼєкт_аргумента_значення == ні {
        якщо аргументи != пусто {
          якщо аргументи.розмір > 0 {
            знайдено_обʼєкт_аргумента_значення = так;
            обʼєкт_аргумента_значення = аргументи.дані[0];
          }
        }
      }
      якщо знайдено_обʼєкт_аргумента_значення == ні {
        увімкнути_стан_падіння(М, пусто);
        вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
      }
      якщо перевірити_чи_обʼєкт_є_числом(обʼєкт_аргумента_значення, М) == так {
        ціль обʼєкт_числа_аргумента_значення = обʼєкт_аргумента_значення як адреса<ОбʼєктЧисла>;
        ціль значення_числа_аргумента_значення = обʼєкт_числа_аргумента_значення.значення;
        ціль обʼєкт_байтів = виділити_обʼєкт_байтів(М, позитивне(значення_числа_аргумента_значення));
        вернути обʼєкт_байтів як адреса<Обʼєкт>;
      }
      вернути обʼєкт_виконати_властивість(обʼєкт_аргумента_значення, М, М.БН.С.чародія_байти, пусто, пусто);
    }
    ціль складений_обʼєкт = виділити_складений_обʼєкт(М, обʼєкт_структури);
    змінна ціль пп: позитивне = 0;
    поки пп < обʼєкт_структури.параметри.розмір {
      ціль елемент_параметра = обʼєкт_структури.параметри.елементи[пп];
      ціль назва_параметра = елемент_параметра.ключ;
      ціль параметр = елемент_параметра.значення;
      змінна ціль аргумент: адреса<Обʼєкт> = пусто;
      якщо аргументи == пусто {
        якщо іменовані_аргументи == пусто {
          якщо параметр.код_значення_за_замовчуванням == пусто {
            увімкнути_стан_падіння(М, пусто);
            вернути виділити_обʼєкт_тексту_помилки_пропущено_аргумент(М, назва_параметра);
          } інакше {
            ціль результат_виконання_значення_за_замовчуванням = виконати_код_в_середовищі(М, обʼєкт_структури.середовище_створення, параметр.код_значення_за_замовчуванням);
            якщо М.стан_падіння == позитивне(так) {
              вернути результат_виконання_значення_за_замовчуванням;
            }
            ціль значення_за_замовчуванням = забрати_з_накопичувача<адреса<Обʼєкт>>(М, М.НаО::адреса);
            аргумент = значення_за_замовчуванням;
          }
        } інакше {
          ціль елемент_аргумента_з_назвою = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, іменовані_аргументи, назва_параметра);
          якщо елемент_аргумента_з_назвою == пусто {
            якщо параметр.код_значення_за_замовчуванням == пусто {
              увімкнути_стан_падіння(М, пусто);
              вернути виділити_обʼєкт_тексту_помилки_пропущено_аргумент(М, назва_параметра);
            } інакше {
              ціль результат_виконання_значення_за_замовчуванням = виконати_код_в_середовищі(М, обʼєкт_структури.середовище_створення, параметр.код_значення_за_замовчуванням);
              якщо М.стан_падіння == позитивне(так) {
                вернути результат_виконання_значення_за_замовчуванням;
              }
              ціль значення_за_замовчуванням = забрати_з_накопичувача<адреса<Обʼєкт>>(М, М.НаО::адреса);
              аргумент = значення_за_замовчуванням;
            }
          } інакше {
            аргумент = елемент_аргумента_з_назвою.значення;
          }
        }
      } інакше {
        якщо іменовані_аргументи == пусто {
          якщо аргументи.розмір > пп {
            аргумент = аргументи.дані[пп];
          } інакше {
            якщо параметр.код_значення_за_замовчуванням == пусто {
              увімкнути_стан_падіння(М, пусто);
              вернути виділити_обʼєкт_тексту_помилки_пропущено_аргумент(М, назва_параметра);
            } інакше {
              ціль результат_виконання_значення_за_замовчуванням = виконати_код_в_середовищі(М, обʼєкт_структури.середовище_створення, параметр.код_значення_за_замовчуванням);
              якщо М.стан_падіння == позитивне(так) {
                вернути результат_виконання_значення_за_замовчуванням;
              }
              ціль значення_за_замовчуванням = забрати_з_накопичувача<адреса<Обʼєкт>>(М, М.НаО::адреса);
              аргумент = значення_за_замовчуванням;
            }
          }
        } інакше {
          ціль елемент_аргумента_з_назвою = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, іменовані_аргументи, назва_параметра);
          якщо елемент_аргумента_з_назвою == пусто {
            якщо аргументи.розмір > пп {
              аргумент = аргументи.дані[пп];
            } інакше {
              якщо параметр.код_значення_за_замовчуванням == пусто {
                увімкнути_стан_падіння(М, пусто);
                вернути виділити_обʼєкт_тексту_помилки_пропущено_аргумент(М, назва_параметра);
              } інакше {
                ціль результат_виконання_значення_за_замовчуванням = виконати_код_в_середовищі(М, обʼєкт_структури.середовище_створення, параметр.код_значення_за_замовчуванням);
                якщо М.стан_падіння == позитивне(так) {
                  вернути результат_виконання_значення_за_замовчуванням;
                }
                ціль значення_за_замовчуванням = забрати_з_накопичувача<адреса<Обʼєкт>>(М, М.НаО::адреса);
                аргумент = значення_за_замовчуванням;
              }
            }
          } інакше {
            аргумент = елемент_аргумента_з_назвою.значення;
          }
        }
      }
      якщо параметр.типи.розмір > 0 {
        змінна ціль пп: позитивне = 0;
        змінна ціль знайдено_тип: логічне = ні;
        поки пп < параметр.типи.розмір {
          якщо перевірити_чи_обʼєкт_є(аргумент, М, параметр.типи.дані[пп]) {
            знайдено_тип = так;
          }
          пп += 1;
        }
        якщо знайдено_тип == ні {
          увімкнути_стан_падіння(М, пусто);
          якщо аргумент == пусто {
            вернути виділити_обʼєкт_тексту_помилки_невірний_тип_аргумента(М, назва_параметра.значення, параметр.типи, пусто);
          } інакше {
            вернути виділити_обʼєкт_тексту_помилки_невірний_тип_аргумента(М, назва_параметра.значення, параметр.типи, аргумент.тип);
          }
        }
      }
      змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(М, складений_обʼєкт.властивості::адреса, назва_параметра, аргумент);
      пп += 1;
    }
    вернути складений_обʼєкт як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_отримати_властивість(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    якщо назва == М.БН.С.назва {
      якщо обʼєкт_структури.назва == пусто {
        вернути пусто;
      }
      вернути виділити_обʼєкт_з_назви(М, обʼєкт_структури.назва);
    }
    ціль елемент_реєстру = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, обʼєкт_структури.властивості::адреса, назва);
    якщо елемент_реєстру != пусто {
      вернути елемент_реєстру.значення;
    }
    змінна ціль тип = обʼєкт_структури.тип;
    поки тип != пусто {
      ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, тип.методи::адреса, назва);
      якщо елемент_реєстру_методів != пусто {
        вернути елемент_реєстру_методів.значення;
      }
      тип = тип.предок;
    }
    вернути пусто;
  }

  місцева дія обʼєкт_структури_змінити_властивість(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо назва == М.БН.С.назва {
      вернути пусто;
    }
    якщо перевірити_чи_назва_чародія(М, назва) {
      вернути пусто;
    }
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(М, обʼєкт_структури.властивості::адреса, назва, аргумент);
    вернути пусто;
  }

  місцева дія обʼєкт_структури_видалити_властивість(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    якщо видалити_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(М, обʼєкт_структури.властивості::адреса, назва) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_виконати_властивість(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_властивості = обʼєкт_структури_отримати_властивість(обʼєкт_структури, М, назва_властивості);
    якщо М.стан_падіння == позитивне(так) {
      вернути обʼєкт_властивості;
    }
    вернути обʼєкт_виконати(обʼєкт_властивості, М, обʼєкт_структури як адреса<Обʼєкт>, аргументи, іменовані_аргументи);
  }

  місцева дія обʼєкт_структури_отримати_елемент(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати елемент зі структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_змінити_елемент(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо змінити елемент в структурі") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_видалити_елемент(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо видалити елемент зі структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_отримати_перебір(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати перебір зі структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_додати(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати додавання для структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_відняти(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати віднімання для структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_помножити(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати множення для структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_поділити(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати ділення для структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_отримати_остачу_ділення(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати отримання остачі ділення для структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_отримати_частку_ділення(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати отримання частки ділення для структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_піднести_до_степеня(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати піднесення до степеня для структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_зсунути_вліво(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вліво для структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_зсунути_вправо(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо для структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_зсунути_вправо_зі_заповненням(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо зі заповненням для структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_двійкове_і(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове І для структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_двійкове_або(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове АБО для структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_двійкове_виключне_або(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове ВИКЛЮЧНЕ АБО для структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_двійкове_не(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове НЕ для структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_більше(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на більшість для структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_менше(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на меншість для структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_рівно(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо перевірити_чи_обʼєкт_структури_рівно(обʼєкт_структури, М, аргумент) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_містить(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на містікість для структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_є(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_Структура {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо перевірити_чи_обʼєкт_структури_є(обʼєкт_структури, М, аргумент як адреса<ОбʼєктСтруктури>) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_відʼємне(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати відʼємне для структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_числове(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати числове для структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_заперечити(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_збільшити(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати збільшення для структури") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_структури_зменшити(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зменшення для структури") як адреса<Обʼєкт>;
  }

  місцева дія перевірити_чи_обʼєкт_структури_рівно(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне {
    ціль обʼєкт = обʼєкт_структури як адреса<Обʼєкт>;
    якщо обʼєкт == аргумент {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_обʼєкт_структури_є(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне {
    якщо обʼєкт_структури == М.обʼєкт_структури_Структура {
      вернути так;
    }
    вернути ні;
  }

  місцева дія надрукувати_обʼєкт_структури_в_накопичувач_ю8(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    покласти_в_накопичувач_ю8(М, накопичувач_ю8, ю8"<структура");
    якщо обʼєкт_структури.назва != пусто {
      покласти_в_накопичувач_ю8(М, накопичувач_ю8, ю8" ");
      ціль назва_ю8: Ю8 = пусто;
      якщо виділити_ю8_з_назви(М, обʼєкт_структури.назва, назва_ю8::адреса) == ні {
        ПОМЕРТИ(М, ю8"Не вдалось отримати ю8 з назви дії");
      }
      покласти_в_накопичувач_ю8(М, накопичувач_ю8, назва_ю8);
      звільнити(М, назва_ю8 як адреса);
    }
    покласти_в_накопичувач_ю8(М, накопичувач_ю8, ю8">");
  }
}