////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  місцева дія надрукувати_обʼєкт_структури_в_буфер_ю8(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, буфер_ю8: адреса<БуферЮ8>, глибина: позитивне) {
    додати_до_буфера_ю8(буфер_ю8, ю8"<структура");
    якщо обʼєкт_структури.назва != пусто {
      додати_до_буфера_ю8(буфер_ю8, ю8" ");
      додати_до_буфера_ю8(буфер_ю8, обʼєкт_структури.назва.значення);
    }
    додати_до_буфера_ю8(буфер_ю8, ю8">");
  }

  місцева дія виділити_обʼєкт_структури(М: адреса<Машина>, назва: адреса<Назва>, предок: адреса<ОбʼєктСтруктури>): адреса<ОбʼєктСтруктури> {
    ціль обʼєкт_структури = виділити_обʼєкт<ОбʼєктСтруктури>(М, М.обʼєкт_структури_Структура);

    обʼєкт_структури.властивості = зробити_реєстр<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні);
    обʼєкт_структури.назва = назва;
    обʼєкт_структури.предок = предок;
    обʼєкт_структури.параметри = виділити_реєстр<адреса<Назва>, Параметр>(перевірити_чи_назви_рівні);
    якщо предок != пусто {
      змінна ціль пп: позитивне = 0;
      поки пп < предок.параметри.розмір {
        змінити_в_реєстрі<адреса<Назва>, Параметр>(обʼєкт_структури.параметри, предок.параметри.елементи[пп].ключ, предок.параметри.елементи[пп].значення);
        пп += 1;
      }
    }
    обʼєкт_структури.методи = зробити_реєстр<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні);
    обʼєкт_структури.середовище_створення = пусто;

    вернути обʼєкт_структури;
  }

  місцева дія обʼєкт_структури_виконати(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): адреса_або_стан_помилки<Обʼєкт> {
    ціль складений_обʼєкт = виділити_складений_обʼєкт(М, обʼєкт_структури);
    змінна ціль пп: позитивне = 0;
    поки пп < обʼєкт_структури.параметри.розмір {
      ціль параметр = обʼєкт_структури.параметри.елементи[пп].значення;
      змінна ціль аргумент: адреса<Обʼєкт> = пусто;
      // потім: перевірити чи аргументи не пусто
      якщо аргументи.розмір > пп {
        аргумент = аргументи.дані[пп];
      } інакше {
        якщо іменовані_аргументи == пусто {
          якщо параметр.код_значення_за_замовчуванням != пусто {
            ціль результат_виконання_значення_за_замовчуванням = виконати_код(М, обʼєкт_структури.середовище_створення, параметр.код_значення_за_замовчуванням);
            якщо М.стан_помилки {
              вернути результат_виконання_значення_за_замовчуванням;
            }
            ціль значення_за_замовчуванням = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
            аргумент = значення_за_замовчуванням;
          }
        } інакше {
          ціль елемент_аргумента_з_назвою = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, параметр.назва);
          якщо елемент_аргумента_з_назвою == пусто {
            якщо параметр.код_значення_за_замовчуванням != пусто {
              ціль результат_виконання_значення_за_замовчуванням = виконати_код(М, обʼєкт_структури.середовище_створення, параметр.код_значення_за_замовчуванням);
              якщо М.стан_помилки {
                вернути результат_виконання_значення_за_замовчуванням;
              }
              ціль значення_за_замовчуванням = забрати_з_накопичувача<адреса<Обʼєкт>>(М.накопичувач_виконання::адреса);
              аргумент = значення_за_замовчуванням;
            }
          } інакше {
            аргумент = елемент_аргумента_з_назвою.значення;
          }
        }
      }
      якщо параметр.типи.розмір > 0 {
        змінна ціль пп: позитивне = 0;
        змінна ціль знайдено_тип: логічне = ні;
        поки пп < параметр.типи.розмір {
          якщо обʼєкт_є(аргумент, М, параметр.типи.дані[пп]) {
            знайдено_тип = так;
          }
          пп += 1;
        }
        якщо знайдено_тип == ні {
          увімкнути_стан_помилки(М);
          якщо аргумент == пусто {
            вернути виділити_обʼєкт_тексту_помилки_невірний_тип_аргумента(М, параметр.назва.значення, параметр.типи, пусто);
          } інакше {
            вернути виділити_обʼєкт_тексту_помилки_невірний_тип_аргумента(М, параметр.назва.значення, параметр.типи, аргумент.тип);
          }
        }
      }
      змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(складений_обʼєкт.властивості::адреса, параметр.назва, аргумент);
      пп += 1;
    }
    вернути складений_обʼєкт як адреса<Обʼєкт>;
  }

  місцева дія звільнити_обʼєкт_структури(обʼєкт_структури: адреса<ОбʼєктСтруктури>, М: адреса<Машина>) {
    звільнити_значення_реєстру<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.властивості);
    звільнити_реєстр<адреса<Назва>, Параметр>(обʼєкт_структури.параметри);
    звільнити_значення_реєстру<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи);
    звільнити(обʼєкт_структури);
  }
}