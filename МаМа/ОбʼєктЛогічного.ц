////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  місцева дія створити_структуру_логічного(М: адреса<Машина>): адреса<ОбʼєктСтруктури> {
    ціль обʼєкт_структури = виділити_обʼєкт_структури(М, М.БН.С.логічне, М.обʼєкт_структури_обʼєкт);

    вернути обʼєкт_структури;
  }

  місцева дія виділити_обʼєкт_логічного(М: адреса<Машина>, значення: логічне): адреса<ОбʼєктЛогічного> {
    якщо значення {
      якщо М.обʼєкт_логічного_так != пусто {
        вернути М.обʼєкт_логічного_так;
      }
    } інакше {
      якщо М.обʼєкт_логічного_ні != пусто {
        вернути М.обʼєкт_логічного_ні;
      }
    }

    ціль обʼєкт_логічного = виділити_обʼєкт<ОбʼєктЛогічного>(М, М.обʼєкт_структури_логічне);

    обʼєкт_логічного.значення = значення;

    вернути обʼєкт_логічного;
  }

  місцева дія звільнити_обʼєкт_логічного(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>) {
    звільнити(обʼєкт_логічного);
  }

  місцева дія обʼєкт_логічного_виконати(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати логічне") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_отримати_властивість(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    змінна ціль тип = обʼєкт_логічного.тип;
    поки тип != пусто {
      ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(тип.методи::адреса, назва);
      якщо елемент_реєстру_методів != пусто {
        вернути елемент_реєстру_методів.значення;
      }
      тип = тип.предок;
    }
    вернути пусто;
  }

  місцева дія обʼєкт_логічного_змінити_властивість(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто;
  }

  місцева дія обʼєкт_логічного_виконати_властивість(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_властивості = обʼєкт_логічного_отримати_властивість(обʼєкт_логічного, М, назва_властивості);
    якщо М.стан_падіння {
      вернути обʼєкт_властивості;
    }
    вернути обʼєкт_виконати(обʼєкт_властивості, М, обʼєкт_логічного як адреса<Обʼєкт>, аргументи, іменовані_аргументи);
  }

  місцева дія обʼєкт_логічного_отримати_елемент(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати елемент з логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_змінити_елемент(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо змінити елемент в логічному") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_отримати_перебір(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати перебір з логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_додати(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати додавання для логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_відняти(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати віднімання для логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_помножити(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати множення для логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_поділити(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати ділення для логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_отримати_остачу_ділення(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати отримання остачі ділення для логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_отримати_частку_ділення(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати отримання часки ділення для логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_піднести_до_степеня(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати піднесення до степеня для логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_зсунути_вліво(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вліво для логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_зсунути_вправо(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо для логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_зсунути_вправо_зі_заповненням(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо зі заповненням для логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_двійкове_і(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове І для логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_двійкове_або(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове АБО для логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_двійкове_виключне_або(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове ВИКЛЮЧНЕ АБО для логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_двійкове_не(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове НЕ для логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_більше(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на більшість для логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_менше(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на меншість для логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_рівно(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо перевірити_чи_обʼєкт_логічного_рівно(обʼєкт_логічного, М, аргумент) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_містить(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на місткість для логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_є(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_Структура {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо перевірити_чи_обʼєкт_логічного_є(обʼєкт_логічного, М, аргумент як адреса<ОбʼєктСтруктури>) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_відʼємне(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати відʼємне для логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_числове(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати числове для логічного") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_заперечити(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_логічного == М.обʼєкт_логічного_так {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_збільшити(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо збільшити логічне") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_логічного_зменшити(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо зменшити логічне") як адреса<Обʼєкт>;
  }

  місцева дія перевірити_чи_обʼєкт_логічного_рівно(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне {
    ціль обʼєкт = обʼєкт_логічного як адреса<Обʼєкт>;
    якщо обʼєкт == аргумент {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_обʼєкт_логічного_є(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне {
    якщо обʼєкт_структури == М.обʼєкт_структури_логічне {
      вернути так;
    }
    вернути ні;
  }

  місцева дія надрукувати_обʼєкт_логічного_в_накопичувач_ю8(обʼєкт_логічного: адреса<ОбʼєктЛогічного>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    якщо обʼєкт_логічного.значення {
      покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"так");
    } інакше {
      покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"ні");
    }
  }
}