////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  місцева дія надрукувати_обʼєкт_словника_в_накопичувач_ю8(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"<словник>");
  }

  дія нативна_дія_словника_чародія_отримати_елемент(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): адреса<Обʼєкт> {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт пусто не може виконати дію словника \"чародія_отримати_елемент\"") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_словник {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт не є словником") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_словника = обʼєкт_я як адреса<ОбʼєктСловника>;
    змінна ціль ключ_знайдено = ні;
    змінна ціль ключ: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_аргумента_ключа = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.ключ);
      якщо елемент_аргумента_ключа == пусто {
        ключ_знайдено = так;
        ключ = елемент_аргумента_ключа.значення;
      }
    }
    якщо аргументи != пусто {
      якщо аргументи.розмір > 0 {
        якщо ключ_знайдено == ні {
          ключ_знайдено = так;
          ключ = аргументи.дані[0];
        }
      }
    }
    якщо ключ_знайдено == ні {
      вернути пусто; // помилка
    }
    ціль елемент = отримати_з_реєстру2<адреса<Обʼєкт>, адреса<Обʼєкт>>(обʼєкт_словника.елементи::адреса, ключ);
    якщо елемент == пусто {
      вернути пусто;
    }
    вернути елемент.значення;
  }

  дія нативна_дія_словника_чародія_змінити_елемент(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): адреса<Обʼєкт> {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт пусто не може виконати дію словника \"чародія_змінити_елемент\"") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_словник {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Обʼєкт не є словником") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_словника = обʼєкт_я як адреса<ОбʼєктСловника>;
    змінна ціль ключ_знайдено = ні;
    змінна ціль ключ: адреса<Обʼєкт> = пусто;
    змінна ціль значення_знайдено = ні;
    змінна ціль значення: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_аргумента_ключа = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.ключ);
      якщо елемент_аргумента_ключа == пусто {
        ключ_знайдено = так;
        ключ = елемент_аргумента_ключа.значення;
      }
      ціль елемент_аргумента_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_аргумента_значення == пусто {
        значення_знайдено = так;
        значення = елемент_аргумента_значення.значення;
      }
    }
    якщо аргументи != пусто {
      якщо аргументи.розмір > 0 {
        якщо ключ_знайдено == ні {
          ключ_знайдено = так;
          ключ = аргументи.дані[0];
        }
      }
      якщо аргументи.розмір > 1 {
        якщо значення_знайдено == ні {
          значення_знайдено = так;
          значення = аргументи.дані[1];
        }
      }
    }
    якщо ключ_знайдено == ні {
      вернути пусто; // помилка
    }
    якщо значення_знайдено == ні {
      вернути пусто; // помилка
    }
    змінити_в_реєстрі2<адреса<Обʼєкт>, адреса<Обʼєкт>>(обʼєкт_словника.елементи::адреса, ключ, значення);
    вернути пусто;
  }

  місцева дія створити_структуру_словника(М: адреса<Машина>): адреса<ОбʼєктСтруктури> {
    ціль обʼєкт_структури = виділити_обʼєкт_структури(М, М.БН.С.словник, М.обʼєкт_структури_обʼєкт);

    ціль обʼєкт_нативної_дії_чародія_отримати_елемент = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_отримати_елемент, нативна_дія_словника_чародія_отримати_елемент, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_отримати_елемент, обʼєкт_нативної_дії_чародія_отримати_елемент як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_чародія_змінити_елемент = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_змінити_елемент, нативна_дія_словника_чародія_змінити_елемент, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_змінити_елемент, обʼєкт_нативної_дії_чародія_змінити_елемент як адреса<Обʼєкт>);

    вернути обʼєкт_структури;
  }

  місцева дія виділити_обʼєкт_словника(М: адреса<Машина>, розмір: п32): адреса<ОбʼєктСловника> {
    ціль обʼєкт_словника = виділити_обʼєкт<ОбʼєктСловника>(М, М.обʼєкт_структури_словник);

    обʼєкт_словника.властивості = зробити_реєстр<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні);
    обʼєкт_словника.елементи = зробити_реєстр2<адреса<Обʼєкт>, адреса<Обʼєкт>>(перевірити_чи_обʼєкти_рівні, М);

    вернути обʼєкт_словника;
  }

  місцева дія звільнити_обʼєкт_словника(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>) {
    звільнити(обʼєкт_словника);
  }

  місцева дія обʼєкт_словника_додати(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: помилка
    вернути пусто;
  }

  місцева дія обʼєкт_словника_відняти(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: помилка
    вернути пусто;
  }

  місцева дія обʼєкт_словника_помножити(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: помилка
    вернути пусто;
  }

  місцева дія обʼєкт_словника_поділити(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: помилка
    вернути пусто;
  }

  місцева дія обʼєкт_словника_отримати_остачу_ділення(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: помилка
    вернути пусто;
  }

  місцева дія обʼєкт_словника_отримати_частку_ділення(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: помилка
    вернути пусто;
  }

  місцева дія обʼєкт_словника_піднести_до_степеня(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: помилка
    вернути пусто;
  }

  місцева дія обʼєкт_словника_зсунути_вліво(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: помилка
    вернути пусто;
  }

  місцева дія обʼєкт_словника_зсунути_вправо(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: помилка
    вернути пусто;
  }

  місцева дія обʼєкт_словника_зсунути_вправо_зі_заповненням(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: помилка
    вернути пусто;
  }

  місцева дія обʼєкт_словника_двійкове_і(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: помилка
    вернути пусто;
  }

  місцева дія обʼєкт_словника_двійкове_або(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: помилка
    вернути пусто;
  }

  місцева дія обʼєкт_словника_двійкове_виключне_або(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: помилка
    вернути пусто;
  }

  місцева дія обʼєкт_словника_двійкове_не(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
  }

  місцева дія обʼєкт_словника_більше(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: помилка
    вернути пусто;
  }

  місцева дія обʼєкт_словника_менше(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: помилка
    вернути пусто;
  }

  місцева дія обʼєкт_словника_рівно(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: помилка
    вернути пусто;
  }

  місцева дія обʼєкт_словника_містить(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль елемент = отримати_з_реєстру2<адреса<Обʼєкт>, адреса<Обʼєкт>>(обʼєкт_словника.елементи::адреса, аргумент);
    якщо елемент == пусто {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_є(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: помилка
    вернути пусто;
  }

  місцева дія обʼєкт_словника_відʼємне(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
  }

  місцева дія обʼєкт_словника_додатнє(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
  }

  місцева дія обʼєкт_словника_заперечити(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
  }
}