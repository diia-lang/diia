////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  дія нативна_дія_словника_чародія_отримати_елемент(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію словника \"чародія_отримати_елемент\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_словник {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію словника \"чародія_отримати_елемент\" можна виконувати лише від словника") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_словника = обʼєкт_я як адреса<ОбʼєктСловника>;
    змінна ціль знайдено_обʼєкт_аргумента_ключа = ні;
    змінна ціль обʼєкт_аргумента_ключа: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_ключа = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.ключ);
      якщо елемент_ключа != пусто {
        знайдено_обʼєкт_аргумента_ключа = так;
        обʼєкт_аргумента_ключа = елемент_ключа.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента_ключа == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента_ключа = так;
          обʼєкт_аргумента_ключа = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента_ключа == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"ключ\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_словника_отримати_елемент(обʼєкт_словника, М, обʼєкт_аргумента_ключа);
  }

  дія нативна_дія_словника_чародія_змінити_елемент(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію словника \"чародія_змінити_елемент\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_словник {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію словника \"чародія_змінити_елемент\" можна виконувати лише від словника") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_словника = обʼєкт_я як адреса<ОбʼєктСловника>;
    змінна ціль знайдено_обʼєкт_аргумента_ключа = ні;
    змінна ціль обʼєкт_аргумента_ключа: адреса<Обʼєкт> = пусто;
    змінна ціль знайдено_обʼєкт_аргумента_значення = ні;
    змінна ціль обʼєкт_аргумента_значення: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_ключа = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.ключ);
      якщо елемент_ключа != пусто {
        знайдено_обʼєкт_аргумента_ключа = так;
        обʼєкт_аргумента_ключа = елемент_ключа.значення;
      }
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента_значення = так;
        обʼєкт_аргумента_значення = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента_ключа == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента_ключа = так;
          обʼєкт_аргумента_ключа = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента_значення == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 1 {
          знайдено_обʼєкт_аргумента_значення = так;
          обʼєкт_аргумента_значення = аргументи.дані[1];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента_ключа == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"ключ\"") як адреса<Обʼєкт>;
    }
    якщо знайдено_обʼєкт_аргумента_значення == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_словника_змінити_елемент(обʼєкт_словника, М, обʼєкт_аргумента_ключа, обʼєкт_аргумента_значення);
  }

  дія нативна_дія_словника_чародія_видалити_елемент(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію словника \"чародія_видалити_елемент\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_словник {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію словника \"чародія_видалити_елемент\" можна виконувати лише від словника") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_словника = обʼєкт_я як адреса<ОбʼєктСловника>;
    змінна ціль знайдено_обʼєкт_аргумента_ключа = ні;
    змінна ціль обʼєкт_аргумента_ключа: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_ключа = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.ключ);
      якщо елемент_ключа != пусто {
        знайдено_обʼєкт_аргумента_ключа = так;
        обʼєкт_аргумента_ключа = елемент_ключа.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента_ключа == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента_ключа = так;
          обʼєкт_аргумента_ключа = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента_ключа == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"ключ\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_словника_видалити_елемент(обʼєкт_словника, М, обʼєкт_аргумента_ключа);
  }

  дія нативна_дія_словника_чародія_перебір(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_словника = обʼєкт_я як адреса<ОбʼєктСловника>;
    вернути обʼєкт_словника_отримати_перебір(обʼєкт_словника, М);
  }

  дія нативна_дія_словника_чародія_містить(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію словника \"чародія_містить\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_словник {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію словника \"чародія_містить\" можна виконувати лише від словника") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_словника = обʼєкт_я як адреса<ОбʼєктСловника>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_словника_містить(обʼєкт_словника, М, обʼєкт_аргумента);
  }

  дія нативна_дія_словника_ключі(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Дію словника \"ключі\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_словник {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Дію словника \"ключі\" можна виконувати лише від словника") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_словника = обʼєкт_я як адреса<ОбʼєктСловника>;
    ціль обʼєкт_списку_визначень = виділити_обʼєкт_списку(М, 0);
    змінна ціль п: позитивне = 0;
    поки п < обʼєкт_словника.елементи.розмір {
      покласти_в_накопичувач<адреса<Обʼєкт>>(обʼєкт_списку_визначень.елементи::адреса, обʼєкт_словника.елементи.елементи[п].ключ);
      п += 1;
    }
    вернути обʼєкт_списку_визначень як адреса<Обʼєкт>;
  }

  дія нативна_дія_словника_значення(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Дію словника \"значення\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_словник {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Дію словника \"значення\" можна виконувати лише від словника") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_словника = обʼєкт_я як адреса<ОбʼєктСловника>;
    ціль обʼєкт_списку_визначень = виділити_обʼєкт_списку(М, 0);
    змінна ціль п: позитивне = 0;
    поки п < обʼєкт_словника.елементи.розмір {
      покласти_в_накопичувач<адреса<Обʼєкт>>(обʼєкт_списку_визначень.елементи::адреса, обʼєкт_словника.елементи.елементи[п].значення);
      п += 1;
    }
    вернути обʼєкт_списку_визначень як адреса<Обʼєкт>;
  }

  місцева дія створити_структуру_словника(М: адреса<Машина>): адреса<ОбʼєктСтруктури> {
    ціль обʼєкт_структури = виділити_обʼєкт_структури(М, М.БН.С.словник, М.обʼєкт_структури_обʼєкт);

    ціль обʼєкт_нативної_дії_словника_чародія_отримати_елемент = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_отримати_елемент, нативна_дія_словника_чародія_отримати_елемент, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_отримати_елемент, обʼєкт_нативної_дії_словника_чародія_отримати_елемент як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_словника_чародія_змінити_елемент = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_змінити_елемент, нативна_дія_словника_чародія_змінити_елемент, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_змінити_елемент, обʼєкт_нативної_дії_словника_чародія_змінити_елемент як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_словника_чародія_видалити_елемент = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_видалити_елемент, нативна_дія_словника_чародія_видалити_елемент, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_видалити_елемент, обʼєкт_нативної_дії_словника_чародія_видалити_елемент як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_словника_чародія_перебір = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_перебір, нативна_дія_словника_чародія_перебір, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_перебір, обʼєкт_нативної_дії_словника_чародія_перебір як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_словника_чародія_містить = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_містить, нативна_дія_словника_чародія_містить, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_містить, обʼєкт_нативної_дії_словника_чародія_містить як адреса<Обʼєкт>);

    ціль обʼєкт_нативної_дії_словника_ключі = виділити_обʼєкт_нативної_дії(М, М.БН.С.ключі, нативна_дія_словника_ключі, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.ключі, обʼєкт_нативної_дії_словника_ключі як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_словника_значення = виділити_обʼєкт_нативної_дії(М, М.БН.С.значення, нативна_дія_словника_значення, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.значення, обʼєкт_нативної_дії_словника_значення як адреса<Обʼєкт>);

    вернути обʼєкт_структури;
  }

  місцева дія виділити_обʼєкт_словника(М: адреса<Машина>, розмір: п32): адреса<ОбʼєктСловника> {
    ціль обʼєкт_словника = виділити_обʼєкт<ОбʼєктСловника>(М, М.обʼєкт_структури_словник);

    обʼєкт_словника.властивості = зробити_реєстр<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні);
    обʼєкт_словника.елементи = зробити_реєстр2<адреса<Обʼєкт>, адреса<Обʼєкт>>(перевірити_чи_обʼєкти_рівні, М);

    вернути обʼєкт_словника;
  }

  місцева дія звільнити_обʼєкт_словника(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>) {
    звільнити_значення_реєстру<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_словника.властивості);
    звільнити_значення_реєстру2<адреса<Обʼєкт>, адреса<Обʼєкт>>(обʼєкт_словника.елементи);
    звільнити(обʼєкт_словника);
  }

  місцева дія обʼєкт_словника_виконати(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати словник") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_отримати_властивість(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    якщо назва == М.БН.С.розмір {
      вернути виділити_обʼєкт_числа(М, д64(обʼєкт_словника.елементи.розмір)) як адреса<Обʼєкт>;
    }
    ціль елемент_реєстру = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_словника.властивості::адреса, назва);
    якщо елемент_реєстру != пусто {
      вернути елемент_реєстру.значення;
    }
    змінна ціль тип = обʼєкт_словника.тип;
    поки тип != пусто {
      ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(тип.методи::адреса, назва);
      якщо елемент_реєстру_методів != пусто {
        вернути елемент_реєстру_методів.значення;
      }
      тип = тип.предок;
    }
    вернути пусто;
  }

  місцева дія обʼєкт_словника_видалити_властивість(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_змінити_властивість(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо назва == М.БН.С.розмір {
      вернути пусто;
    }
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_словника.властивості::адреса, назва, аргумент);
    вернути пусто;
  }

  місцева дія обʼєкт_словника_виконати_властивість(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_властивості = обʼєкт_словника_отримати_властивість(обʼєкт_словника, М, назва_властивості);
    якщо М.стан_падіння {
      вернути обʼєкт_властивості;
    }
    вернути обʼєкт_виконати(обʼєкт_властивості, М, обʼєкт_словника як адреса<Обʼєкт>, аргументи, іменовані_аргументи);
  }

  місцева дія обʼєкт_словника_отримати_елемент(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль елемент = отримати_з_реєстру2<адреса<Обʼєкт>, адреса<Обʼєкт>>(обʼєкт_словника.елементи::адреса, ключ);
    якщо елемент == пусто {
      вернути пусто;
    }
    вернути елемент.значення;
 }

  місцева дія обʼєкт_словника_змінити_елемент(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    змінити_в_реєстрі2<адреса<Обʼєкт>, адреса<Обʼєкт>>(обʼєкт_словника.елементи::адреса, ключ, значення);
    вернути пусто;
  }

  місцева дія обʼєкт_словника_видалити_елемент(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо видалити_з_реєстру2<адреса<Обʼєкт>, адреса<Обʼєкт>>(обʼєкт_словника.елементи::адреса, ключ) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    } інакше {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
 }

  місцева дія обʼєкт_словника_отримати_перебір(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    // потім: втілити
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо отримати перебір зі словника") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_додати(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати додавання для словника") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_відняти(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати віднімання для словника") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_помножити(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати множення для словника") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_поділити(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати ділення для словника") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_отримати_остачу_ділення(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати отримання остачі ділення для словника") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_отримати_частку_ділення(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати отримання часки ділення для словника") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_піднести_до_степеня(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати піднесення до степеня для словника") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_зсунути_вліво(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вліво для словника") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_зсунути_вправо(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо для словника") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_зсунути_вправо_зі_заповненням(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо зі заповненням для словника") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_двійкове_і(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове І для словника") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_двійкове_або(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове АБО для словника") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_двійкове_виключне_або(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове ВИКЛЮЧНЕ АБО для словника") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_двійкове_не(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове НЕ для словника") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_більше(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на більшість для словника") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_менше(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на меншість для словника") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_рівно(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо перевірити_чи_обʼєкт_словника_рівно(обʼєкт_словника, М, аргумент) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_містить(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    ціль елемент = отримати_з_реєстру2<адреса<Обʼєкт>, адреса<Обʼєкт>>(обʼєкт_словника.елементи::адреса, аргумент);
    якщо елемент == пусто {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_є(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_Структура {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо перевірити_чи_обʼєкт_словника_є(обʼєкт_словника, М, аргумент як адреса<ОбʼєктСтруктури>) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_відʼємне(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати відʼємне для словника") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_числове(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати числове для словника") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_заперечити(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_збільшити(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати збільшення для словника") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_словника_зменшити(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зменшення для словника") як адреса<Обʼєкт>;
  }

  місцева дія перевірити_чи_обʼєкт_словника_рівно(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне {
    ціль обʼєкт = обʼєкт_словника як адреса<Обʼєкт>;
    якщо обʼєкт == аргумент {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_обʼєкт_словника_є(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне {
    якщо обʼєкт_структури == М.обʼєкт_структури_словник {
      вернути так;
    }
    вернути ні;
  }

  місцева дія надрукувати_обʼєкт_словника_в_накопичувач_ю8(обʼєкт_словника: адреса<ОбʼєктСловника>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"<словник>");
  }
}