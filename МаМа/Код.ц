////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  місцева дія виділити_код(шлях_до_файлу: Ю8): адреса<Код> {
    ціль код = виділити<Код>();
    код.шлях_до_файлу = виділити_копію_ю8(шлях_до_файлу);
    код.накопичувач_вказівок = зробити_накопичувач32<п32>();
    код.накопичувач_місцезнаходжень_вказівок = зробити_накопичувач32<МісцезнаходженняВказівки>();
    вернути код;
  }

  місцева дія додати_вказівку_до_коду(код: адреса<Код>, рядок: п32, вказівка: п32): п32 {
    покласти_в_накопичувач32<п32>(код.накопичувач_вказівок::адреса, вказівка);
    покласти_в_накопичувач32<МісцезнаходженняВказівки>(код.накопичувач_місцезнаходжень_вказівок::адреса, МісцезнаходженняВказівки {
      позиція_вказівки = код.накопичувач_вказівок.розмір - 1,
      рядок = рядок
    });
    вернути код.накопичувач_вказівок.розмір;
  }

  місцева дія додати_вказівку_до_коду_з_аргументом_п32(код: адреса<Код>, рядок: п32, вказівка: п32, аргумент: п32): п32 {
    покласти_в_накопичувач32<п32>(код.накопичувач_вказівок::адреса, вказівка);
    покласти_в_накопичувач32<п32>(код.накопичувач_вказівок::адреса, аргумент);
    покласти_в_накопичувач32<МісцезнаходженняВказівки>(код.накопичувач_місцезнаходжень_вказівок::адреса, МісцезнаходженняВказівки {
      позиція_вказівки = код.накопичувач_вказівок.розмір - 1 - 1,
      рядок = рядок
    });
    вернути код.накопичувач_вказівок.розмір - 1 - 1;
  }

  місцева дія додати_вказівку_до_коду_з_двома_аргументами_п32(код: адреса<Код>, рядок: п32, вказівка: п32, аргумент1: п32, аргумент2: п32): п32 {
    покласти_в_накопичувач32<п32>(код.накопичувач_вказівок::адреса, вказівка);
    покласти_в_накопичувач32<п32>(код.накопичувач_вказівок::адреса, аргумент1);
    покласти_в_накопичувач32<п32>(код.накопичувач_вказівок::адреса, аргумент2);
    покласти_в_накопичувач32<МісцезнаходженняВказівки>(код.накопичувач_місцезнаходжень_вказівок::адреса, МісцезнаходженняВказівки {
      позиція_вказівки = код.накопичувач_вказівок.розмір - 1 - 1 - 1,
      рядок = рядок
    });
    вернути код.накопичувач_вказівок.розмір - 1 - 1 - 1;
  }

  місцева дія покласти_вказівку_ПокластиПусто(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВПокластиПусто);
  }

  місцева дія покласти_вказівку_ПокластиТак(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВПокластиТак);
  }

  місцева дія покласти_вказівку_ПокластиНі(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВПокластиНі);
  }

  місцева дія покласти_вказівку_ПокластиКонстанту(код: адреса<Код>, рядок: п32, позиція_константи: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, ВПокластиКонстанту, позиція_константи);
  }

  місцева дія покласти_вказівку_СтворитиДію(код: адреса<Код>, рядок: п32, позиція_назви: п32, позиція_коду: п32): п32 {
    вернути додати_вказівку_до_коду_з_двома_аргументами_п32(код, рядок, ВСтворитиДію, позиція_назви, позиція_коду);
  }

  місцева дія покласти_вказівку_СтворитиСтруктуру(код: адреса<Код>, рядок: п32, позиція_назви: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, ВСтворитиСтруктуру, позиція_назви);
  }

  місцева дія покласти_вказівку_СтворитиМодуль(код: адреса<Код>, рядок: п32, позиція_назви: п32, позиція_коду: п32): п32 {
    вернути додати_вказівку_до_коду_з_двома_аргументами_п32(код, рядок, ВСтворитиМодуль, позиція_назви, позиція_коду);
  }

  місцева дія покласти_вказівку_СтворитиСписок(код: адреса<Код>, рядок: п32, розмір: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, ВСтворитиСписок, розмір);
  }

  місцева дія покласти_вказівку_ПокластиВСписок(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВПокластиВСписок);
  }

  місцева дія покласти_вказівку_СтворитиСловник(код: адреса<Код>, рядок: п32, розмір: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, ВСтворитиСловник, розмір);
  }

  місцева дія покласти_вказівку_ПокластиВСловник(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВПокластиВСловник);
  }

  місцева дія покласти_вказівку_ПокластиСтруктуруОбʼєкт(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВПокластиСтруктуруОбʼєкт);
  }

  місцева дія покласти_вказівку_ПокластиЯ(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВПокластиЯ);
  }

  місцева дія покласти_вказівку_Визначити(код: адреса<Код>, рядок: п32, позиція_назви: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, ВВизначити, позиція_назви);
  }

  місцева дія покласти_вказівку_Звернутись(код: адреса<Код>, рядок: п32, позиція_назви: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, ВЗвернутись, позиція_назви);
  }

  місцева дія покласти_вказівку_Виконати(код: адреса<Код>, рядок: п32, кількість_аргументів: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, ВВиконати, кількість_аргументів);
  }

  місцева дія покласти_вказівку_ВиконатиЗНазвами(код: адреса<Код>, рядок: п32, кількість_аргументів: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, ВВиконатиЗНазвами, кількість_аргументів);
  }

  місцева дія покласти_вказівку_ОтриматиВластивість(код: адреса<Код>, рядок: п32, позиція_назви: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, ВОтриматиВластивість, позиція_назви);
  }

  місцева дія покласти_вказівку_ЗмінитиВластивість(код: адреса<Код>, рядок: п32, позиція_назви: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, ВЗмінитиВластивість, позиція_назви);
  }

  місцева дія покласти_вказівку_ВиконатиВластивість(код: адреса<Код>, рядок: п32, позиція_назви: п32, кількість_аргументів: п32): п32 {
    вернути додати_вказівку_до_коду_з_двома_аргументами_п32(код, рядок, ВВиконатиВластивість, позиція_назви, кількість_аргументів);
  }

  місцева дія покласти_вказівку_ВиконатиВластивістьЗНазвами(код: адреса<Код>, рядок: п32, позиція_назви: п32, кількість_аргументів: п32): п32 {
    вернути додати_вказівку_до_коду_з_двома_аргументами_п32(код, рядок, ВВиконатиВластивістьЗНазвами, позиція_назви, кількість_аргументів);
  }

  місцева дія покласти_вказівку_ОтриматиЕлемент(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВОтриматиЕлемент);
  }

  місцева дія покласти_вказівку_ЗмінитиЕлемент(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВЗмінитиЕлемент);
  }

  місцева дія покласти_вказівку_ОтриматиПеребір(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВОтриматиПеребір);
  }

  місцева дія покласти_вказівку_Додати(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВДодати);
  }

  місцева дія покласти_вказівку_Відняти(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВВідняти);
  }

  місцева дія покласти_вказівку_Помножити(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВПомножити);
  }

  місцева дія покласти_вказівку_Поділити(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВПоділити);
  }

  місцева дія покласти_вказівку_ОтриматиОстачуДілення(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВОтриматиОстачуДілення);
  }

  місцева дія покласти_вказівку_ОтриматиЧасткуДілення(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВОтриматиЧасткуДілення);
  }

  місцева дія покласти_вказівку_ПіднестиДоСтепеня(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВПіднестиДоСтепеня);
  }

  місцева дія покласти_вказівку_ЗсунутиВліво(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВЗсунутиВліво);
  }

  місцева дія покласти_вказівку_ЗсунутиВправо(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВЗсунутиВправо);
  }

  місцева дія покласти_вказівку_ЗсунутиВправоЗіЗаповненням(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВЗсунутиВправоЗіЗаповненням);
  }

  місцева дія покласти_вказівку_ДвійковеІ(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВДвійковеІ);
  }

  місцева дія покласти_вказівку_ДвійковеАБО(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВДвійковеАБО);
  }

  місцева дія покласти_вказівку_ДвійковеВиключнеАБО(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВДвійковеВиключнеАБО);
  }

  місцева дія покласти_вказівку_ДвійковеНЕ(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВДвійковеНЕ);
  }

  місцева дія покласти_вказівку_Менше(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВМенше);
  }

  місцева дія покласти_вказівку_Більше(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВБільше);
  }

  місцева дія покласти_вказівку_НеБільше(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВНеБільше);
  }

  місцева дія покласти_вказівку_НеМенше(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВНеМенше);
  }

  місцева дія покласти_вказівку_Рівно(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВРівно);
  }

  місцева дія покласти_вказівку_НеРівно(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВНеРівно);
  }

  місцева дія покласти_вказівку_Містить(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВМістить);
  }

  місцева дія покласти_вказівку_НеМістить(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВНеМістить);
  }

  місцева дія покласти_вказівку_Є(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВЄ);
  }

  місцева дія покласти_вказівку_НеЄ(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВНеЄ);
  }

  місцева дія покласти_вказівку_Відʼємне(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВВідʼємне);
  }

  місцева дія покласти_вказівку_Додатнє(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВДодатнє);
  }

  місцева дія покласти_вказівку_Заперечити(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВЗаперечити);
  }

  місцева дія покласти_вказівку_ПочатиСпробу(код: адреса<Код>, рядок: п32, позиція_вказівки_зловити: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, ВПочатиСпробу, позиція_вказівки_зловити);
  }

  місцева дія покласти_вказівку_Впасти(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВВпасти);
  }

  місцева дія покласти_вказівку_ЗакінчитиСпробу(код: адреса<Код>, рядок: п32, позиція_вказівки_виходу: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, ВЗакінчитиСпробу, позиція_вказівки_виходу);
  }

  місцева дія покласти_вказівку_Взяти(код: адреса<Код>, рядок: п32, позиція_назви: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, ВВзяти, позиція_назви);
  }

  місцева дія покласти_вказівку_Дати(код: адреса<Код>, рядок: п32, позиція_назви: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, ВДати, позиція_назви);
  }

  місцева дія покласти_вказівку_ПокластиРеєстрАргументівЗНазвами(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВПокластиРеєстрАргументівЗНазвами);
  }

  місцева дія покласти_вказівку_ЗареєструватиАргументЗНазвою(код: адреса<Код>, рядок: п32, позиція_назви: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, ВЗареєструватиАргументЗНазвою, позиція_назви);
  }

  місцева дія покласти_вказівку_ПокластиРеєстрПараметрів(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВПокластиРеєстрПараметрів);
  }

  місцева дія покласти_вказівку_ЗареєструватиПараметр(код: адреса<Код>, рядок: п32, позиція_назви: п32, кількість_типів: п32): п32 {
    вернути додати_вказівку_до_коду_з_двома_аргументами_п32(код, рядок, ВЗареєструватиПараметр, позиція_назви, кількість_типів);
  }

  місцева дія покласти_вказівку_ТриматиКод(код: адреса<Код>, рядок: п32, позиція_коду: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, ВТриматиКод, позиція_коду);
  }

  місцева дія покласти_вказівку_НакопичитиНазву(код: адреса<Код>, рядок: п32, позиція_назви: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, ВНакопичитиНазву, позиція_назви);
  }

  місцева дія покласти_вказівку_Стрибнути(код: адреса<Код>, рядок: п32, позиція_вказівки: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, ВСтрибнути, позиція_вказівки);
  }

  місцева дія покласти_вказівку_СтрибнутиЯкщоНі(код: адреса<Код>, рядок: п32, позиція_вказівки: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, ВСтрибнутиЯкщоНі, позиція_вказівки);
  }

  місцева дія покласти_вказівку_Забрати(код: адреса<Код>, рядок: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, ВЗабрати);
  }

  місцева дія надрукувати_код(код: адреса<Код>) {
    змінна ціль п: п32;
    надрукувати_ю8(ю8"Вказівки:");
    п = 0;
    поки п < код.накопичувач_вказівок.розмір {
      вивести_ю8(ю8" ");
      ціль вказівка = код.накопичувач_вказівок.дані[п];
      якщо вказівка == ВПокластиПусто {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ПокластиПусто");
      } інакше якщо вказівка == ВПокластиТак {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ПокластиТак");
      } інакше якщо вказівка == ВПокластиНі {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ПокластиНі");
      } інакше якщо вказівка == ВПокластиКонстанту {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ПокластиКонстанту");
        п += 1;
      } інакше якщо вказівка == ВСтворитиДію {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" СтворитиДію");
        п += 1;
        п += 1;
      } інакше якщо вказівка == ВСтворитиСтруктуру {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" СтворитиСтруктуру");
        п += 1;
      } інакше якщо вказівка == ВСтворитиМодуль {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" СтворитиМодуль");
        п += 1;
        п += 1;
      } інакше якщо вказівка == ВСтворитиСписок {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" СтворитиСписок");
        п += 1;
      } інакше якщо вказівка == ВПокластиВСписок {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ПокластиВСписок");
      } інакше якщо вказівка == ВСтворитиСловник {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" СтворитиСловник");
        п += 1;
      } інакше якщо вказівка == ВПокластиВСловник {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ПокластиВСловник");
      } інакше якщо вказівка == ВПокластиСтруктуруОбʼєкт {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ПокластиСтруктуруОбʼєкт");
      } інакше якщо вказівка == ВПокластиЯ {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ПокластиЯ");
      } інакше якщо вказівка == ВВизначити {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" Визначити");
        п += 1;
      } інакше якщо вказівка == ВЗвернутись {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" Звернутись");
        п += 1;
      } інакше якщо вказівка == ВВиконати {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" Виконати");
        п += 1;
      } інакше якщо вказівка == ВВиконатиЗНазвами {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ВиконатиЗНазвами");
        п += 1;
      } інакше якщо вказівка == ВОтриматиВластивість {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ОтриматиВластивість");
        п += 1;
      } інакше якщо вказівка == ВЗмінитиВластивість {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ЗмінитиВластивість");
        п += 1;
      } інакше якщо вказівка == ВВиконатиВластивість {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ВиконатиВластивість");
        п += 1;
        п += 1;
      } інакше якщо вказівка == ВВиконатиВластивістьЗНазвами {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ВиконатиВластивістьЗНазвами");
        п += 1;
        п += 1;
      } інакше якщо вказівка == ВОтриматиЕлемент {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ОтриматиЕлемент");
      } інакше якщо вказівка == ВЗмінитиЕлемент {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ЗмінитиЕлемент");
      } інакше якщо вказівка == ВОтриматиПеребір {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ОтриматиПеребір");
      } інакше якщо вказівка == ВДодати {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" Додати");
      } інакше якщо вказівка == ВВідняти {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" Відняти");
      } інакше якщо вказівка == ВПомножити {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" Помножити");
      } інакше якщо вказівка == ВПоділити {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" Поділити");
      } інакше якщо вказівка == ВОтриматиОстачуДілення {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ОтриматиОстачуДілення");
      } інакше якщо вказівка == ВОтриматиЧасткуДілення {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ОтриматиЧасткуДілення");
      } інакше якщо вказівка == ВПіднестиДоСтепеня {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ПіднестиДоСтепеня");
      } інакше якщо вказівка == ВЗсунутиВліво {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ЗсунутиВліво");
      } інакше якщо вказівка == ВЗсунутиВправо {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ЗсунутиВправо");
      } інакше якщо вказівка == ВЗсунутиВправоЗіЗаповненням {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ЗсунутиВправоЗіЗаповненням");
      } інакше якщо вказівка == ВДвійковеІ {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ДвійковеІ");
      } інакше якщо вказівка == ВДвійковеАБО {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ДвійковеАБО");
      } інакше якщо вказівка == ВДвійковеВиключнеАБО {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ДвійковеВиключнеАБО");
      } інакше якщо вказівка == ВДвійковеНЕ {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ДвійковеНЕ");
      } інакше якщо вказівка == ВМенше {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" Менше");
      } інакше якщо вказівка == ВБільше {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" Більше");
      } інакше якщо вказівка == ВНеБільше {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" НеБільше");
      } інакше якщо вказівка == ВНеМенше {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" НеМенше");
      } інакше якщо вказівка == ВРівно {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" Рівно");
      } інакше якщо вказівка == ВНеРівно {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" НеРівно");
      } інакше якщо вказівка == ВМістить {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" Містить");
      } інакше якщо вказівка == ВНеМістить {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" НеМістить");
      } інакше якщо вказівка == ВЄ {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" Є");
      } інакше якщо вказівка == ВНеЄ {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" НеЄ");
      } інакше якщо вказівка == ВВідʼємне {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" Відʼємне");
      } інакше якщо вказівка == ВДодатнє {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" Додатнє");
      } інакше якщо вказівка == ВЗаперечити {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" Заперечити");
      } інакше якщо вказівка == ВПочатиСпробу {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ПочатиСпробу");
        п += 1;
      } інакше якщо вказівка == ВВпасти {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" Впасти");
      } інакше якщо вказівка == ВЗакінчитиСпробу {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ЗакінчитиСпробу");
        п += 1;
      } інакше якщо вказівка == ВВзяти {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" Взяти");
        п += 1;
      } інакше якщо вказівка == ВДати {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" Дати");
        п += 1;
      } інакше якщо вказівка == ВПокластиРеєстрАргументівЗНазвами {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ПокластиРеєстрАргументівЗНазвами");
      } інакше якщо вказівка == ВЗареєструватиАргументЗНазвою {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ЗареєструватиАргументЗНазвою");
        п += 1;
      } інакше якщо вказівка == ВПокластиРеєстрПараметрів {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ПокластиРеєстрПараметрів");
      } інакше якщо вказівка == ВЗареєструватиПараметр {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ЗареєструватиПараметр");
        п += 1;
        п += 1;
      } інакше якщо вказівка == ВТриматиКод {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" ТриматиКод");
        п += 1;
      } інакше якщо вказівка == ВНакопичитиНазву {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" НакопичитиНазву");
        п += 1;
      } інакше якщо вказівка == ВСтрибнути {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" Стрибнути");
        п += 1;
      } інакше якщо вказівка == ВСтрибнутиЯкщоНі {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" СтрибнутиЯкщоНі");
        п += 1;
      } інакше якщо вказівка == ВЗабрати {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8" Забрати");
      } інакше {
        вивести_п64(п як п64);
        вивести_ю8(ю8" Невідома вказівка ");
        надрукувати_п64(вказівка як п64);
      }
      п += 1;
    }
  }

  місцева дія знайти_місцезнаходження_вказівки(код: адреса<Код>, позиція_вказівки: п32): адреса<МісцезнаходженняВказівки> {
    змінна ціль позиція: п32 = 0;
    поки позиція < код.накопичувач_місцезнаходжень_вказівок.розмір {
      якщо код.накопичувач_місцезнаходжень_вказівок.дані[позиція].позиція_вказівки == позиція_вказівки {
        вернути код.накопичувач_місцезнаходжень_вказівок.дані[позиція]::адреса;
      }
      позиція = позиція + 1;
    }
    вернути пусто;
  }
}