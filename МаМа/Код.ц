////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  місцева дія виділити_код(шлях_до_файлу: Ю8): адреса<Код> {
    ціль код = виділити<Код>();
    код.шлях_до_файлу = виділити_копію_ю8(шлях_до_файлу);
    код.накопичувач_вказівок = зробити_накопичувач32<п32>();
    код.накопичувач_місцезнаходжень_вказівок = зробити_накопичувач32<МісцезнаходженняВказівки>();
    вернути код;
  }

  місцева дія додати_вказівку_до_коду(код: адреса<Код>, рядок: п32, стовпець: п32, вказівка: п32): п32 {
    покласти_в_накопичувач32<п32>(код.накопичувач_вказівок::адреса, вказівка);
    покласти_в_накопичувач32<МісцезнаходженняВказівки>(код.накопичувач_місцезнаходжень_вказівок::адреса, МісцезнаходженняВказівки {
      позиція_вказівки = код.накопичувач_вказівок.розмір - 1,
      рядок = рядок,
      стовпець = стовпець
    });
    вернути код.накопичувач_вказівок.розмір;
  }

  місцева дія додати_вказівку_до_коду_з_аргументом_п32(код: адреса<Код>, рядок: п32, стовпець: п32, вказівка: п32, аргумент: п32): п32 {
    покласти_в_накопичувач32<п32>(код.накопичувач_вказівок::адреса, вказівка);
    покласти_в_накопичувач32<п32>(код.накопичувач_вказівок::адреса, аргумент);
    покласти_в_накопичувач32<МісцезнаходженняВказівки>(код.накопичувач_місцезнаходжень_вказівок::адреса, МісцезнаходженняВказівки {
      позиція_вказівки = код.накопичувач_вказівок.розмір - 1 - 1,
      рядок = рядок,
      стовпець = стовпець
    });
    вернути код.накопичувач_вказівок.розмір - 1 - 1;
  }

  місцева дія додати_вказівку_до_коду_з_двома_аргументами_п32(код: адреса<Код>, рядок: п32, стовпець: п32, вказівка: п32, аргумент1: п32, аргумент2: п32): п32 {
    покласти_в_накопичувач32<п32>(код.накопичувач_вказівок::адреса, вказівка);
    покласти_в_накопичувач32<п32>(код.накопичувач_вказівок::адреса, аргумент1);
    покласти_в_накопичувач32<п32>(код.накопичувач_вказівок::адреса, аргумент2);
    покласти_в_накопичувач32<МісцезнаходженняВказівки>(код.накопичувач_місцезнаходжень_вказівок::адреса, МісцезнаходженняВказівки {
      позиція_вказівки = код.накопичувач_вказівок.розмір - 1 - 1 - 1,
      рядок = рядок,
      стовпець = стовпець
    });
    вернути код.накопичувач_вказівок.розмір - 1 - 1 - 1;
  }

  місцева дія покласти_вказівку_Визначити(код: адреса<Код>, рядок: п32, стовпець: п32, позиція_назви: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, стовпець, ВВизначити, позиція_назви);
  }

  місцева дія покласти_вказівку_Звернутись(код: адреса<Код>, рядок: п32, стовпець: п32, позиція_назви: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, стовпець, ВЗвернутись, позиція_назви);
  }

  місцева дія покласти_вказівку_Виконати(код: адреса<Код>, рядок: п32, стовпець: п32, кількість_аргументів: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, стовпець, ВВиконати, кількість_аргументів);
  }

  місцева дія покласти_вказівку_ВиконатиЗНазвами(код: адреса<Код>, рядок: п32, стовпець: п32, кількість_аргументів: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, стовпець, ВВиконатиЗНазвами, кількість_аргументів);
  }

  місцева дія покласти_вказівку_Додати(код: адреса<Код>, рядок: п32, стовпець: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, стовпець, ВДодати);
  }

  місцева дія покласти_вказівку_ПопроситиВластивість(код: адреса<Код>, рядок: п32, стовпець: п32, позиція_назви: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, стовпець, ВПопроситиВластивість, позиція_назви);
  }

  місцева дія покласти_вказівку_ПопроситиЗмінитиВластивість(код: адреса<Код>, рядок: п32, стовпець: п32, позиція_назви: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, стовпець, ВПопроситиЗмінитиВластивість, позиція_назви);
  }

  місцева дія покласти_вказівку_ПопроситиВиконати(код: адреса<Код>, рядок: п32, стовпець: п32, позиція_назви: п32, кількість_аргументів: п32): п32 {
    вернути додати_вказівку_до_коду_з_двома_аргументами_п32(код, рядок, стовпець, ВПопроситиВиконати, позиція_назви, кількість_аргументів);
  }

  місцева дія покласти_вказівку_ПопроситиВиконатиЗНазвами(код: адреса<Код>, рядок: п32, стовпець: п32, позиція_назви: п32, кількість_аргументів: п32): п32 {
    вернути додати_вказівку_до_коду_з_двома_аргументами_п32(код, рядок, стовпець, ВПопроситиВиконатиЗНазвами, позиція_назви, кількість_аргументів);
  }

  місцева дія покласти_вказівку_ПокластиПусто(код: адреса<Код>, рядок: п32, стовпець: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, стовпець, ВПокластиПусто);
  }

  місцева дія покласти_вказівку_СтворитиДію(код: адреса<Код>, рядок: п32, стовпець: п32, позиція_назви: п32, позиція_коду: п32): п32 {
    вернути додати_вказівку_до_коду_з_двома_аргументами_п32(код, рядок, стовпець, ВСтворитиДію, позиція_назви, позиція_коду);
  }

  місцева дія покласти_вказівку_СтворитиСтруктуру(код: адреса<Код>, рядок: п32, стовпець: п32, позиція_назви: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, стовпець, ВСтворитиСтруктуру, позиція_назви);
  }

  місцева дія покласти_вказівку_СтворитиСписок(код: адреса<Код>, рядок: п32, стовпець: п32, розмір: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, стовпець, ВСтворитиСписок, розмір);
  }

  місцева дія покласти_вказівку_СтворитиСловник(код: адреса<Код>, рядок: п32, стовпець: п32, розмір: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, стовпець, ВСтворитиСловник, розмір);
  }

  місцева дія покласти_вказівку_ПокластиРеєстрАргументівЗНазвами(код: адреса<Код>, рядок: п32, стовпець: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, стовпець, ВПокластиРеєстрАргументівЗНазвами);
  }

  місцева дія покласти_вказівку_ЗареєструватиАргументЗНазвою(код: адреса<Код>, рядок: п32, стовпець: п32, позиція_назви: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, стовпець, ВЗареєструватиАргументЗНазвою, позиція_назви);
  }

  місцева дія покласти_вказівку_ПокластиРеєстрПараметрів(код: адреса<Код>, рядок: п32, стовпець: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, стовпець, ВПокластиРеєстрПараметрів);
  }

  місцева дія покласти_вказівку_ТриматиКод(код: адреса<Код>, рядок: п32, стовпець: п32, позиція_коду: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, стовпець, ВТриматиКод, позиція_коду);
  }

  місцева дія покласти_вказівку_ЗареєструватиПараметр(код: адреса<Код>, рядок: п32, стовпець: п32, позиція_назви: п32, кількість_типів: п32): п32 {
    вернути додати_вказівку_до_коду_з_двома_аргументами_п32(код, рядок, стовпець, ВЗареєструватиПараметр, позиція_назви, кількість_типів);
  }

  місцева дія покласти_вказівку_ПочатиСпробу(код: адреса<Код>, рядок: п32, стовпець: п32, позиція_вказівки_зловити: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, стовпець, ВПочатиСпробу, позиція_вказівки_зловити);
  }

  місцева дія покласти_вказівку_ЗакінчитиСпробу(код: адреса<Код>, рядок: п32, стовпець: п32, позиція_вказівки_виходу: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, стовпець, ВЗакінчитиСпробу, позиція_вказівки_виходу);
  }

  місцева дія покласти_вказівку_Впасти(код: адреса<Код>, рядок: п32, стовпець: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, стовпець, ВВпасти);
  }

  місцева дія покласти_вказівку_Забрати(код: адреса<Код>, рядок: п32, стовпець: п32): п32 {
    вернути додати_вказівку_до_коду(код, рядок, стовпець, ВЗабрати);
  }

  місцева дія покласти_вказівку_Стрибнути(код: адреса<Код>, рядок: п32, стовпець: п32, позиція_вказівки: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, стовпець, ВСтрибнути, позиція_вказівки);
  }

  місцева дія покласти_вказівку_СтрибнутиЯкщоНі(код: адреса<Код>, рядок: п32, стовпець: п32, позиція_вказівки: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, стовпець, ВСтрибнутиЯкщоНі, позиція_вказівки);
  }

  місцева дія покласти_вказівку_ПокластиКонстанту(код: адреса<Код>, рядок: п32, стовпець: п32, позиція_константи: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, стовпець, ВПокластиКонстанту, позиція_константи);
  }

  місцева дія покласти_вказівку_НакопичитиНазву(код: адреса<Код>, рядок: п32, стовпець: п32, позиція_назви: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, стовпець, ВНакопичитиНазву, позиція_назви);
  }

  місцева дія покласти_вказівку_Взяти(код: адреса<Код>, рядок: п32, стовпець: п32, позиція_назви: п32): п32 {
    вернути додати_вказівку_до_коду_з_аргументом_п32(код, рядок, стовпець, ВВзяти, позиція_назви);
  }

  місцева дія надрукувати_код(код: адреса<Код>) {
    змінна ціль п: п32;
    надрукувати_ю8(ю8"Вказівки:");
    п = 0;
    поки п < код.накопичувач_вказівок.розмір {
      вивести_ю8(ю8" ");
      ціль вказівка = код.накопичувач_вказівок.дані[п];
      якщо вказівка == ВВизначити {
        вивести_п64(п як п64);
        вивести_ю8(ю8": ВВизначити ");
        ціль позиція_назви = код.накопичувач_вказівок.дані[п + 1];
        надрукувати_п64(позиція_назви як п64);
        п = п + 1;
      } інакше якщо вказівка == ВЗвернутись {
        вивести_п64(п як п64);
        вивести_ю8(ю8": ВЗвернутись ");
        ціль позиція_назви = код.накопичувач_вказівок.дані[п + 1];
        надрукувати_п64(позиція_назви як п64);
        п = п + 1;
      } інакше якщо вказівка == ВВиконати {
        вивести_п64(п як п64);
        вивести_ю8(ю8": ВВиконати ");
        ціль кількість_аргументів = код.накопичувач_вказівок.дані[п + 1];
        надрукувати_п64(кількість_аргументів як п64);
        п = п + 1;
      } інакше якщо вказівка == ВПопроситиВиконати {
        вивести_п64(п як п64);
        вивести_ю8(ю8": ВПопроситиВиконати ");
        ціль позиція_назви = код.накопичувач_вказівок.дані[п + 1];
        вивести_п64(позиція_назви як п64);
        п = п + 1;
        ціль кількість_аргументів = код.накопичувач_вказівок.дані[п + 1];
        вивести_ю8(ю8" ");
        надрукувати_п64(кількість_аргументів як п64);
        п = п + 1;
      } інакше якщо вказівка == ВВиконатиЗНазвами {
        вивести_п64(п як п64);
        вивести_ю8(ю8": ВВиконатиЗНазвами ");
        ціль кількість_аргументів = код.накопичувач_вказівок.дані[п + 1];
        надрукувати_п64(кількість_аргументів як п64);
        п = п + 1;
      } інакше якщо вказівка == ВПопроситиВиконатиЗНазвами {
        вивести_п64(п як п64);
        вивести_ю8(ю8": ВПопроситиВиконатиЗНазвами ");
        ціль позиція_назви = код.накопичувач_вказівок.дані[п + 1];
        вивести_п64(позиція_назви як п64);
        п = п + 1;
        ціль кількість_аргументів = код.накопичувач_вказівок.дані[п + 1];
        вивести_ю8(ю8" ");
        надрукувати_п64(кількість_аргументів як п64);
        п = п + 1;
      } інакше якщо вказівка == ВПопроситиВластивість {
        вивести_п64(п як п64);
        вивести_ю8(ю8": ВПопроситиВластивість ");
        ціль позиція_назви = код.накопичувач_вказівок.дані[п + 1];
        надрукувати_п64(позиція_назви як п64);
        п = п + 1;
      } інакше якщо вказівка == ВПопроситиЗмінитиВластивість {
        вивести_п64(п як п64);
        вивести_ю8(ю8": ВПопроситиЗмінитиВластивість ");
        ціль позиція_назви = код.накопичувач_вказівок.дані[п + 1];
        надрукувати_п64(позиція_назви як п64);
        п = п + 1;
      } інакше якщо вказівка == ВПокластиКонстанту {
        вивести_п64(п як п64);
        вивести_ю8(ю8": ВПокластиКонстанту ");
        ціль позиція_константи = код.накопичувач_вказівок.дані[п + 1];
        надрукувати_п64(позиція_константи як п64);
        п = п + 1;
      } інакше якщо вказівка == ВДодати {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8": ВДодати");
      } інакше якщо вказівка == ВПокластиРеєстрАргументівЗНазвами {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8": ВПокластиРеєстрАргументівЗНазвами ");
      } інакше якщо вказівка == ВЗареєструватиАргументЗНазвою {
        вивести_п64(п як п64);
        вивести_ю8(ю8": ВЗареєструватиАргументЗНазвою ");
        ціль позиція_назви = код.накопичувач_вказівок.дані[п + 1];
        надрукувати_п64(позиція_назви як п64);
        п = п + 1;
      } інакше якщо вказівка == ВПокластиРеєстрПараметрів {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8": ВПокластиРеєстрПараметрів ");
      } інакше якщо вказівка == ВПокластиПусто {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8": ВПокластиПусто ");
      } інакше якщо вказівка == ВЗареєструватиПараметр {
        вивести_п64(п як п64);
        вивести_ю8(ю8": ВЗареєструватиПараметр ");
        ціль позиція_назви = код.накопичувач_вказівок.дані[п + 1];
        вивести_п64(позиція_назви як п64);
        п = п + 1;
        ціль кількість_типів = код.накопичувач_вказівок.дані[п + 1];
        вивести_ю8(ю8" ");
        надрукувати_п64(кількість_типів як п64);
        п = п + 1;
      } інакше якщо вказівка == ВСтворитиСтруктуру {
        вивести_п64(п як п64);
        вивести_ю8(ю8": ВСтворитиСтруктуру ");
        ціль позиція_назви = код.накопичувач_вказівок.дані[п + 1];
        надрукувати_п64(позиція_назви як п64);
        п = п + 1;
      } інакше якщо вказівка == ВСтворитиДію {
        вивести_п64(п як п64);
        вивести_ю8(ю8": ВСтворитиДію ");
        ціль позиція_назви = код.накопичувач_вказівок.дані[п + 1];
        вивести_п64(позиція_назви як п64);
        п = п + 1;
        ціль позиція_підкоду = код.накопичувач_вказівок.дані[п + 1];
        вивести_ю8(ю8" ");
        надрукувати_п64(позиція_підкоду як п64);
        п = п + 1;
      } інакше якщо вказівка == ВТриматиКод {
        вивести_п64(п як п64);
        вивести_ю8(ю8": ВТриматиКод ");
        ціль позиція_підкоду = код.накопичувач_вказівок.дані[п + 1];
        надрукувати_п64(позиція_підкоду як п64);
        п = п + 1;
      } інакше якщо вказівка == ВПочатиСпробу {
        вивести_п64(п як п64);
        вивести_ю8(ю8": ВПочатиСпробу ");
        ціль позиція_вказівки_зловити = код.накопичувач_вказівок.дані[п + 1];
        надрукувати_п64(позиція_вказівки_зловити як п64);
        п = п + 1;
      } інакше якщо вказівка == ВЗакінчитиСпробу {
        вивести_п64(п як п64);
        вивести_ю8(ю8": ВЗакінчитиСпробу ");
        ціль позиція_вказівки_виходу = код.накопичувач_вказівок.дані[п + 1];
        надрукувати_п64(позиція_вказівки_виходу як п64);
        п = п + 1;
      } інакше якщо вказівка == ВСтрибнути {
        вивести_п64(п як п64);
        вивести_ю8(ю8": ВСтрибнути ");
        ціль позиція_вказівки = код.накопичувач_вказівок.дані[п + 1];
        надрукувати_п64(позиція_вказівки як п64);
        п = п + 1;
      } інакше якщо вказівка == ВСтрибнутиЯкщоНі {
        вивести_п64(п як п64);
        вивести_ю8(ю8": ВСтрибнутиЯкщоНі ");
        ціль позиція_вказівки = код.накопичувач_вказівок.дані[п + 1];
        надрукувати_п64(позиція_вказівки як п64);
        п = п + 1;
      } інакше якщо вказівка == ВЗабрати {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8": ВЗабрати ");
      } інакше якщо вказівка == ВВпасти {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8": ВВпасти ");
      } інакше якщо вказівка == ВНакопичитиНазву {
        вивести_п64(п як п64);
        вивести_ю8(ю8": ВНакопичитиНазву ");
        ціль позиція_назви = код.накопичувач_вказівок.дані[п + 1];
        надрукувати_п64(позиція_назви як п64);
        п = п + 1;
      } інакше якщо вказівка == ВВзяти {
        вивести_п64(п як п64);
        вивести_ю8(ю8": ВВзяти ");
        ціль позиція_назви = код.накопичувач_вказівок.дані[п + 1];
        надрукувати_п64(позиція_назви як п64);
        п = п + 1;
      } інакше {
        вивести_п64(п як п64);
        надрукувати_ю8(ю8": Невідома вказівка!");
      }
      п = п + 1;
    }
  }

  місцева дія знайти_місцезнаходження_вказівки(код: адреса<Код>, позиція_вказівки: п32): адреса<МісцезнаходженняВказівки> {
    змінна ціль позиція: п32 = 0;
    поки позиція < код.накопичувач_місцезнаходжень_вказівок.розмір {
      якщо код.накопичувач_місцезнаходжень_вказівок.дані[позиція].позиція_вказівки == позиція_вказівки {
        вернути код.накопичувач_місцезнаходжень_вказівок.дані[позиція]::адреса;
      }
      позиція = позиція + 1;
    }
    вернути пусто;
  }

  місцева дія виділити_назву(значення: Ю8): адреса<Назва> {
    ціль назва = виділити<Назва>();
    назва.значення = виділити_копію_ю8(значення);
    вернути назва;
  }

  місцева дія перевірити_чи_назви_рівні(назва1: адреса<Назва>, назва2: адреса<Назва>): логічне {
    вернути назва1 == назва2;
  }
}