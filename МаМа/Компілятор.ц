взяти визначення МаМа;

секція МаМа {
  місцева дія скомпілювати_елемент_значення(М: адреса<Машина>, контекст: адреса<КонтекстКомпіляції>, код: адреса<Код>, елемент: адреса<АСДЗначення>): адреса {
    якщо елемент.вид == АСДВидЗвернутись {
      ціль дані = елемент.дані як адреса<АСДДаніЗвернутись>;
      ціль назва = знайти_або_виділити_й_додати_назву(М.БН::адреса, дані.ідентифікатор.значення);
      ціль позиція_назви = додати_назву_до_коду(код, назва);
      додати_вказівку_до_коду_з_аргументом_п32(код, ВЗвернутись, позиція_назви);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидОтримати {
      ціль дані = елемент.дані як адреса<АСДДаніОтримати>;
      ціль помилка_компіляції_обʼєкта = скомпілювати_елемент_значення(М, контекст, код, дані.обʼєкт);
      якщо помилка_компіляції_обʼєкта != пусто {
        вернути помилка_компіляції_обʼєкта;
      }
      ціль назва = знайти_або_виділити_й_додати_назву(М.БН::адреса, дані.ідентифікатор.значення);
      ціль позиція_назви = додати_назву_до_коду(код, назва);
      додати_вказівку_до_коду_з_аргументом_п32(код, ВОтримати, позиція_назви);
    } інакше якщо елемент.вид == АСДВидОтриматиЗаПозицією {
      //
    } інакше якщо елемент.вид == АСДВидВиконати {
      ціль дані = елемент.дані як адреса<АСДДаніВиконати>;
      ціль помилка_компіляції_обʼєкта = скомпілювати_елемент_значення(М, контекст, код, дані.обʼєкт);
      якщо помилка_компіляції_обʼєкта != пусто {
        вернути помилка_компіляції_обʼєкта;
      }
      додати_вказівку_до_коду_з_аргументом_п32(код, ВПричепитиНакопичувачАргументів, дані.аргументи.довжина як п32);
      змінна ціль па: позитивне = 0;
      поки па < дані.аргументи.довжина {
        ціль аргумент = дані.аргументи.елементи[па];
        ціль помилка_компіляції_аргумента = скомпілювати_елемент_значення(М, контекст, код, аргумент);
        якщо помилка_компіляції_аргумента != пусто {
          вернути помилка_компіляції_аргумента;
        }
        додати_вказівку_до_коду(код, ВНакопичитиАргумент);
        па = па + 1;
      }
      додати_вказівку_до_коду(код, ВВиконати);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидДія {
      //
    } інакше якщо елемент.вид == АСДВидСтруктура {
      //
    } інакше якщо елемент.вид == АСДВидЧисло {
      ціль позиція_числа = додати_число_до_коду(код, 0.0);
      додати_вказівку_до_коду_з_аргументом_п32(код, ВПокластиЧисло, позиція_числа);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидТекст {
      ціль позиція_тексту = додати_текст_до_коду(код, пусто);
      додати_вказівку_до_коду_з_аргументом_п32(код, ВПокластиТекст, позиція_тексту);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидОперація {
      ціль дані = елемент.дані як адреса<АСДДаніОперація>;
      ціль помилка_компіляції_ліво = скомпілювати_елемент_значення(М, контекст, код, дані.ліво);
      якщо помилка_компіляції_ліво != пусто {
        вернути помилка_компіляції_ліво;
      }
      ціль помилка_компіляції_право = скомпілювати_елемент_значення(М, контекст, код, дані.право);
      якщо помилка_компіляції_право != пусто {
        вернути помилка_компіляції_право;
      }
      якщо дані.операція == АСДОпераціяДодавання {
        додати_вказівку_до_коду(код, ВДодати);
      } інакше {
        надрукувати_ю8(ю8"[Помилка Мавки] Невідома операція!");
        вернути пусто;
      }
    } інакше якщо елемент.вид == АСДВидЗначенняЯкщо {
      //
    } інакше якщо елемент.вид == АСДВидЯк {
      //
    } інакше якщо елемент.вид == АСДВидСамоОперація {
      //
    }
    надрукувати_ю8(ю8"[Помилка Мавки] Невідомий вид АСДЗначення!");
    вернути пусто;
  }

  місцева дія скомпілювати_тіло(М: адреса<Машина>, контекст: адреса<КонтекстКомпіляції>, код: адреса<Код>, тіло: адреса<СписокАСДЗначень>): адреса {
    змінна ціль пе: позитивне = 0;
    поки пе < тіло.довжина {
      ціль елемент = тіло.елементи[пе];
      якщо елемент.вид == АСДВидНіщо {
        надрукувати_ю8(ю8"[Помилка Мавки] Виявлено АСДВидНіщо!");
        вернути пусто;
      } інакше якщо елемент.вид == АСДВидВизначити {
        ціль дані = елемент.дані як адреса<АСДДаніВизначити>;
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, дані.значення);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        ціль назва = знайти_або_виділити_й_додати_назву(М.БН::адреса, дані.ідентифікатор.значення);
        ціль позиція_назви = додати_назву_до_коду(код, назва);
        додати_вказівку_до_коду_з_аргументом_п32(код, ВВизначити, позиція_назви);
      } інакше якщо елемент.вид == АСДВидЗвернутись {
        ціль дані = елемент.дані як адреса<АСДДаніЗвернутись>;
        ціль назва = знайти_або_виділити_й_додати_назву(М.БН::адреса, дані.ідентифікатор.значення);
        ціль позиція_назви = додати_назву_до_коду(код, назва);
        додати_вказівку_до_коду_з_аргументом_п32(код, ВЗвернутись, позиція_назви);
        вернути пусто;
      } інакше якщо елемент.вид == АСДВидОтримати {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
      } інакше якщо елемент.вид == АСДВидОтриматиЗаПозицією {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
      } інакше якщо елемент.вид == АСДВидЗмінити {
        ціль дані = елемент.дані як адреса<АСДДаніЗмінити>;
        ціль помилка_компіляції_обʼєкта = скомпілювати_елемент_значення(М, контекст, код, дані.обʼєкт);
        якщо помилка_компіляції_обʼєкта != пусто {
          вернути помилка_компіляції_обʼєкта;
        }
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, дані.значення);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        ціль назва = знайти_або_виділити_й_додати_назву(М.БН::адреса, дані.ідентифікатор.значення);
        ціль позиція_назви = додати_назву_до_коду(код, назва);
        додати_вказівку_до_коду_з_аргументом_п32(код, ВЗмінити, позиція_назви);
      } інакше якщо елемент.вид == АСДВидЗмінитиЗаПозицією {
        //
      } інакше якщо елемент.вид == АСДВидВиконати {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
      } інакше якщо елемент.вид == АСДВидДія {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
      } інакше якщо елемент.вид == АСДВидСтруктура {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
      } інакше якщо елемент.вид == АСДВидЧисло {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
      } інакше якщо елемент.вид == АСДВидТекст {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
      } інакше якщо елемент.вид == АСДВидОперація {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
      } інакше якщо елемент.вид == АСДВидЯкщо {
        //
      } інакше якщо елемент.вид == АСДВидПоки {
        //
      } інакше якщо елемент.вид == АСДВидВернути {
        //
      } інакше якщо елемент.вид == АСДВидЗначенняЯкщо {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
      } інакше якщо елемент.вид == АСДВидЯк {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
      } інакше якщо елемент.вид == АСДВидСамоОперація {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
      } інакше якщо елемент.вид == АСДВидВзяти {
        //
      } інакше {
        надрукувати_ю8(ю8"[Помилка Мавки] Невідомий вид АСДЗначення!");
        вернути пусто;
      }
      пе = пе + 1;
    }
    вернути пусто;
  }
}