взяти визначення МаМа;

секція МаМа {
  місцева дія виділити_помилку_компіляції(місцезнаходження: адреса<Місцезнаходження>, повідомлення: Ю8): адреса<ПомилкаКомпіляції> {
    ціль помилка_компіляції = виділити<ПомилкаКомпіляції>();
    помилка_компіляції.місцезнаходження = місцезнаходження;
    помилка_компіляції.повідомлення = виділити_копію_ю8(повідомлення);
    вернути помилка_компіляції;
  }

  місцева дія виділити_контекст_компіляції(): адреса<КонтекстКомпіляції> {
    ціль контекст_компіляції = виділити<КонтекстКомпіляції>();
    контекст_компіляції.код_дії = пусто;
    вернути контекст_компіляції;
  }

  місцева дія скомпілювати_елемент_значення(М: адреса<Машина>, контекст: адреса<КонтекстКомпіляції>, код: адреса<Код>, елемент: адреса<АСДЗначення>): адреса<ПомилкаКомпіляції> {
    якщо елемент.вид == АСДВидЗвернутись {
      ціль дані = елемент.дані як адреса<АСДДаніЗвернутись>;
      ціль позиція_назви = додати_назву(М.БН::адреса, дані.ідентифікатор.значення) як п32;
      додати_вказівку_до_коду_з_аргументом_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВЗвернутись, позиція_назви);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидОтримати {
      ціль дані = елемент.дані як адреса<АСДДаніОтримати>;
      ціль помилка_компіляції_обʼєкта = скомпілювати_елемент_значення(М, контекст, код, дані.обʼєкт);
      якщо помилка_компіляції_обʼєкта != пусто {
        вернути помилка_компіляції_обʼєкта;
      }
      ціль позиція_назви = додати_назву(М.БН::адреса, дані.ідентифікатор.значення) як п32;
      додати_вказівку_до_коду_з_аргументом_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВПопроситиВластивість, позиція_назви);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидОтриматиЗаПозицією {
      //
    } інакше якщо елемент.вид == АСДВидВиконати {
      ціль дані = елемент.дані як адреса<АСДДаніВиконати>;
      змінна ціль назва_прохання: адреса<Назва> = пусто;
      змінна ціль позиція_назви_прохання: п32 = 0;
      якщо дані.обʼєкт.вид == АСДВидОтримати {
        ціль дані_отримання = дані.обʼєкт.дані як адреса<АСДДаніОтримати>;
        ціль помилка_компіляції_обʼєкта = скомпілювати_елемент_значення(М, контекст, код, дані_отримання.обʼєкт);
        якщо помилка_компіляції_обʼєкта != пусто {
          вернути помилка_компіляції_обʼєкта;
        }
        назва_прохання = знайти_або_виділити_й_додати_назву(М.БН::адреса, дані_отримання.ідентифікатор.значення);
        позиція_назви_прохання = додати_назву(М.БН::адреса, дані_отримання.ідентифікатор.значення) як п32;
      } інакше {
        ціль помилка_компіляції_обʼєкта = скомпілювати_елемент_значення(М, контекст, код, дані.обʼєкт);
        якщо помилка_компіляції_обʼєкта != пусто {
          вернути помилка_компіляції_обʼєкта;
        }
      }
      змінна ціль па: позитивне = 0;
      змінна ціль кількість_аргументів_без_назви: п32 = 0;
      змінна ціль вже_був_аргумент_з_назвою = ні;
      поки па < дані.кількість_аргументів {
        ціль аргумент = дані.аргументи[па];
        якщо аргумент.ідентифікатор == пусто {
          якщо вже_був_аргумент_з_назвою {
            вернути виділити_помилку_компіляції(елемент.місцезнаходження, ю8"Позиційні аргументи не можна ставити після іменованих");
          }
          кількість_аргументів_без_назви = кількість_аргументів_без_назви + 1;
        } інакше {
          вже_був_аргумент_з_назвою = так;
        }
        па = па + 1;
      }
      змінна ціль має_аргументи_з_назвами = вже_був_аргумент_з_назвою;
      якщо має_аргументи_з_назвами {
        додати_вказівку_до_коду(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВПокластиРеєстрАргументівЗНазвами);
      }
      па = 0;
      поки па < дані.кількість_аргументів {
        ціль аргумент = дані.аргументи[па];
        ціль помилка_компіляції_аргумента = скомпілювати_елемент_значення(М, контекст, код, аргумент.значення);
        якщо помилка_компіляції_аргумента != пусто {
          вернути помилка_компіляції_аргумента;
        }
        якщо аргумент.ідентифікатор != пусто {
          ціль позиція_назви = додати_назву(М.БН::адреса, аргумент.ідентифікатор.значення) як п32;
          додати_вказівку_до_коду_з_аргументом_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВЗареєструватиАргументЗНазвою, позиція_назви);
        }
        па = па + 1;
      }
      якщо має_аргументи_з_назвами {
        якщо назва_прохання == пусто {
          додати_вказівку_до_коду_з_аргументом_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВВиконатиЗНазвами, кількість_аргументів_без_назви);
        } інакше {
          додати_вказівку_до_коду_з_двома_аргументами_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВПопроситиВиконатиЗНазвами, позиція_назви_прохання, кількість_аргументів_без_назви);
        }
      } інакше {
        якщо назва_прохання == пусто {
         додати_вказівку_до_коду_з_аргументом_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВВиконати, кількість_аргументів_без_назви);
        } інакше {
          додати_вказівку_до_коду_з_двома_аргументами_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВПопроситиВиконати, позиція_назви_прохання, кількість_аргументів_без_назви);
        }
      }
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидДія {
      ціль дані = елемент.дані як адреса<АСДДаніДія>;
      ціль позиція_назви = додати_назву(М.БН::адреса, дані.ідентифікатор.значення) як п32;
      додати_вказівку_до_коду(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВПокластиРеєстрПараметрів);
      змінна ціль па: позитивне = 0;
      поки па < дані.кількість_параметрів {
        ціль параметр = дані.параметри[па];
        ціль позиція_назви_параметра = додати_назву(М.БН::адреса, параметр.ідентифікатор.значення) як п32;
        змінна ціль птп: позитивне = 0;
        поки птп < параметр.кількість_типів {
          ціль тип = параметр.типи[птп];
          ціль помилка_компіляції_типу = скомпілювати_елемент_значення(М, контекст, код, тип);
          якщо помилка_компіляції_типу != пусто {
            вернути помилка_компіляції_типу;
          }
          птп = птп + 1;
        }
        якщо параметр.значення != пусто {
          ціль код_значення_параметра = виділити_код(код.шлях_до_файлу);
          ціль контекст_значення_параметра = виділити_контекст_компіляції();
          ціль помилка_компіляції_значення_параметра = скомпілювати_елемент_значення(М, контекст_значення_параметра, код_значення_параметра, параметр.значення);
          якщо помилка_компіляції_значення_параметра != пусто {
            вернути помилка_компіляції_значення_параметра;
          }
          ціль позиція_підкоду = додати_підкод_до_коду(код, код_значення_параметра);
          додати_вказівку_до_коду_з_аргументом_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВТриматиКод, позиція_підкоду);
        }
        додати_вказівку_до_коду_з_двома_аргументами_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВЗареєструватиПараметр, позиція_назви_параметра, параметр.кількість_типів як п32);
        па = па + 1;
      }
      ціль код_дії = виділити_код(код.шлях_до_файлу);
      ціль контекст_дії = виділити_контекст_компіляції();
      ціль помилка_компіляції_тіла_дії = скомпілювати_тіло(М, контекст_дії, код_дії, дані.тіло);
      якщо помилка_компіляції_тіла_дії != пусто {
        вернути помилка_компіляції_тіла_дії;
      }
      ціль позиція_підкоду = додати_підкод_до_коду(код, код_дії);
      додати_вказівку_до_коду_з_двома_аргументами_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВСтворитиДію, позиція_назви, позиція_підкоду);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидСтруктура {
      ціль дані = елемент.дані як адреса<АСДДаніСтруктура>;
      ціль назва = знайти_або_виділити_й_додати_назву(М.БН::адреса, дані.ідентифікатор.значення);
      ціль позиція_назви = додати_назву(М.БН::адреса, дані.ідентифікатор.значення) як п32;
      якщо дані.предок == пусто {
        ціль позиція_назви = додати_назву(М.БН::адреса, ю8"обʼєкт") як п32;
        додати_вказівку_до_коду_з_аргументом_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВЗвернутись, позиція_назви);
      } інакше {
        ціль помилка_компіляції_предка = скомпілювати_елемент_значення(М, контекст, код, дані.предок);
        якщо помилка_компіляції_предка != пусто {
          вернути помилка_компіляції_предка;
        }
      }
      додати_вказівку_до_коду(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВПокластиРеєстрПараметрів);
      змінна ціль па: позитивне = 0;
      поки па < дані.кількість_параметрів {
        ціль параметр = дані.параметри[па];
        ціль позиція_назви_параметра = додати_назву(М.БН::адреса, параметр.ідентифікатор.значення) як п32;
        змінна ціль птп: позитивне = 0;
        поки птп < параметр.кількість_типів {
          ціль тип = параметр.типи[птп];
          ціль помилка_компіляції_типу = скомпілювати_елемент_значення(М, контекст, код, тип);
          якщо помилка_компіляції_типу != пусто {
            вернути помилка_компіляції_типу;
          }
          птп = птп + 1;
        }
        якщо параметр.значення != пусто {
          ціль код_значення_параметра = виділити_код(код.шлях_до_файлу);
          ціль контекст_значення_параметра = виділити_контекст_компіляції();
          ціль помилка_компіляції_значення_параметра = скомпілювати_елемент_значення(М, контекст_значення_параметра, код_значення_параметра, параметр.значення);
          якщо помилка_компіляції_значення_параметра != пусто {
            вернути помилка_компіляції_значення_параметра;
          }
          ціль позиція_підкоду = додати_підкод_до_коду(код, код_значення_параметра);
          додати_вказівку_до_коду_з_аргументом_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВТриматиКод, позиція_підкоду);
        }
        додати_вказівку_до_коду_з_двома_аргументами_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВЗареєструватиПараметр, позиція_назви_параметра, параметр.кількість_типів як п32);
        па = па + 1;
      }
      додати_вказівку_до_коду_з_аргументом_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВСтворитиСтруктуру, позиція_назви);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидЧисло {
      ціль дані = елемент.дані як адреса<АСДДаніЧисло>;
      ціль результат_розбору_числа = різне::числа::розібрати_дійсне_з_ю8сі<д64>(дані.значення);
      якщо результат_розбору_числа.помилка != пусто {
        надрукувати_ю8(результат_розбору_числа.помилка);
      }
      ціль позиція_константи = М.накопичувач_констант.розмір;
      покласти_в_накопичувач<адреса<Обʼєкт>>(М.накопичувач_констант::адреса, виділити_обʼєкт_числа(М, результат_розбору_числа.значення));
      додати_вказівку_до_коду_з_аргументом_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВПокластиКонстанту, позиція_константи як п32);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидТекст {
      ціль дані = елемент.дані як адреса<АСДДаніТекст>;
      ціль ю32 = перетворити_ю8_на_ю32(дані.значення);
      ціль позиція_константи = М.накопичувач_констант.розмір;
      покласти_в_накопичувач<адреса<Обʼєкт>>(М.накопичувач_констант::адреса, виділити_обʼєкт_тексту(М, ю32));
      звільнити(ю32);
      додати_вказівку_до_коду_з_аргументом_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВПокластиКонстанту, позиція_константи як п32);
      вернути пусто;
    } інакше якщо елемент.вид == АСДВидОперація {
      ціль дані = елемент.дані як адреса<АСДДаніОперація>;
      ціль помилка_компіляції_ліво = скомпілювати_елемент_значення(М, контекст, код, дані.ліво);
      якщо помилка_компіляції_ліво != пусто {
        вернути помилка_компіляції_ліво;
      }
      ціль помилка_компіляції_право = скомпілювати_елемент_значення(М, контекст, код, дані.право);
      якщо помилка_компіляції_право != пусто {
        вернути помилка_компіляції_право;
      }
      якщо дані.операція == АСДОпераціяДодавання {
        додати_вказівку_до_коду(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВДодати);
        вернути пусто;
      } інакше {
        вернути виділити_помилку_компіляції(елемент.місцезнаходження, ю8"Невідома операція!");
      }
    } інакше якщо елемент.вид == АСДВидЗначенняЯкщо {
      //
    } інакше якщо елемент.вид == АСДВидЯк {
      //
    } інакше якщо елемент.вид == АСДВидСамоОперація {
      //
    }
    вернути виділити_помилку_компіляції(елемент.місцезнаходження, ю8"Невідомий вид АСДЗначення!");
  }

  місцева дія скомпілювати_тіло(М: адреса<Машина>, контекст: адреса<КонтекстКомпіляції>, код: адреса<Код>, тіло: адреса<СписокАСДЗначень>): адреса<ПомилкаКомпіляції> {
    змінна ціль пе: позитивне = 0;
    поки пе < тіло.довжина {
      ціль елемент = тіло.елементи[пе];
      якщо елемент.вид == АСДВидНіщо {
        вернути виділити_помилку_компіляції(елемент.місцезнаходження, ю8"Виявлено АСДВидНіщо!");
      } інакше якщо елемент.вид == АСДВидВизначити {
        ціль дані = елемент.дані як адреса<АСДДаніВизначити>;
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, дані.значення);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        ціль позиція_назви = додати_назву(М.БН::адреса, дані.ідентифікатор.значення) як п32;
        додати_вказівку_до_коду_з_аргументом_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВВизначити, позиція_назви);
      } інакше якщо елемент.вид == АСДВидЗвернутись {
        ціль дані = елемент.дані як адреса<АСДДаніЗвернутись>;
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        додати_вказівку_до_коду(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВЗабрати);
      } інакше якщо елемент.вид == АСДВидОтримати {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        додати_вказівку_до_коду(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВЗабрати);
      } інакше якщо елемент.вид == АСДВидОтриматиЗаПозицією {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        додати_вказівку_до_коду(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВЗабрати);
      } інакше якщо елемент.вид == АСДВидЗмінити {
        ціль дані = елемент.дані як адреса<АСДДаніЗмінити>;
        ціль помилка_компіляції_обʼєкта = скомпілювати_елемент_значення(М, контекст, код, дані.обʼєкт);
        якщо помилка_компіляції_обʼєкта != пусто {
          вернути помилка_компіляції_обʼєкта;
        }
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, дані.значення);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        ціль позиція_назви = додати_назву(М.БН::адреса, дані.ідентифікатор.значення) як п32;
        додати_вказівку_до_коду_з_аргументом_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВПопроситиЗмінитиВластивість, позиція_назви);
      } інакше якщо елемент.вид == АСДВидЗмінитиЗаПозицією {
        //
      } інакше якщо елемент.вид == АСДВидВиконати {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        додати_вказівку_до_коду(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВЗабрати);
      } інакше якщо елемент.вид == АСДВидДія {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        ціль дані = елемент.дані як адреса<АСДДаніДія>;
        ціль позиція_назви = додати_назву(М.БН::адреса, дані.ідентифікатор.значення) як п32;
        додати_вказівку_до_коду_з_аргументом_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВВизначити, позиція_назви);
      } інакше якщо елемент.вид == АСДВидСтруктура {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        ціль дані = елемент.дані як адреса<АСДДаніСтруктура>;
        ціль позиція_назви = додати_назву(М.БН::адреса, дані.ідентифікатор.значення) як п32;
        додати_вказівку_до_коду_з_аргументом_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВВизначити, позиція_назви);
      } інакше якщо елемент.вид == АСДВидЧисло {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        додати_вказівку_до_коду(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВЗабрати);
      } інакше якщо елемент.вид == АСДВидТекст {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        додати_вказівку_до_коду(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВЗабрати);
      } інакше якщо елемент.вид == АСДВидОперація {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        додати_вказівку_до_коду(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВЗабрати);
      } інакше якщо елемент.вид == АСДВидЯкщо {
        //
      } інакше якщо елемент.вид == АСДВидПоки {
        ціль дані = елемент.дані як адреса<АСДДаніПоки>;
        ціль позиція_вказівки_початку_поки = код.розмір_вказівок;
        змінна ціль позиція_вказівки_якщо_ні = 0п32;
        якщо дані.умова != пусто {
          ціль помилка_компіляції_умови = скомпілювати_елемент_значення(М, контекст, код, дані.умова);
          якщо помилка_компіляції_умови != пусто {
            вернути помилка_компіляції_умови;
          }
          позиція_вказівки_якщо_ні = код.розмір_вказівок;
          додати_вказівку_до_коду_з_аргументом_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВСтрибнутиЯкщоНі, 0);
        }
        ціль контекст_циклу = виділити_контекст_компіляції();
        ціль помилка_компіляції_тіла = скомпілювати_тіло(М, контекст_циклу, код, дані.тіло);
        якщо помилка_компіляції_тіла != пусто {
          вернути помилка_компіляції_тіла;
        }
        додати_вказівку_до_коду_з_аргументом_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВСтрибнути, позиція_вказівки_початку_поки);
        якщо дані.умова != пусто {
          код.вказівки[позиція_вказівки_якщо_ні + 1] = (код.розмір_вказівок & 0шДД) як п8;
          код.вказівки[позиція_вказівки_якщо_ні + 2] = ((код.розмір_вказівок >> 8) & 0шДД) як п8;
          код.вказівки[позиція_вказівки_якщо_ні + 3] = ((код.розмір_вказівок >> 16) & 0шДД) як п8;
          код.вказівки[позиція_вказівки_якщо_ні + 4] = ((код.розмір_вказівок >> 24) & 0шДД) як п8;
        }
      } інакше якщо елемент.вид == АСДВидВернути {
        //
      } інакше якщо елемент.вид == АСДВидЗначенняЯкщо {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        додати_вказівку_до_коду(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВЗабрати);
      } інакше якщо елемент.вид == АСДВидЯк {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        додати_вказівку_до_коду(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВЗабрати);
      } інакше якщо елемент.вид == АСДВидСамоОперація {
        ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, елемент);
        якщо помилка_компіляції_значення != пусто {
          вернути помилка_компіляції_значення;
        }
        додати_вказівку_до_коду(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВЗабрати);
      } інакше якщо елемент.вид == АСДВидВзяти {
        //
      } інакше якщо елемент.вид == АСДВидСпробувати {
        ціль дані = елемент.дані як адреса<АСДДаніСпробувати>;
        ціль позиція_вказівки_почати_спробу = код.розмір_вказівок;
        додати_вказівку_до_коду_з_аргументом_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВПочатиСпробу, 0);
        ціль помилка_компіляції_тіла = скомпілювати_тіло(М, контекст, код, дані.тіло);
        якщо помилка_компіляції_тіла != пусто {
          вернути помилка_компіляції_тіла;
        }
        ціль позиція_вказівки_закінчити_спробу = код.розмір_вказівок;
        додати_вказівку_до_коду_з_аргументом_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВЗакінчитиСпробу, 0);
        якщо дані.ідентифікатор_зловити == пусто {
          додати_вказівку_до_коду(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВЗабрати);
        } інакше {
          ціль позиція_назви = додати_назву(М.БН::адреса, дані.ідентифікатор_зловити.значення) як п32;
          додати_вказівку_до_коду_з_аргументом_п32(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВВизначити, позиція_назви);
        }
        // потім: визначити субʼєкт помилки
        код.вказівки[позиція_вказівки_почати_спробу + 1] = (код.розмір_вказівок & 0шДД) як п8;
        код.вказівки[позиція_вказівки_почати_спробу + 2] = ((код.розмір_вказівок >> 8) & 0шДД) як п8;
        код.вказівки[позиція_вказівки_почати_спробу + 3] = ((код.розмір_вказівок >> 16) & 0шДД) як п8;
        код.вказівки[позиція_вказівки_почати_спробу + 4] = ((код.розмір_вказівок >> 24) & 0шДД) як п8;
        ціль помилка_компіляції_тіла_зловити = скомпілювати_тіло(М, контекст, код, дані.тіло_зловити);
        якщо помилка_компіляції_тіла_зловити != пусто {
          вернути помилка_компіляції_тіла_зловити;
        }
        код.вказівки[позиція_вказівки_закінчити_спробу + 1] = (код.розмір_вказівок & 0шДД) як п8;
        код.вказівки[позиція_вказівки_закінчити_спробу + 2] = ((код.розмір_вказівок >> 8) & 0шДД) як п8;
        код.вказівки[позиція_вказівки_закінчити_спробу + 3] = ((код.розмір_вказівок >> 16) & 0шДД) як п8;
        код.вказівки[позиція_вказівки_закінчити_спробу + 4] = ((код.розмір_вказівок >> 24) & 0шДД) як п8;
      } інакше якщо елемент.вид == АСДВидВпасти {
        ціль дані = елемент.дані як адреса<АСДДаніВпасти>;
        якщо дані.значення == пусто {
          додати_вказівку_до_коду(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВПокластиПусто);
        } інакше {
          ціль помилка_компіляції_значення = скомпілювати_елемент_значення(М, контекст, код, дані.значення);
          якщо помилка_компіляції_значення != пусто {
            вернути помилка_компіляції_значення;
          }
        }
        додати_вказівку_до_коду(код, елемент.місцезнаходження.рядок як п32, елемент.місцезнаходження.стовпець як п32, ВВпасти);
      } інакше {
        вернути виділити_помилку_компіляції(елемент.місцезнаходження, ю8"Невідомий вид АСДЗначення!");
      }
      пе = пе + 1;
    }
    вернути пусто;
  }

  місцева дія звільнити_контекст_компіляції(контекст: адреса<КонтекстКомпіляції>) {
    звільнити(контекст);
  }
}