////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  місцева дія надрукувати_обʼєкт_юнікоду_в_накопичувач_ю8(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    ціль ю8 = перетворити_ю32_в_ю8(обʼєкт_юнікоду.значення);
    якщо глибина > 0 {
      покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"\"");
    }
    покласти_в_накопичувач_ю8(накопичувач_ю8, ю8);
    якщо глибина > 0 {
      покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"\"");
    }
    звільнити(ю8);
  }

  місцева дія обʼєкт_юнікоду_містисть(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: втілити
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія створити_структуру_юнікоду(М: адреса<Машина>): адреса<ОбʼєктСтруктури> {
    ціль обʼєкт_структури = виділити_обʼєкт_структури(М, М.БН.С.юнікод, М.обʼєкт_структури_обʼєкт);

    вернути обʼєкт_структури;
  }

  місцева дія виділити_обʼєкт_юнікоду(М: адреса<Машина>, значення: Ю32): адреса<ОбʼєктЮнікоду> {
    ціль обʼєкт_юнікоду = виділити_обʼєкт<ОбʼєктЮнікоду>(М, М.обʼєкт_структури_юнікод);

    обʼєкт_юнікоду.значення = виділити_копію_ю32(значення);

    вернути обʼєкт_юнікоду;
  }

  місцева дія виділити_обʼєкт_юнікоду_з_ю8(М: адреса<Машина>, значення: Ю8): адреса<ОбʼєктЮнікоду> {
    ціль ю32 = перетворити_ю8_на_ю32(значення);
    ціль обʼєкт_юнікоду = виділити_обʼєкт_юнікоду(М, ю32);
    звільнити(ю32);
    вернути обʼєкт_юнікоду;
  }

  місцева дія звільнити_обʼєкт_юнікоду(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>) {
    звільнити(обʼєкт_юнікоду.значення);
    звільнити(обʼєкт_юнікоду);
  }

  місцева дія обʼєкт_юнікоду_додати(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: втілити
    вернути пусто;
  }

  місцева дія обʼєкт_юнікоду_відняти(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: втілити
    вернути пусто;
  }

  місцева дія обʼєкт_юнікоду_помножити(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: втілити
    вернути пусто;
  }

  місцева дія обʼєкт_юнікоду_поділити(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: втілити
    вернути пусто;
  }

  місцева дія обʼєкт_юнікоду_отримати_остачу_ділення(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: втілити
    вернути пусто;
  }

  місцева дія обʼєкт_юнікоду_отримати_частку_ділення(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: втілити
    вернути пусто;
  }

  місцева дія обʼєкт_юнікоду_піднести_до_степеня(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: втілити
    вернути пусто;
  }

  місцева дія обʼєкт_юнікоду_зсунути_вліво(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: втілити
    вернути пусто;
  }

  місцева дія обʼєкт_юнікоду_зсунути_вправо(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: втілити
    вернути пусто;
  }

  місцева дія обʼєкт_юнікоду_зсунути_вправо_зі_заповненням(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: втілити
    вернути пусто;
  }

  місцева дія обʼєкт_юнікоду_двійкове_і(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: втілити
    вернути пусто;
  }

  місцева дія обʼєкт_юнікоду_двійкове_або(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: втілити
    вернути пусто;
  }

  місцева дія обʼєкт_юнікоду_двійкове_виключне_або(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    // потім: втілити
    вернути пусто;
  }
}