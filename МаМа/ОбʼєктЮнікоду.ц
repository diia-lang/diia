////
// Автор це Богданович Давид Когут Прихожденко та Організація Мавки та Організація Організацій
////

взяти визначення МаМа;

секція МаМа {
  дія нативна_дія_юнікоду_чародія_отримати_елемент(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію юнікоду \"чародія_отримати_елемент\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_юнікод {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію юнікоду \"чародія_отримати_елемент\" можна виконувати лише від юнікоду") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_юнікоду = обʼєкт_я як адреса<ОбʼєктЮнікоду>;
    змінна ціль знайдено_обʼєкт_аргумента_ключа = ні;
    змінна ціль обʼєкт_аргумента_ключа: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_ключа = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.ключ);
      якщо елемент_ключа != пусто {
        знайдено_обʼєкт_аргумента_ключа = так;
        обʼєкт_аргумента_ключа = елемент_ключа.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента_ключа == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента_ключа = так;
          обʼєкт_аргумента_ключа = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента_ключа == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"ключ\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_юнікоду_отримати_елемент(обʼєкт_юнікоду, М, обʼєкт_аргумента_ключа);
  }

  дія нативна_дія_юнікоду_чародія_перебір(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_юнікоду = обʼєкт_я як адреса<ОбʼєктЮнікоду>;
    вернути обʼєкт_юнікоду_отримати_перебір(обʼєкт_юнікоду, М);
  }

  дія нативна_дія_юнікоду_чародія_додати(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію юнікоду \"чародія_додати\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_юнікод {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію юнікоду \"чародія_додати\" можна виконувати лише від юнікоду") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_юнікоду = обʼєкт_я як адреса<ОбʼєктЮнікоду>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_юнікоду_додати(обʼєкт_юнікоду, М, обʼєкт_аргумента);
  }

  дія нативна_дія_юнікоду_чародія_містить(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_я == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію юнікоду \"чародія_містить\" не можна виконувати від від пусто") як адреса<Обʼєкт>;
    }
    якщо обʼєкт_я.тип != М.обʼєкт_структури_юнікод {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Чародію юнікоду \"чародія_містить\" можна виконувати лише від юнікоду") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_юнікоду = обʼєкт_я як адреса<ОбʼєктЮнікоду>;
    змінна ціль знайдено_обʼєкт_аргумента = ні;
    змінна ціль обʼєкт_аргумента: адреса<Обʼєкт> = пусто;
    якщо іменовані_аргументи != пусто {
      ціль елемент_значення = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(іменовані_аргументи, М.БН.С.значення);
      якщо елемент_значення != пусто {
        знайдено_обʼєкт_аргумента = так;
        обʼєкт_аргумента = елемент_значення.значення;
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      якщо аргументи != пусто {
        якщо аргументи.розмір > 0 {
          знайдено_обʼєкт_аргумента = так;
          обʼєкт_аргумента = аргументи.дані[0];
        }
      }
    }
    якщо знайдено_обʼєкт_аргумента == ні {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Пропущено аргумент \"значення\"") як адреса<Обʼєкт>;
    }
    вернути обʼєкт_юнікоду_містить(обʼєкт_юнікоду, М, обʼєкт_аргумента);
  }

  місцева дія створити_структуру_юнікоду(М: адреса<Машина>): адреса<ОбʼєктСтруктури> {
    ціль обʼєкт_структури = виділити_обʼєкт_структури(М, М.БН.С.юнікод, М.обʼєкт_структури_обʼєкт);

    ціль обʼєкт_нативної_дії_юнікоду_чародія_отримати_елемент = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_отримати_елемент, нативна_дія_юнікоду_чародія_отримати_елемент, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_отримати_елемент, обʼєкт_нативної_дії_юнікоду_чародія_отримати_елемент як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_юнікоду_чародія_перебір = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_перебір, нативна_дія_юнікоду_чародія_перебір, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_перебір, обʼєкт_нативної_дії_юнікоду_чародія_перебір як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_юнікоду_чародія_додати = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_додати, нативна_дія_юнікоду_чародія_додати, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_додати, обʼєкт_нативної_дії_юнікоду_чародія_додати як адреса<Обʼєкт>);
    ціль обʼєкт_нативної_дії_юнікоду_чародія_містить = виділити_обʼєкт_нативної_дії(М, М.БН.С.чародія_містить, нативна_дія_юнікоду_чародія_містить, пусто, пусто);
    змінити_в_реєстрі<адреса<Назва>, адреса<Обʼєкт>>(обʼєкт_структури.методи::адреса, М.БН.С.чародія_містить, обʼєкт_нативної_дії_юнікоду_чародія_містить як адреса<Обʼєкт>);

    вернути обʼєкт_структури;
  }

  місцева дія виділити_обʼєкт_юнікоду(М: адреса<Машина>, значення: Ю32): адреса<ОбʼєктЮнікоду> {
    ціль обʼєкт_юнікоду = виділити_обʼєкт<ОбʼєктЮнікоду>(М, М.обʼєкт_структури_юнікод);

    обʼєкт_юнікоду.довжина = порахувати_розмір_Ю32(значення);
    якщо виділити_копію_Ю32(значення, обʼєкт_юнікоду.довжина, обʼєкт_юнікоду.значення::адреса) == ні {
      ПОМЕРТИ(ю8"Помилка виділення копії Ю32");
    }

    вернути обʼєкт_юнікоду;
  }

  місцева дія виділити_обʼєкт_юнікоду_з_ю8(М: адреса<Машина>, значення: Ю8): адреса<ОбʼєктЮнікоду> {
    ціль ю32: Ю32;
    якщо перекодувати_Ю8_в_Ю32(значення, порахувати_розмір_Ю8(значення), ю32::адреса) == 0 {
      ПОМЕРТИ(ю8"Помилка перекодування Ю8 в Ю32");
    }
    ціль обʼєкт_юнікоду = виділити_обʼєкт_юнікоду(М, ю32);
    звільнити(ю32);
    вернути обʼєкт_юнікоду;
  }

  місцева дія звільнити_обʼєкт_юнікоду(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>) {
    звільнити(обʼєкт_юнікоду.значення);
    звільнити(обʼєкт_юнікоду);
  }

  місцева дія обʼєкт_юнікоду_виконати(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати юнікод") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_отримати_властивість(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    якщо назва == М.БН.С.довжина {
      вернути виділити_обʼєкт_числа(М, д64(обʼєкт_юнікоду.довжина)) як адреса<Обʼєкт>;
    }
    змінна ціль тип = обʼєкт_юнікоду.тип;
    поки тип != пусто {
      ціль елемент_реєстру_методів = отримати_з_реєстру<адреса<Назва>, адреса<Обʼєкт>>(тип.методи::адреса, назва);
      якщо елемент_реєстру_методів != пусто {
        вернути елемент_реєстру_методів.значення;
      }
      тип = тип.предок;
    }
    вернути пусто;
  }

  місцева дія обʼєкт_юнікоду_змінити_властивість(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, назва: адреса<Назва>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто;
  }

  місцева дія обʼєкт_юнікоду_видалити_властивість(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, назва: адреса<Назва>): обʼєкт_або_стан_падіння {
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_виконати_властивість(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, назва_властивості: адреса<Назва>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_властивості = обʼєкт_юнікоду_отримати_властивість(обʼєкт_юнікоду, М, назва_властивості);
    якщо М.стан_падіння {
      вернути обʼєкт_властивості;
    }
    вернути обʼєкт_виконати(обʼєкт_властивості, М, обʼєкт_юнікоду як адреса<Обʼєкт>, аргументи, іменовані_аргументи);
  }

  місцева дія обʼєкт_юнікоду_отримати_елемент(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо ключ == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Ключ отримання елемента з юнікоду має бути числом") як адреса<Обʼєкт>;
    }
    якщо ключ.тип != М.обʼєкт_структури_число {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Ключ отримання елемента з юнікоду має бути числом") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_числа = ключ як адреса<ОбʼєктЧисла>;
    ціль позиція = позитивне(обʼєкт_числа.значення);
    якщо обʼєкт_юнікоду.довжина > позиція {
      вернути виділити_обʼєкт_числа(М, д64(обʼєкт_юнікоду.значення[позиція])) як адреса<Обʼєкт>;
    }
    вернути пусто;
  }

  місцева дія обʼєкт_юнікоду_змінити_елемент(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, ключ: адреса<Обʼєкт>, значення: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути пусто;
  }

  місцева дія обʼєкт_юнікоду_видалити_елемент(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, ключ: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  дія нативна_дія_перебору_юнікоду_далі(обʼєкт_нативної_дії: адреса<ОбʼєктНативноїДії>, М: адреса<Машина>, обʼєкт_я: адреса<Обʼєкт>, аргументи: адреса<Накопичувач<адреса<Обʼєкт>>>, іменовані_аргументи: адреса<Реєстр<адреса<Назва>, адреса<Обʼєкт>>>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_юнікоду = обʼєкт_отримати_властивість(обʼєкт_я, М, М.БН.С.сп);
    покласти_в_НатО(М, обʼєкт_юнікоду);
    якщо М.стан_падіння {
      забрати_з_НатО(М);
      вернути обʼєкт_юнікоду;
    }
    ціль довжина_юнікоду = обʼєкт_отримати_властивість(обʼєкт_юнікоду, М, М.БН.С.довжина);
    покласти_в_НатО(М, довжина_юнікоду);
    якщо М.стан_падіння {
      забрати_з_НатО(М);
      забрати_з_НатО(М);
      вернути довжина_юнікоду;
    }
    змінна ціль обʼєкт_позиції = обʼєкт_отримати_властивість(обʼєкт_я, М, М.БН.С.позиція);
    покласти_в_НатО(М, обʼєкт_позиції);
    якщо М.стан_падіння {
      забрати_з_НатО(М);
      забрати_з_НатО(М);
      забрати_з_НатО(М);
      вернути обʼєкт_позиції;
    }
    ціль чи_позиція_менше = обʼєкт_менше(обʼєкт_позиції, М, довжина_юнікоду);
    покласти_в_НатО(М, чи_позиція_менше);
    якщо М.стан_падіння {
      забрати_з_НатО(М);
      забрати_з_НатО(М);
      забрати_з_НатО(М);
      забрати_з_НатО(М);
      вернути чи_позиція_менше;
    }
    якщо чи_позиція_менше == М.обʼєкт_логічного_так як адреса<Обʼєкт> {
      якщо М.стан_падіння {
        забрати_з_НатО(М);
        забрати_з_НатО(М);
        забрати_з_НатО(М);
        забрати_з_НатО(М);
        вернути обʼєкт_позиції;
      }
      ціль елемент_юнікоду = обʼєкт_отримати_елемент(обʼєкт_юнікоду, М, обʼєкт_позиції);
      покласти_в_НатО(М, чи_позиція_менше);
      якщо М.стан_падіння {
        забрати_з_НатО(М);
        забрати_з_НатО(М);
        забрати_з_НатО(М);
        забрати_з_НатО(М);
        забрати_з_НатО(М);
        вернути елемент_юнікоду;
      }
      обʼєкт_позиції = обʼєкт_додати(обʼєкт_позиції, М, виділити_обʼєкт_числа(М, 1) як адреса<Обʼєкт>);
      покласти_в_НатО(М, обʼєкт_позиції);
      ціль результат_зміни_властивості_позиції = обʼєкт_змінити_властивість(обʼєкт_я, М, М.БН.С.позиція, обʼєкт_позиції);
      якщо М.стан_падіння {
        забрати_з_НатО(М);
        забрати_з_НатО(М);
        забрати_з_НатО(М);
        забрати_з_НатО(М);
        забрати_з_НатО(М);
        забрати_з_НатО(М);
        вернути результат_зміни_властивості_позиції;
      }
      ціль результат_зміни_властивості_значення = обʼєкт_змінити_властивість(обʼєкт_я, М, М.БН.С.значення, елемент_юнікоду);
      якщо М.стан_падіння {
        забрати_з_НатО(М);
        забрати_з_НатО(М);
        забрати_з_НатО(М);
        забрати_з_НатО(М);
        забрати_з_НатО(М);
        забрати_з_НатО(М);
        вернути результат_зміни_властивості_значення;
      }
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    забрати_з_НатО(М);
    забрати_з_НатО(М);
    забрати_з_НатО(М);
    забрати_з_НатО(М);
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_отримати_перебір(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    ціль обʼєкт_перебору = виділити_складений_обʼєкт(М, М.обʼєкт_структури_обʼєкт);
    ціль результат_зміни_властивості = складений_обʼєкт_змінити_властивість(обʼєкт_перебору, М, М.БН.С.сп, обʼєкт_юнікоду як адреса<Обʼєкт>);
    якщо М.стан_падіння {
      вернути результат_зміни_властивості;
    }
    ціль обʼєкт_позиції = виділити_обʼєкт_числа(М, 0);
    ціль результат_зміни_властивості_позиції = складений_обʼєкт_змінити_властивість(обʼєкт_перебору, М, М.БН.С.позиція, обʼєкт_позиції як адреса<Обʼєкт>);
    якщо М.стан_падіння {
      вернути результат_зміни_властивості_позиції;
    }
    ціль обʼєкт_нативної_дії_юнікоду_перебору_далі = виділити_обʼєкт_нативної_дії(М, М.БН.С.далі, нативна_дія_перебору_юнікоду_далі, пусто, пусто);
    ціль результат_зміни_властивості_перебору_далі = складений_обʼєкт_змінити_властивість(обʼєкт_перебору, М, М.БН.С.далі, обʼєкт_нативної_дії_юнікоду_перебору_далі як адреса<Обʼєкт>);
    якщо М.стан_падіння {
      вернути результат_зміни_властивості_перебору_далі;
    }
    вернути обʼєкт_перебору як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_додати(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо додати пусто до юнікоду") як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_юнікод {
      увімкнути_стан_падіння(М, пусто);
      вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"До юнікоду можна додати лише юнікод") як адреса<Обʼєкт>;
    }
    ціль обʼєкт_юнікоду_аргумента = аргумент як адреса<ОбʼєктЮнікоду>;
    ціль розмір_значення_1 = обʼєкт_юнікоду.довжина;
    ціль розмір_значення_2 = обʼєкт_юнікоду_аргумента.довжина;
    ціль новий_розмір = розмір_значення_1 + розмір_значення_2;
    ціль нове_значення = виділити<п32>(ц32(новий_розмір) + 1);
    змінна ціль позиція: позитивне = 0;
    поки позиція < розмір_значення_1 {
      нове_значення[позиція] = обʼєкт_юнікоду.значення[позиція];
      позиція += 1;
    }
    позиція = 0;
    поки позиція < розмір_значення_2 {
      нове_значення[розмір_значення_1 + позиція] = обʼєкт_юнікоду_аргумента.значення[позиція];
      позиція += 1;
    }
    нове_значення[новий_розмір] = 0;
    ціль новий_обʼєкт_юнікоду = виділити_обʼєкт_юнікоду(М, нове_значення);
    звільнити(нове_значення);
    вернути новий_обʼєкт_юнікоду як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_відняти(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати віднімання для юнікоду") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_помножити(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати множення для юнікоду") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_поділити(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати ділення для юнікоду") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_отримати_остачу_ділення(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати отримання остачі ділення для юнікоду") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_отримати_частку_ділення(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати отримання частки ділення для юнікоду") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_піднести_до_степеня(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати піднесення до степеня для юнікоду") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_зсунути_вліво(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вліво для юнікоду") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_зсунути_вправо(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо для юнікоду") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_зсунути_вправо_зі_заповненням(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зсув вправо зі заповненням для юнікоду") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_двійкове_і(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове І для юнікоду") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_двійкове_або(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове АБО для юнікоду") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_двійкове_виключне_або(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове ВИКЛЮЧНЕ АБО для юнікоду") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_двійкове_не(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати двійкове НЕ для юнікоду") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_більше(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на більшість для юнікоду") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_менше(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати перевірку на меншість для юнікоду") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_рівно(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо перевірити_чи_обʼєкт_юнікоду_рівно(обʼєкт_юнікоду, М, аргумент) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_містить(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо аргумент.тип == М.обʼєкт_структури_число {
      ціль обʼєкт_числа_аргумента = аргумент як адреса<ОбʼєктЧисла>;
      ціль символ = п32(обʼєкт_числа_аргумента.значення);
      змінна ціль позиція: позитивне = 0;
      поки обʼєкт_юнікоду.значення[позиція] != 0 {
        якщо обʼєкт_юнікоду.значення[позиція] == символ {
          вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
        }
        позиція += 1;
      }
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо аргумент.тип == М.обʼєкт_структури_юнікод {
      змінна ціль обʼєкт_юнікоду_аргумента = аргумент як адреса<ОбʼєктЮнікоду>;
      якщо обʼєкт_юнікоду.довжина == 0 {
        якщо обʼєкт_юнікоду_аргумента.довжина == 0 {
          вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
        }
      }
      змінна ціль позиція: позитивне = 0;
      поки обʼєкт_юнікоду.значення[позиція] != 0 {
        змінна ціль позиція_аргумента: позитивне = 0;
        поки обʼєкт_юнікоду_аргумента.значення[позиція_аргумента] != 0 {
          якщо обʼєкт_юнікоду.значення[позиція + позиція_аргумента] != обʼєкт_юнікоду_аргумента.значення[позиція_аргумента] {
            стрибнути далі;
          }
          позиція_аргумента += 1;
        }
        вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
        далі:
        позиція += 1;
      }
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_є(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): обʼєкт_або_стан_падіння {
    якщо аргумент == пусто {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо аргумент.тип != М.обʼєкт_структури_Структура {
      вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
    }
    якщо перевірити_чи_обʼєкт_юнікоду_є(обʼєкт_юнікоду, М, аргумент як адреса<ОбʼєктСтруктури>) {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_відʼємне(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати відʼємне для юнікоду") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_числове(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати числове для юнікоду") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_заперечити(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    якщо обʼєкт_юнікоду.довжина == 0 {
      вернути М.обʼєкт_логічного_так як адреса<Обʼєкт>;
    }
    вернути М.обʼєкт_логічного_ні як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_збільшити(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати збільшення для юнікоду") як адреса<Обʼєкт>;
  }

  місцева дія обʼєкт_юнікоду_зменшити(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>): обʼєкт_або_стан_падіння {
    увімкнути_стан_падіння(М, пусто);
    вернути виділити_обʼєкт_тексту_з_ю8(М, ю8"Неможливо виконати зменшення для юнікоду") як адреса<Обʼєкт>;
  }

  місцева дія перевірити_чи_обʼєкт_юнікоду_рівно(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, аргумент: адреса<Обʼєкт>): логічне {
    ціль обʼєкт = обʼєкт_юнікоду як адреса<Обʼєкт>;
    якщо обʼєкт == аргумент {
      вернути так;
    }
    якщо аргумент == пусто {
      вернути ні;
    }
    якщо аргумент.тип != М.обʼєкт_структури_юнікод {
      вернути ні;
    }
    ціль обʼєкт_юнікоду_аргумента = аргумент як адреса<ОбʼєктЮнікоду>;
    якщо порівняти_Ю32(обʼєкт_юнікоду.значення, обʼєкт_юнікоду_аргумента.значення) == 0 {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_обʼєкт_юнікоду_є(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, обʼєкт_структури: адреса<ОбʼєктСтруктури>): логічне {
    якщо обʼєкт_структури == М.обʼєкт_структури_юнікод {
      вернути так;
    }
    вернути ні;
  }

  місцева дія надрукувати_обʼєкт_юнікоду_в_накопичувач_ю8(обʼєкт_юнікоду: адреса<ОбʼєктЮнікоду>, М: адреса<Машина>, накопичувач_ю8: адреса<НакопичувачЮ8>, глибина: позитивне) {
    ціль ю8 = перетворити_ю32_в_ю8(обʼєкт_юнікоду.значення);
    якщо глибина > 0 {
      покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"\"");
    }
    покласти_в_накопичувач_ю8(накопичувач_ю8, ю8);
    якщо глибина > 0 {
      покласти_в_накопичувач_ю8(накопичувач_ю8, ю8"\"");
    }
    звільнити(ю8);
  }
}