взяти визначення МаМа;

секція МаМа {
  дія виділити_код(): комірка<Код> {
    ціль код = виділити<Код>();
    код.розмір_вказівок = 0;
    код.вказівки = пусто;
    код.кількість_назв = 0;
    код.назви = пусто;
    код.кількість_чисел = 0;
    код.числа = пусто;
    код.кількість_текстів = 0;
    код.тексти = пусто;
    код.кількість_юнікодів = 0;
    код.юнікоди = пусто;
    вернути код;
  }

  дія додати_назву_до_коду(код: комірка<Код>, назва: комірка<Назва>): п32 {
    код.назви = перевиділити<комірка<Назва>>(код.назви, (код.кількість_назв + 1) як ц32);
    код.назви[код.кількість_назв] = назва;
    код.кількість_назв = код.кількість_назв + 1;
    вернути код.кількість_назв - 1;
  }

  дія додати_число_до_коду(код: комірка<Код>, значення: д64): п32 {
    код.числа = перевиділити<д64>(код.числа, (код.кількість_чисел + 1) як ц32);
    код.числа[код.кількість_чисел] = значення;
    код.кількість_чисел = код.кількість_чисел + 1;
    вернути код.кількість_чисел - 1;
  }

  дія додати_текст_до_коду(код: комірка<Код>, текст: памʼять<п32>): п32 {
    код.тексти = перевиділити<памʼять<п32>>(код.тексти, (код.кількість_текстів + 1) як ц32);
    код.тексти[код.кількість_текстів] = текст;
    код.кількість_текстів = код.кількість_текстів + 1;
    вернути код.кількість_текстів - 1;
  }

  дія додати_юнікод_до_коду(код: комірка<Код>, юнікод: памʼять<п32>): п32 {
    код.юнікоди = перевиділити<памʼять<п32>>(код.юнікоди, (код.кількість_юнікодів + 1) як ц32);
    код.юнікоди[код.кількість_юнікодів] = юнікод;
    код.кількість_юнікодів = код.кількість_юнікодів + 1;
    вернути код.кількість_юнікодів - 1;
  }

  дія додати_вказівку_до_коду(код: комірка<Код>, вказівка: п8): п32 {
    код.вказівки = перевиділити<п8>(код.вказівки, (код.розмір_вказівок + 1) як ц32);
    код.вказівки[код.розмір_вказівок] = вказівка;
    код.розмір_вказівок = код.розмір_вказівок + 1;
    вернути код.розмір_вказівок - 1;
  }

  дія додати_вказівку_до_коду_з_аргументом_п32(код: комірка<Код>, вказівка: п8, аргумент: п32): п32 {
    код.вказівки = перевиділити<п8>(код.вказівки, (код.розмір_вказівок + 1 + 4) як ц32);
    код.вказівки[код.розмір_вказівок] = вказівка;
    код.вказівки[код.розмір_вказівок + 1] = (аргумент & 0шДД) як п8;
    код.вказівки[код.розмір_вказівок + 2] = ((аргумент >> 8) & 0шДД) як п8;
    код.вказівки[код.розмір_вказівок + 3] = ((аргумент >> 16) & 0шДД) як п8;
    код.вказівки[код.розмір_вказівок + 4] = ((аргумент >> 24) & 0шДД) як п8;
    код.розмір_вказівок = код.розмір_вказівок + 1 + 4;
    вернути код.розмір_вказівок - 1 - 4;
  }

  дія перевірити_чи_назви_рівні(назва1: комірка<Назва>, назва2: комірка<Назва>): логічне {
    вернути назва1 == назва2;
  }
}

секція МаМа {
  дія виділити_обʼєкт(М: комірка<Машина>, обʼєкт_структури: комірка<Обʼєкт>): комірка<Обʼєкт> {
    ціль обʼєкт = виділити<Обʼєкт>();
    обʼєкт.обʼєкт_структури = пусто;
    обʼєкт.властивості = зробити_карту<комірка<Назва>, комірка<Обʼєкт>>(перевірити_чи_назви_рівні);
    обʼєкт.дані = 0д64;
    вернути обʼєкт;
  }

  дія виділити_обʼєкт_числа(М: комірка<Машина>, значення: д64): комірка<Обʼєкт> {
    ціль обʼєкт_числа = виділити_обʼєкт(М, М.обʼєкт_структури_числа);
    обʼєкт_числа.дані = значення;
    вернути обʼєкт_числа;
  }

  дія виділити_машину(): комірка<Машина> {
    ціль М = виділити<Машина>();
    М.стопка = зробити_стопку<комірка<Обʼєкт>>();
    М.обʼєкт_структури_числа = виділити_обʼєкт(М, пусто);
    вернути М;
  }

  дія виконати_код(М: комірка<Машина>, код: комірка<Код>) {
    ціль позиція_вказівки: п32 = 0;
    поки позиція_вказівки < код.розмір_вказівок {
      ціль вказівка = код.вказівки[позиція_вказівки];
      якщо вказівка == ВПокластиЧисло {
        ціль перша_частина: п32 = код.вказівки[позиція_вказівки + 1] як п32;
        ціль друга_частина: п32 = код.вказівки[позиція_вказівки + 2] як п32;
        ціль третя_частина: п32 = код.вказівки[позиція_вказівки + 3] як п32;
        ціль четверта_частина: п32 = код.вказівки[позиція_вказівки + 4] як п32;
        ціль позиція_числа: п32 = перша_частина + (друга_частина << 8) + (третя_частина << 16) + (четверта_частина << 24);
        ціль число = код.числа[позиція_числа];
        ціль обʼєкт_числа = виділити_обʼєкт_числа(М, число);
        покласти_на_стопку<комірка<Обʼєкт>>(М.стопка::адреса, обʼєкт_числа);
      } інакше якщо вказівка == ВДодати {
        ціль обʼєкт_числа2 = забрати_з_стопки<комірка<Обʼєкт>>(М.стопка::адреса);
        ціль обʼєкт_числа1 = забрати_з_стопки<комірка<Обʼєкт>>(М.стопка::адреса);
        ціль число1 = обʼєкт_числа1.дані;
        ціль число2 = обʼєкт_числа2.дані;
        ціль число = число1 + число2;
        ціль обʼєкт_числа = виділити_обʼєкт_числа(М, число);
        покласти_на_стопку<комірка<Обʼєкт>>(М.стопка::адреса, обʼєкт_числа);
      }
      позиція_вказівки = позиція_вказівки + 1;
    }
  }
}

зовнішня дія main(args: ц32, argv: памʼять<памʼять<п8>>): ц32 {
  ціль код = МаМа::виділити_код();
  ціль позиція_числа = МаМа::додати_число_до_коду(код, 10);
  ціль позиція_числа1 = МаМа::додати_число_до_коду(код, 20);
  МаМа::додати_вказівку_до_коду_з_аргументом_п32(код, МаМа::ВПокластиЧисло, позиція_числа);
  МаМа::додати_вказівку_до_коду_з_аргументом_п32(код, МаМа::ВПокластиЧисло, позиція_числа1);
  МаМа::додати_вказівку_до_коду(код, МаМа::ВДодати);
  ціль М = МаМа::виділити_машину();
  МаМа::виконати_код(М, код);
  ціль обʼєкт_зі_стопки = забрати_з_стопки<комірка<МаМа::Обʼєкт>>(М.стопка::адреса);
  надрукувати_д64(обʼєкт_зі_стопки.дані);
  вернути 0;
}