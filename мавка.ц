взяти визначення МаМа;

секція МаМа {
  дія виділити_код(): адреса<Код> {
    ціль код = виділити<Код>();
    код.розмір_вказівок = 0;
    код.вказівки = пусто;
    код.кількість_назв = 0;
    код.назви = пусто;
    код.кількість_чисел = 0;
    код.числа = пусто;
    код.кількість_текстів = 0;
    код.тексти = пусто;
    код.кількість_юнікодів = 0;
    код.юнікоди = пусто;
    код.кількість_підкодів = 0;
    код.підкоди = пусто;
    вернути код;
  }

  дія додати_назву_до_коду(код: адреса<Код>, назва: адреса<Назва>): п32 {
    код.назви = перевиділити<адреса<Назва>>(код.назви, (код.кількість_назв + 1) як ц32);
    код.назви[код.кількість_назв] = назва;
    код.кількість_назв = код.кількість_назв + 1;
    вернути код.кількість_назв - 1;
  }

  дія додати_число_до_коду(код: адреса<Код>, значення: д64): п32 {
    код.числа = перевиділити<д64>(код.числа, (код.кількість_чисел + 1) як ц32);
    код.числа[код.кількість_чисел] = значення;
    код.кількість_чисел = код.кількість_чисел + 1;
    вернути код.кількість_чисел - 1;
  }

  дія додати_текст_до_коду(код: адреса<Код>, текст: памʼять<п32>): п32 {
    код.тексти = перевиділити<памʼять<п32>>(код.тексти, (код.кількість_текстів + 1) як ц32);
    код.тексти[код.кількість_текстів] = текст;
    код.кількість_текстів = код.кількість_текстів + 1;
    вернути код.кількість_текстів - 1;
  }

  дія додати_юнікод_до_коду(код:
  адреса<Код>, юнікод: памʼять<п32>): п32 {
    код.юнікоди = перевиділити<памʼять<п32>>(код.юнікоди, (код.кількість_юнікодів + 1) як ц32);
    код.юнікоди[код.кількість_юнікодів] = юнікод;
    код.кількість_юнікодів = код.кількість_юнікодів + 1;
    вернути код.кількість_юнікодів - 1;
  }

  дія додати_вказівку_до_коду(код: адреса<Код>, вказівка: п8): п32 {
    код.вказівки = перевиділити<п8>(код.вказівки, (код.розмір_вказівок + 1) як ц32);
    код.вказівки[код.розмір_вказівок] = вказівка;
    код.розмір_вказівок = код.розмір_вказівок + 1;
    вернути код.розмір_вказівок - 1;
  }

  дія додати_вказівку_до_коду_з_аргументом_п32(код: адреса<Код>, вказівка: п8, аргумент: п32): п32 {
    код.вказівки = перевиділити<п8>(код.вказівки, (код.розмір_вказівок + 1 + 4) як ц32);
    код.вказівки[код.розмір_вказівок] = вказівка;
    код.вказівки[код.розмір_вказівок + 1] = (аргумент & 0шДД) як п8;
    код.вказівки[код.розмір_вказівок + 2] = ((аргумент >> 8) & 0шДД) як п8;
    код.вказівки[код.розмір_вказівок + 3] = ((аргумент >> 16) & 0шДД) як п8;
    код.вказівки[код.розмір_вказівок + 4] = ((аргумент >> 24) & 0шДД) як п8;
    код.розмір_вказівок = код.розмір_вказівок + 1 + 4;
    вернути код.розмір_вказівок - 1 - 4;
  }

  дія прочитати_аргумент_вказівки_п32(код: адреса<Код>, позиція: п32): п32 {
    вернути (код.вказівки[позиція + 1] як п32)
          + ((код.вказівки[позиція + 2] як п32) << 8)
          + ((код.вказівки[позиція + 3] як п32) << 16)
          + ((код.вказівки[позиція + 4] як п32) << 24);
  }

  дія виділити_назву(значення: Ю8): адреса<Назва> {
    ціль назва = виділити<Назва>();
    назва.значення = виділити_копію_ю8(значення);
    вернути назва;
  }

  дія перевірити_чи_назви_рівні(назва1: адреса<Назва>, назва2: адреса<Назва>): логічне {
    вернути назва1 == назва2;
  }
}

секція МаМа {
  дія виділити_обʼєкт(М: адреса<Машина>, обʼєкт_структури: адреса<Обʼєкт>): адреса<Обʼєкт> {
    ціль обʼєкт = виділити<Обʼєкт>();
    обʼєкт.обʼєкт_структури = пусто;
    обʼєкт.властивості = зробити_карту<адреса<Назва>, адреса<Обʼєкт>>(перевірити_чи_назви_рівні);
    обʼєкт.дані = 0.0д64;
    вернути обʼєкт;
  }

  дія виділити_обʼєкт_структури(М: адреса<Машина>, предок: адреса<Обʼєкт>): адреса<Обʼєкт> {
    ціль обʼєкт_структури = виділити_обʼєкт(М, М.обʼєкт_структури_структура);
    якщо предок == пусто {
      розширити_карту<адреса<Назва>, адреса<Обʼєкт>>(М.обʼєкт_структури_структура.властивості::адреса, 1);
      М.обʼєкт_структури_структура.властивості.елементи[0].ключ = М.БН.предок;
      М.обʼєкт_структури_структура.властивості.елементи[0].значення = М.обʼєкт_структури_обʼєкт;
    } інакше {
      розширити_карту<адреса<Назва>, адреса<Обʼєкт>>(М.обʼєкт_структури_структура.властивості::адреса, 1);
      М.обʼєкт_структури_структура.властивості.елементи[0].ключ = М.БН.предок;
      М.обʼєкт_структури_структура.властивості.елементи[0].значення = предок;
    }
    вернути обʼєкт_структури;
  }

  дія виділити_обʼєкт_числа(М: адреса<Машина>, значення: д64): адреса<Обʼєкт> {
    ціль обʼєкт_числа = виділити_обʼєкт(М, М.обʼєкт_структури_число);
    обʼєкт_числа.дані = значення;
    вернути обʼєкт_числа;
  }

  дія виділити_машину(): адреса<Машина> {
    ціль М = виділити<Машина>();
    М.БН = зробити_базу_назв();
    М.стопка = зробити_стопку<адреса<Обʼєкт>>();
    М.обʼєкт_структури_обʼєкт = виділити_обʼєкт(М, пусто);
    розширити_карту<адреса<Назва>, адреса<Обʼєкт>>(М.обʼєкт_структури_обʼєкт.властивості::адреса, 1);
    М.обʼєкт_структури_обʼєкт.властивості.елементи[0].ключ = М.БН.предок;
    М.обʼєкт_структури_обʼєкт.властивості.елементи[0].значення = пусто;
    М.обʼєкт_структури_структура = виділити_обʼєкт(М, пусто);
    М.обʼєкт_структури_структура.обʼєкт_структури = М.обʼєкт_структури_структура;
    розширити_карту<адреса<Назва>, адреса<Обʼєкт>>(М.обʼєкт_структури_структура.властивості::адреса, 1);
    М.обʼєкт_структури_структура.властивості.елементи[0].ключ = М.БН.предок;
    М.обʼєкт_структури_структура.властивості.елементи[0].значення = М.обʼєкт_структури_обʼєкт;
    М.обʼєкт_структури_обʼєкт.обʼєкт_структури = М.обʼєкт_структури_структура;
    М.обʼєкт_структури_число = виділити_обʼєкт_структури(М, пусто);
    вернути М;
  }

  дія виконати_код(М: адреса<Машина>, код: адреса<Код>) {
    ціль позиція_вказівки: п32 = 0;
    поки позиція_вказівки < код.розмір_вказівок {
      ціль вказівка = код.вказівки[позиція_вказівки];
      якщо вказівка == ВПокластиЧисло {
        ціль позиція_числа = прочитати_аргумент_вказівки_п32(код, позиція_вказівки);
        позиція_вказівки = позиція_вказівки + 4;
        покласти_на_стопку<адреса<Обʼєкт>>(М.стопка::адреса, виділити_обʼєкт_числа(М, код.числа[позиція_числа]));
      } інакше якщо вказівка == ВДодати {
        ціль обʼєкт_числа2 = забрати_з_стопки<адреса<Обʼєкт>>(М.стопка::адреса);
        ціль обʼєкт_числа1 = забрати_з_стопки<адреса<Обʼєкт>>(М.стопка::адреса);
        ціль число1 = обʼєкт_числа1.дані як ДаніОбʼєктаЧисла;
        ціль число2 = обʼєкт_числа2.дані як ДаніОбʼєктаЧисла;
        покласти_на_стопку<адреса<Обʼєкт>>(М.стопка::адреса, виділити_обʼєкт_числа(М, число1 + число2));
      }
      позиція_вказівки = позиція_вказівки + 1;
    }
  }

  дія зробити_базу_назв(): БазаНазв {
    ціль БН = БазаНазв {};
    БН._дані = зробити_вектор<адреса<Назва>>();
    БН.предок = знайти_або_виділити_й_додати_назву(БН::адреса, ю8"предок");
    вернути БН;
  }

  дія знайти_або_виділити_й_додати_назву(БН: адреса<БазаНазв>, значення: Ю8): адреса<Назва> {
    змінна ціль позиція: позитивне = 0;
    поки позиція < БН._дані.довжина {
      ціль назва = БН._дані.дані[позиція];
      якщо перевірити_чи_ю8_рівні(назва.значення, значення) {
        вернути назва;
      }
      позиція = позиція + 1;
    }
    ціль назва = виділити_назву(значення);
    додати_до_вектору<адреса<Назва>>(БН._дані::адреса, назва);
    вернути назва;
  }
}

зовнішня дія прочитати_файл(шлях: Ю8): Ю8;

зовнішня дія стартувати_мавку(кількість_аргументів: ц32, аргументи: памʼять<Ю8>): ц32 {
  ціль код = МаМа::виділити_код();
  ціль позиція_числа = МаМа::додати_число_до_коду(код, 10);
  ціль позиція_числа1 = МаМа::додати_число_до_коду(код, 20);
  МаМа::додати_вказівку_до_коду_з_аргументом_п32(код, МаМа::ВПокластиЧисло, позиція_числа);
  МаМа::додати_вказівку_до_коду_з_аргументом_п32(код, МаМа::ВПокластиЧисло, позиція_числа1);
  МаМа::додати_вказівку_до_коду(код, МаМа::ВДодати);
  ціль М = МаМа::виділити_машину();
  МаМа::виконати_код(М, код);
  ціль обʼєкт_зі_стопки = забрати_з_стопки<адреса<МаМа::Обʼєкт>>(М.стопка::адреса);
  надрукувати_д64(обʼєкт_зі_стопки.дані як МаМа::ДаніОбʼєктаЧисла);
  ціль значення_з_файлу = прочитати_файл(ю8"привіт.м");
  ціль текст_коду = виділити<ТекстКоду>();
  текст_коду.шлях = виділити_копію_ю8(ю8"привіт.м");
  текст_коду.значення = значення_з_файлу;
  ціль результат_розбору_мавки = розібрати_мавку(текст_коду);
  якщо результат_розбору_мавки.успіх == 0 {
    надрукувати_ю8(ю8"Помилка розбору");
  }

  вернути 0;
}